
Garden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003a7c  00003b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800068  00800068  00003b18  2**0
                  ALLOC
  3 .stab         000055c8  00000000  00000000  00003b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019e3  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000aac3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000aad4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000ab10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000aff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000b499  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000b4b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_1>
       8:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__vector_2>
       c:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__vector_15>
      40:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 1a 	call	0x358a	; 0x358a <main>
      8a:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
      9a:	87 e2       	ldi	r24, 0x27	; 39
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	fc 01       	movw	r30, r24
      a0:	20 81       	ld	r18, Z
      a2:	87 e2       	ldi	r24, 0x27	; 39
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	20 64       	ori	r18, 0x40	; 64
      a8:	fc 01       	movw	r30, r24
      aa:	20 83       	st	Z, r18
      CLR_BIT(ADMUX, ADMUX_REFS1);
      ac:	87 e2       	ldi	r24, 0x27	; 39
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	fc 01       	movw	r30, r24
      b2:	20 81       	ld	r18, Z
      b4:	87 e2       	ldi	r24, 0x27	; 39
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	2f 77       	andi	r18, 0x7F	; 127
      ba:	fc 01       	movw	r30, r24
      bc:	20 83       	st	Z, r18
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
      be:	87 e2       	ldi	r24, 0x27	; 39
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	fc 01       	movw	r30, r24
      c4:	20 81       	ld	r18, Z
      c6:	87 e2       	ldi	r24, 0x27	; 39
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2f 7d       	andi	r18, 0xDF	; 223
      cc:	fc 01       	movw	r30, r24
      ce:	20 83       	st	Z, r18
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
      d0:	86 e2       	ldi	r24, 0x26	; 38
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	fc 01       	movw	r30, r24
      d6:	20 81       	ld	r18, Z
      d8:	86 e2       	ldi	r24, 0x26	; 38
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	28 7f       	andi	r18, 0xF8	; 248
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
      ADCSRA |= ADC_PRESCALLER;
      e2:	86 e2       	ldi	r24, 0x26	; 38
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	fc 01       	movw	r30, r24
      e8:	20 81       	ld	r18, Z
      ea:	86 e2       	ldi	r24, 0x26	; 38
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	27 60       	ori	r18, 0x07	; 7
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
      f4:	86 e2       	ldi	r24, 0x26	; 38
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	fc 01       	movw	r30, r24
      fa:	20 81       	ld	r18, Z
      fc:	86 e2       	ldi	r24, 0x26	; 38
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	2f 7d       	andi	r18, 0xDF	; 223
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
     106:	86 e2       	ldi	r24, 0x26	; 38
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	fc 01       	movw	r30, r24
     10c:	20 81       	ld	r18, Z
     10e:	86 e2       	ldi	r24, 0x26	; 38
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	20 68       	ori	r18, 0x80	; 128
     114:	fc 01       	movw	r30, r24
     116:	20 83       	st	Z, r18
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
     118:	86 e2       	ldi	r24, 0x26	; 38
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	20 81       	ld	r18, Z
     120:	86 e2       	ldi	r24, 0x26	; 38
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	27 7f       	andi	r18, 0xF7	; 247
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
     12a:	00 00       	nop
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
     13a:	86 e2       	ldi	r24, 0x26	; 38
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	fc 01       	movw	r30, r24
     140:	20 81       	ld	r18, Z
     142:	86 e2       	ldi	r24, 0x26	; 38
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	20 68       	ori	r18, 0x80	; 128
     148:	fc 01       	movw	r30, r24
     14a:	20 83       	st	Z, r18
}
     14c:	00 00       	nop
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
     15c:	86 e2       	ldi	r24, 0x26	; 38
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	fc 01       	movw	r30, r24
     162:	20 81       	ld	r18, Z
     164:	86 e2       	ldi	r24, 0x26	; 38
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	2f 77       	andi	r18, 0x7F	; 127
     16a:	fc 01       	movw	r30, r24
     16c:	20 83       	st	Z, r18
}
     16e:	00 00       	nop
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
     17e:	86 e2       	ldi	r24, 0x26	; 38
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	fc 01       	movw	r30, r24
     184:	20 81       	ld	r18, Z
     186:	86 e2       	ldi	r24, 0x26	; 38
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	28 60       	ori	r18, 0x08	; 8
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
}
     190:	00 00       	nop
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	08 95       	ret

00000198 <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
     1a0:	86 e2       	ldi	r24, 0x26	; 38
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 81       	ld	r18, Z
     1a8:	86 e2       	ldi	r24, 0x26	; 38
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	27 7f       	andi	r18, 0xF7	; 247
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
}
     1b2:	00 00       	nop
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <ADC_u8VoltageReference+0x6>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
     1ca:	8a 81       	ldd	r24, Y+2	; 0x02
     1cc:	88 23       	and	r24, r24
     1ce:	31 f0       	breq	.+12     	; 0x1dc <ADC_u8VoltageReference+0x22>
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	19 f0       	breq	.+6      	; 0x1dc <ADC_u8VoltageReference+0x22>
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	83 30       	cpi	r24, 0x03	; 3
     1da:	09 f5       	brne	.+66     	; 0x21e <ADC_u8VoltageReference+0x64>
  {
    ADMUX &= 0b00111111;
     1dc:	87 e2       	ldi	r24, 0x27	; 39
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	fc 01       	movw	r30, r24
     1e2:	40 81       	ld	r20, Z
     1e4:	87 e2       	ldi	r24, 0x27	; 39
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	4f 73       	andi	r20, 0x3F	; 63
     1ea:	fc 01       	movw	r30, r24
     1ec:	40 83       	st	Z, r20
    ADMUX |= (Copy_u8VREF << 6);
     1ee:	87 e2       	ldi	r24, 0x27	; 39
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	fc 01       	movw	r30, r24
     1f4:	80 81       	ld	r24, Z
     1f6:	48 2f       	mov	r20, r24
     1f8:	8a 81       	ldd	r24, Y+2	; 0x02
     1fa:	88 2f       	mov	r24, r24
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	38 2f       	mov	r19, r24
     200:	36 95       	lsr	r19
     202:	36 95       	lsr	r19
     204:	28 2f       	mov	r18, r24
     206:	22 95       	swap	r18
     208:	22 0f       	add	r18, r18
     20a:	22 0f       	add	r18, r18
     20c:	20 7c       	andi	r18, 0xC0	; 192
     20e:	82 2f       	mov	r24, r18
     210:	24 2f       	mov	r18, r20
     212:	28 2b       	or	r18, r24
     214:	87 e2       	ldi	r24, 0x27	; 39
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	20 83       	st	Z, r18
    Local_u8ErrorState = OK;
     21c:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
     21e:	89 81       	ldd	r24, Y+1	; 0x01
}
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	00 d0       	rcall	.+0      	; 0x230 <ADC_u8SetPrescaler+0x6>
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	88 30       	cpi	r24, 0x08	; 8
     23e:	a0 f4       	brcc	.+40     	; 0x268 <ADC_u8SetPrescaler+0x3e>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
     240:	86 e2       	ldi	r24, 0x26	; 38
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	fc 01       	movw	r30, r24
     246:	20 81       	ld	r18, Z
     248:	86 e2       	ldi	r24, 0x26	; 38
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	28 7f       	andi	r18, 0xF8	; 248
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
    ADCSRA |= Copy_u8Prescaler;
     252:	86 e2       	ldi	r24, 0x26	; 38
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	30 81       	ld	r19, Z
     25a:	86 e2       	ldi	r24, 0x26	; 38
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	2a 81       	ldd	r18, Y+2	; 0x02
     260:	23 2b       	or	r18, r19
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
    Local_u8ErrorState = OK;
     266:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
     268:	89 81       	ldd	r24, Y+1	; 0x01
}
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	00 d0       	rcall	.+0      	; 0x27a <ADC_u8SetAdjustment+0x6>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
     280:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	88 23       	and	r24, r24
     286:	51 f4       	brne	.+20     	; 0x29c <ADC_u8SetAdjustment+0x28>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     288:	87 e2       	ldi	r24, 0x27	; 39
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	fc 01       	movw	r30, r24
     28e:	20 81       	ld	r18, Z
     290:	87 e2       	ldi	r24, 0x27	; 39
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	2f 7d       	andi	r18, 0xDF	; 223
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
     29a:	0f c0       	rjmp	.+30     	; 0x2ba <ADC_u8SetAdjustment+0x46>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
     29c:	8a 81       	ldd	r24, Y+2	; 0x02
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	51 f4       	brne	.+20     	; 0x2b6 <ADC_u8SetAdjustment+0x42>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
     2a2:	87 e2       	ldi	r24, 0x27	; 39
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 81       	ld	r18, Z
     2aa:	87 e2       	ldi	r24, 0x27	; 39
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	20 62       	ori	r18, 0x20	; 32
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <ADC_u8SetAdjustment+0x46>
  }
  else
  {
    Local_u8ErrorState = NOK;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <ADC_u8SetTriggerSource+0x6>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
     2d2:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	88 30       	cpi	r24, 0x08	; 8
     2d8:	51 f4       	brne	.+20     	; 0x2ee <ADC_u8SetTriggerSource+0x28>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
     2da:	86 e2       	ldi	r24, 0x26	; 38
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	fc 01       	movw	r30, r24
     2e0:	20 81       	ld	r18, Z
     2e2:	86 e2       	ldi	r24, 0x26	; 38
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	2f 7d       	andi	r18, 0xDF	; 223
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	20 c0       	rjmp	.+64     	; 0x32e <ADC_u8SetTriggerSource+0x68>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
     2f0:	88 30       	cpi	r24, 0x08	; 8
     2f2:	d8 f4       	brcc	.+54     	; 0x32a <ADC_u8SetTriggerSource+0x64>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
     2f4:	86 e2       	ldi	r24, 0x26	; 38
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 81       	ld	r18, Z
     2fc:	86 e2       	ldi	r24, 0x26	; 38
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	20 62       	ori	r18, 0x20	; 32
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
    SFIOR &= 0b00011111;
     306:	80 e5       	ldi	r24, 0x50	; 80
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	fc 01       	movw	r30, r24
     30c:	20 81       	ld	r18, Z
     30e:	80 e5       	ldi	r24, 0x50	; 80
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	2f 71       	andi	r18, 0x1F	; 31
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
     318:	20 e5       	ldi	r18, 0x50	; 80
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	80 e5       	ldi	r24, 0x50	; 80
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	f9 01       	movw	r30, r18
     322:	20 81       	ld	r18, Z
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
     328:	02 c0       	rjmp	.+4      	; 0x32e <ADC_u8SetTriggerSource+0x68>
  }
  else
  {
    Local_u8ErrorState = NOK;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
     32e:	89 81       	ldd	r24, Y+1	; 0x01
}
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	28 97       	sbiw	r28, 0x08	; 8
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	8e 83       	std	Y+6, r24	; 0x06
     350:	78 87       	std	Y+8, r23	; 0x08
     352:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
     354:	19 82       	std	Y+1, r1	; 0x01

  u32 Local_u32TimeOutCounter = 0;
     356:	1a 82       	std	Y+2, r1	; 0x02
     358:	1b 82       	std	Y+3, r1	; 0x03
     35a:	1c 82       	std	Y+4, r1	; 0x04
     35c:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_pu16Result != NULL)
     35e:	8f 81       	ldd	r24, Y+7	; 0x07
     360:	98 85       	ldd	r25, Y+8	; 0x08
     362:	89 2b       	or	r24, r25
     364:	09 f4       	brne	.+2      	; 0x368 <ADC_u8GetResultSync+0x2e>
     366:	77 c0       	rjmp	.+238    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
  {
    if (ADC_u8State == IDLE)
     368:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ADC_u8State>
     36c:	88 23       	and	r24, r24
     36e:	09 f0       	breq	.+2      	; 0x372 <ADC_u8GetResultSync+0x38>
     370:	6f c0       	rjmp	.+222    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <ADC_u8State>

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
     378:	8e 81       	ldd	r24, Y+6	; 0x06
     37a:	80 32       	cpi	r24, 0x20	; 32
     37c:	98 f4       	brcc	.+38     	; 0x3a4 <ADC_u8GetResultSync+0x6a>
      {
        ADMUX &= 0b11100000;
     37e:	87 e2       	ldi	r24, 0x27	; 39
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	fc 01       	movw	r30, r24
     384:	20 81       	ld	r18, Z
     386:	87 e2       	ldi	r24, 0x27	; 39
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	20 7e       	andi	r18, 0xE0	; 224
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
        ADMUX |= Copy_u8Channel;
     390:	87 e2       	ldi	r24, 0x27	; 39
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	fc 01       	movw	r30, r24
     396:	30 81       	ld	r19, Z
     398:	87 e2       	ldi	r24, 0x27	; 39
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2e 81       	ldd	r18, Y+6	; 0x06
     39e:	23 2b       	or	r18, r19
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
     3a4:	86 e2       	ldi	r24, 0x26	; 38
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 81       	ld	r18, Z
     3ac:	86 e2       	ldi	r24, 0x26	; 38
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	20 64       	ori	r18, 0x40	; 64
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <ADC_u8GetResultSync+0x94>
      {
        Local_u32TimeOutCounter++;
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	9b 81       	ldd	r25, Y+3	; 0x03
     3bc:	ac 81       	ldd	r26, Y+4	; 0x04
     3be:	bd 81       	ldd	r27, Y+5	; 0x05
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	a1 1d       	adc	r26, r1
     3c4:	b1 1d       	adc	r27, r1
     3c6:	8a 83       	std	Y+2, r24	; 0x02
     3c8:	9b 83       	std	Y+3, r25	; 0x03
     3ca:	ac 83       	std	Y+4, r26	; 0x04
     3cc:	bd 83       	std	Y+5, r27	; 0x05

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
     3ce:	86 e2       	ldi	r24, 0x26	; 38
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	80 81       	ld	r24, Z
     3d6:	88 2f       	mov	r24, r24
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	80 71       	andi	r24, 0x10	; 16
     3dc:	99 27       	eor	r25, r25
     3de:	89 2b       	or	r24, r25
     3e0:	49 f4       	brne	.+18     	; 0x3f4 <ADC_u8GetResultSync+0xba>
     3e2:	8a 81       	ldd	r24, Y+2	; 0x02
     3e4:	9b 81       	ldd	r25, Y+3	; 0x03
     3e6:	ac 81       	ldd	r26, Y+4	; 0x04
     3e8:	bd 81       	ldd	r27, Y+5	; 0x05
     3ea:	80 35       	cpi	r24, 0x50	; 80
     3ec:	93 4c       	sbci	r25, 0xC3	; 195
     3ee:	a1 05       	cpc	r26, r1
     3f0:	b1 05       	cpc	r27, r1
     3f2:	10 f3       	brcs	.-60     	; 0x3b8 <ADC_u8GetResultSync+0x7e>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
     3f4:	8a 81       	ldd	r24, Y+2	; 0x02
     3f6:	9b 81       	ldd	r25, Y+3	; 0x03
     3f8:	ac 81       	ldd	r26, Y+4	; 0x04
     3fa:	bd 81       	ldd	r27, Y+5	; 0x05
     3fc:	80 35       	cpi	r24, 0x50	; 80
     3fe:	93 4c       	sbci	r25, 0xC3	; 195
     400:	a1 05       	cpc	r26, r1
     402:	b1 05       	cpc	r27, r1
     404:	19 f4       	brne	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
      {
        Local_u8ErrorState = NOK;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	1f c0       	rjmp	.+62     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     40c:	86 e2       	ldi	r24, 0x26	; 38
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	fc 01       	movw	r30, r24
     412:	20 81       	ld	r18, Z
     414:	86 e2       	ldi	r24, 0x26	; 38
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	20 61       	ori	r18, 0x10	; 16
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
     41e:	84 e2       	ldi	r24, 0x24	; 36
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fc 01       	movw	r30, r24
     424:	80 81       	ld	r24, Z
     426:	28 2f       	mov	r18, r24
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	85 e2       	ldi	r24, 0x25	; 37
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	fc 01       	movw	r30, r24
     430:	80 81       	ld	r24, Z
     432:	88 2f       	mov	r24, r24
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	98 2f       	mov	r25, r24
     438:	88 27       	eor	r24, r24
     43a:	82 2b       	or	r24, r18
     43c:	93 2b       	or	r25, r19
     43e:	9c 01       	movw	r18, r24
     440:	8f 81       	ldd	r24, Y+7	; 0x07
     442:	98 85       	ldd	r25, Y+8	; 0x08
     444:	fc 01       	movw	r30, r24
     446:	31 83       	std	Z+1, r19	; 0x01
     448:	20 83       	st	Z, r18

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
     44a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ADC_u8State>
     44e:	05 c0       	rjmp	.+10     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	89 83       	std	Y+1, r24	; 0x01
     454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
}
     45c:	28 96       	adiw	r28, 0x08	; 8
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <ADC_u8StartConversionAsynch+0x6>
     474:	00 d0       	rcall	.+0      	; 0x476 <ADC_u8StartConversionAsynch+0x8>
     476:	00 d0       	rcall	.+0      	; 0x478 <ADC_u8StartConversionAsynch+0xa>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	8a 83       	std	Y+2, r24	; 0x02
     47e:	7c 83       	std	Y+4, r23	; 0x04
     480:	6b 83       	std	Y+3, r22	; 0x03
     482:	5e 83       	std	Y+6, r21	; 0x06
     484:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
     486:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     488:	8b 81       	ldd	r24, Y+3	; 0x03
     48a:	9c 81       	ldd	r25, Y+4	; 0x04
     48c:	89 2b       	or	r24, r25
     48e:	09 f4       	brne	.+2      	; 0x492 <ADC_u8StartConversionAsynch+0x24>
     490:	46 c0       	rjmp	.+140    	; 0x51e <ADC_u8StartConversionAsynch+0xb0>
     492:	8d 81       	ldd	r24, Y+5	; 0x05
     494:	9e 81       	ldd	r25, Y+6	; 0x06
     496:	89 2b       	or	r24, r25
     498:	09 f4       	brne	.+2      	; 0x49c <ADC_u8StartConversionAsynch+0x2e>
     49a:	41 c0       	rjmp	.+130    	; 0x51e <ADC_u8StartConversionAsynch+0xb0>
  {
    if (ADC_u8State == IDLE)
     49c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ADC_u8State>
     4a0:	88 23       	and	r24, r24
     4a2:	d1 f5       	brne	.+116    	; 0x518 <ADC_u8StartConversionAsynch+0xaa>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <ADC_u8State>

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
     4aa:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <ADC_u8ISRState>

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
     4ae:	8b 81       	ldd	r24, Y+3	; 0x03
     4b0:	9c 81       	ldd	r25, Y+4	; 0x04
     4b2:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
     4b6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     4ba:	8d 81       	ldd	r24, Y+5	; 0x05
     4bc:	9e 81       	ldd	r25, Y+6	; 0x06
     4be:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <ADC_pvNotificationFunc+0x1>
     4c2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ADC_pvNotificationFunc>

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
     4c6:	8a 81       	ldd	r24, Y+2	; 0x02
     4c8:	80 32       	cpi	r24, 0x20	; 32
     4ca:	98 f4       	brcc	.+38     	; 0x4f2 <ADC_u8StartConversionAsynch+0x84>
      {
        ADMUX &= 0b11100000;
     4cc:	87 e2       	ldi	r24, 0x27	; 39
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 81       	ld	r18, Z
     4d4:	87 e2       	ldi	r24, 0x27	; 39
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	20 7e       	andi	r18, 0xE0	; 224
     4da:	fc 01       	movw	r30, r24
     4dc:	20 83       	st	Z, r18
        ADMUX |= Copy_u8Channel;
     4de:	87 e2       	ldi	r24, 0x27	; 39
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	fc 01       	movw	r30, r24
     4e4:	30 81       	ld	r19, Z
     4e6:	87 e2       	ldi	r24, 0x27	; 39
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	2a 81       	ldd	r18, Y+2	; 0x02
     4ec:	23 2b       	or	r18, r19
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 83       	st	Z, r18
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
     4f2:	86 e2       	ldi	r24, 0x26	; 38
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 81       	ld	r18, Z
     4fa:	86 e2       	ldi	r24, 0x26	; 38
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	20 64       	ori	r18, 0x40	; 64
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
     504:	86 e2       	ldi	r24, 0x26	; 38
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
     50a:	20 81       	ld	r18, Z
     50c:	86 e2       	ldi	r24, 0x26	; 38
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	28 60       	ori	r18, 0x08	; 8
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18
{
  u8 Local_u8ErrorState = OK;

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
  {
    if (ADC_u8State == IDLE)
     516:	05 c0       	rjmp	.+10     	; 0x522 <ADC_u8StartConversionAsynch+0xb4>
      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	89 83       	std	Y+1, r24	; 0x01
{
  u8 Local_u8ErrorState = OK;

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
  {
    if (ADC_u8State == IDLE)
     51c:	02 c0       	rjmp	.+4      	; 0x522 <ADC_u8StartConversionAsynch+0xb4>
      Local_u8ErrorState = BUSY_STATE;
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
     522:	89 81       	ldd	r24, Y+1	; 0x01
}
     524:	26 96       	adiw	r28, 0x06	; 6
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	00 d0       	rcall	.+0      	; 0x53c <ADC_u8StartChainAsynch+0x6>
     53c:	1f 92       	push	r1
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	9b 83       	std	Y+3, r25	; 0x03
     544:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
     546:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
     548:	8a 81       	ldd	r24, Y+2	; 0x02
     54a:	9b 81       	ldd	r25, Y+3	; 0x03
     54c:	89 2b       	or	r24, r25
     54e:	09 f4       	brne	.+2      	; 0x552 <ADC_u8StartChainAsynch+0x1c>
     550:	88 c0       	rjmp	.+272    	; 0x662 <ADC_u8StartChainAsynch+0x12c>
     552:	8a 81       	ldd	r24, Y+2	; 0x02
     554:	9b 81       	ldd	r25, Y+3	; 0x03
     556:	fc 01       	movw	r30, r24
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	89 2b       	or	r24, r25
     55e:	09 f4       	brne	.+2      	; 0x562 <ADC_u8StartChainAsynch+0x2c>
     560:	80 c0       	rjmp	.+256    	; 0x662 <ADC_u8StartChainAsynch+0x12c>
     562:	8a 81       	ldd	r24, Y+2	; 0x02
     564:	9b 81       	ldd	r25, Y+3	; 0x03
     566:	fc 01       	movw	r30, r24
     568:	85 81       	ldd	r24, Z+5	; 0x05
     56a:	96 81       	ldd	r25, Z+6	; 0x06
     56c:	89 2b       	or	r24, r25
     56e:	09 f4       	brne	.+2      	; 0x572 <ADC_u8StartChainAsynch+0x3c>
     570:	78 c0       	rjmp	.+240    	; 0x662 <ADC_u8StartChainAsynch+0x12c>
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	9b 81       	ldd	r25, Y+3	; 0x03
     576:	fc 01       	movw	r30, r24
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	89 2b       	or	r24, r25
     57e:	09 f4       	brne	.+2      	; 0x582 <ADC_u8StartChainAsynch+0x4c>
     580:	70 c0       	rjmp	.+224    	; 0x662 <ADC_u8StartChainAsynch+0x12c>
  {
    if (ADC_u8State == IDLE)
     582:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ADC_u8State>
     586:	88 23       	and	r24, r24
     588:	09 f0       	breq	.+2      	; 0x58c <ADC_u8StartChainAsynch+0x56>
     58a:	68 c0       	rjmp	.+208    	; 0x65c <ADC_u8StartChainAsynch+0x126>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <ADC_u8State>

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <ADC_u8ISRState>

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	9b 81       	ldd	r25, Y+3	; 0x03
     59c:	fc 01       	movw	r30, r24
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
     5a6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
      ADC_pu8ChainChannel = Copy_Chain->Channel;
     5aa:	8a 81       	ldd	r24, Y+2	; 0x02
     5ac:	9b 81       	ldd	r25, Y+3	; 0x03
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <ADC_pu8ChainChannel+0x1>
     5b8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ADC_pu8ChainChannel>
      ADC_u8ChainSize = Copy_Chain->Size;
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	9b 81       	ldd	r25, Y+3	; 0x03
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <ADC_u8ChainSize>
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
     5c8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ca:	9b 81       	ldd	r25, Y+3	; 0x03
     5cc:	fc 01       	movw	r30, r24
     5ce:	85 81       	ldd	r24, Z+5	; 0x05
     5d0:	96 81       	ldd	r25, Z+6	; 0x06
     5d2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <ADC_pvNotificationFunc+0x1>
     5d6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ADC_pvNotificationFunc>

      /*Set Index to first element*/
      ADC_u8Index = 0;
     5da:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ADC_u8Index>

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
     5de:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <ADC_pu8ChainChannel>
     5e2:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <ADC_pu8ChainChannel+0x1>
     5e6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ADC_u8Index>
     5ea:	88 2f       	mov	r24, r24
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	82 0f       	add	r24, r18
     5f0:	93 1f       	adc	r25, r19
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	80 32       	cpi	r24, 0x20	; 32
     5f8:	f0 f4       	brcc	.+60     	; 0x636 <ADC_u8StartChainAsynch+0x100>
      {
        ADMUX &= 0b11100000;
     5fa:	87 e2       	ldi	r24, 0x27	; 39
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	20 81       	ld	r18, Z
     602:	87 e2       	ldi	r24, 0x27	; 39
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	20 7e       	andi	r18, 0xE0	; 224
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
     60c:	87 e2       	ldi	r24, 0x27	; 39
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	fc 01       	movw	r30, r24
     612:	40 81       	ld	r20, Z
     614:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <ADC_pu8ChainChannel>
     618:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <ADC_pu8ChainChannel+0x1>
     61c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ADC_u8Index>
     620:	88 2f       	mov	r24, r24
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	82 0f       	add	r24, r18
     626:	93 1f       	adc	r25, r19
     628:	fc 01       	movw	r30, r24
     62a:	20 81       	ld	r18, Z
     62c:	87 e2       	ldi	r24, 0x27	; 39
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	24 2b       	or	r18, r20
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
     636:	86 e2       	ldi	r24, 0x26	; 38
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	fc 01       	movw	r30, r24
     63c:	20 81       	ld	r18, Z
     63e:	86 e2       	ldi	r24, 0x26	; 38
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	20 64       	ori	r18, 0x40	; 64
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
     648:	86 e2       	ldi	r24, 0x26	; 38
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	fc 01       	movw	r30, r24
     64e:	20 81       	ld	r18, Z
     650:	86 e2       	ldi	r24, 0x26	; 38
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	28 60       	ori	r18, 0x08	; 8
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
{
  u8 Local_u8ErrorState = OK;

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
  {
    if (ADC_u8State == IDLE)
     65a:	05 c0       	rjmp	.+10     	; 0x666 <ADC_u8StartChainAsynch+0x130>
      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	89 83       	std	Y+1, r24	; 0x01
{
  u8 Local_u8ErrorState = OK;

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
  {
    if (ADC_u8State == IDLE)
     660:	02 c0       	rjmp	.+4      	; 0x666 <ADC_u8StartChainAsynch+0x130>
      Local_u8ErrorState = BUSY_STATE;
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
     666:	89 81       	ldd	r24, Y+1	; 0x01
}
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	2f 93       	push	r18
     680:	3f 93       	push	r19
     682:	4f 93       	push	r20
     684:	5f 93       	push	r21
     686:	6f 93       	push	r22
     688:	7f 93       	push	r23
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	af 93       	push	r26
     690:	bf 93       	push	r27
     692:	ef 93       	push	r30
     694:	ff 93       	push	r31
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
     69e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <ADC_u8ISRState>
     6a2:	88 23       	and	r24, r24
     6a4:	49 f5       	brne	.+82     	; 0x6f8 <__vector_16+0x84>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
     6a6:	84 e2       	ldi	r24, 0x24	; 36
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	28 2f       	mov	r18, r24
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	85 e2       	ldi	r24, 0x25	; 37
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	fc 01       	movw	r30, r24
     6b8:	80 81       	ld	r24, Z
     6ba:	88 2f       	mov	r24, r24
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	98 2f       	mov	r25, r24
     6c0:	88 27       	eor	r24, r24
     6c2:	28 2b       	or	r18, r24
     6c4:	39 2b       	or	r19, r25
     6c6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     6ca:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
     6ce:	fc 01       	movw	r30, r24
     6d0:	31 83       	std	Z+1, r19	; 0x01
     6d2:	20 83       	st	Z, r18
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
     6d4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ADC_u8State>

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
     6d8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ADC_pvNotificationFunc>
     6dc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <ADC_pvNotificationFunc+0x1>
     6e0:	fc 01       	movw	r30, r24
     6e2:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
     6e4:	86 e2       	ldi	r24, 0x26	; 38
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 81       	ld	r18, Z
     6ec:	86 e2       	ldi	r24, 0x26	; 38
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	27 7f       	andi	r18, 0xF7	; 247
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    }
  }
}
     6f6:	78 c0       	rjmp	.+240    	; 0x7e8 <__vector_16+0x174>
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
     6f8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <ADC_u8ISRState>
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	09 f0       	breq	.+2      	; 0x702 <__vector_16+0x8e>
     700:	73 c0       	rjmp	.+230    	; 0x7e8 <__vector_16+0x174>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
     702:	84 e2       	ldi	r24, 0x24	; 36
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	80 81       	ld	r24, Z
     70a:	28 2f       	mov	r18, r24
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	85 e2       	ldi	r24, 0x25	; 37
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	98 2f       	mov	r25, r24
     71c:	88 27       	eor	r24, r24
     71e:	a9 01       	movw	r20, r18
     720:	48 2b       	or	r20, r24
     722:	59 2b       	or	r21, r25
     724:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
     728:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <__data_end+0x1>
     72c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ADC_u8Index>
     730:	88 2f       	mov	r24, r24
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	9a 01       	movw	r18, r20
     73e:	fc 01       	movw	r30, r24
     740:	31 83       	std	Z+1, r19	; 0x01
     742:	20 83       	st	Z, r18
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
     744:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ADC_u8Index>
     748:	8f 5f       	subi	r24, 0xFF	; 255
     74a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <ADC_u8Index>

    if (ADC_u8Index == ADC_u8ChainSize)
     74e:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <ADC_u8Index>
     752:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <ADC_u8ChainSize>
     756:	98 17       	cp	r25, r24
     758:	91 f4       	brne	.+36     	; 0x77e <__vector_16+0x10a>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
     75a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ADC_u8State>

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
     75e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ADC_pvNotificationFunc>
     762:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <ADC_pvNotificationFunc+0x1>
     766:	fc 01       	movw	r30, r24
     768:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
     76a:	86 e2       	ldi	r24, 0x26	; 38
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	fc 01       	movw	r30, r24
     770:	20 81       	ld	r18, Z
     772:	86 e2       	ldi	r24, 0x26	; 38
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	27 7f       	andi	r18, 0xF7	; 247
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    }
  }
}
     77c:	35 c0       	rjmp	.+106    	; 0x7e8 <__vector_16+0x174>
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
     77e:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <ADC_pu8ChainChannel>
     782:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <ADC_pu8ChainChannel+0x1>
     786:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ADC_u8Index>
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	82 0f       	add	r24, r18
     790:	93 1f       	adc	r25, r19
     792:	fc 01       	movw	r30, r24
     794:	80 81       	ld	r24, Z
     796:	80 32       	cpi	r24, 0x20	; 32
     798:	f0 f4       	brcc	.+60     	; 0x7d6 <__vector_16+0x162>
      {
        ADMUX &= 0b11100000;
     79a:	87 e2       	ldi	r24, 0x27	; 39
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	fc 01       	movw	r30, r24
     7a0:	20 81       	ld	r18, Z
     7a2:	87 e2       	ldi	r24, 0x27	; 39
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	20 7e       	andi	r18, 0xE0	; 224
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
     7ac:	87 e2       	ldi	r24, 0x27	; 39
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	fc 01       	movw	r30, r24
     7b2:	40 81       	ld	r20, Z
     7b4:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <ADC_pu8ChainChannel>
     7b8:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <ADC_pu8ChainChannel+0x1>
     7bc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ADC_u8Index>
     7c0:	88 2f       	mov	r24, r24
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	82 0f       	add	r24, r18
     7c6:	93 1f       	adc	r25, r19
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 81       	ld	r18, Z
     7cc:	87 e2       	ldi	r24, 0x27	; 39
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	24 2b       	or	r18, r20
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
     7d6:	86 e2       	ldi	r24, 0x26	; 38
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	fc 01       	movw	r30, r24
     7dc:	20 81       	ld	r18, Z
     7de:	86 e2       	ldi	r24, 0x26	; 38
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	20 64       	ori	r18, 0x40	; 64
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
    }
  }
}
     7e8:	00 00       	nop
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	c6 54       	subi	r28, 0x46	; 70
     81e:	d1 09       	sbc	r29, r1
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	a8 e4       	ldi	r26, 0x48	; 72
     830:	b2 e4       	ldi	r27, 0x42	; 66
     832:	89 af       	std	Y+57, r24	; 0x39
     834:	9a af       	std	Y+58, r25	; 0x3a
     836:	ab af       	std	Y+59, r26	; 0x3b
     838:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	4a ef       	ldi	r20, 0xFA	; 250
     840:	54 e4       	ldi	r21, 0x44	; 68
     842:	69 ad       	ldd	r22, Y+57	; 0x39
     844:	7a ad       	ldd	r23, Y+58	; 0x3a
     846:	8b ad       	ldd	r24, Y+59	; 0x3b
     848:	9c ad       	ldd	r25, Y+60	; 0x3c
     84a:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	9e 01       	movw	r18, r28
     854:	23 5c       	subi	r18, 0xC3	; 195
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	f9 01       	movw	r30, r18
     85a:	80 83       	st	Z, r24
     85c:	91 83       	std	Z+1, r25	; 0x01
     85e:	a2 83       	std	Z+2, r26	; 0x02
     860:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e8       	ldi	r20, 0x80	; 128
     868:	5f e3       	ldi	r21, 0x3F	; 63
     86a:	ce 01       	movw	r24, r28
     86c:	cd 96       	adiw	r24, 0x3d	; 61
     86e:	fc 01       	movw	r30, r24
     870:	60 81       	ld	r22, Z
     872:	71 81       	ldd	r23, Z+1	; 0x01
     874:	82 81       	ldd	r24, Z+2	; 0x02
     876:	93 81       	ldd	r25, Z+3	; 0x03
     878:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
     87c:	88 23       	and	r24, r24
     87e:	4c f4       	brge	.+18     	; 0x892 <__stack+0x33>
		__ticks = 1;
     880:	ce 01       	movw	r24, r28
     882:	8f 5b       	subi	r24, 0xBF	; 191
     884:	9f 4f       	sbci	r25, 0xFF	; 255
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	fc 01       	movw	r30, r24
     88c:	31 83       	std	Z+1, r19	; 0x01
     88e:	20 83       	st	Z, r18
     890:	67 c0       	rjmp	.+206    	; 0x960 <__stack+0x101>
	else if (__tmp > 65535)
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	3f ef       	ldi	r19, 0xFF	; 255
     896:	4f e7       	ldi	r20, 0x7F	; 127
     898:	57 e4       	ldi	r21, 0x47	; 71
     89a:	ce 01       	movw	r24, r28
     89c:	cd 96       	adiw	r24, 0x3d	; 61
     89e:	fc 01       	movw	r30, r24
     8a0:	60 81       	ld	r22, Z
     8a2:	71 81       	ldd	r23, Z+1	; 0x01
     8a4:	82 81       	ldd	r24, Z+2	; 0x02
     8a6:	93 81       	ldd	r25, Z+3	; 0x03
     8a8:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
     8ac:	18 16       	cp	r1, r24
     8ae:	0c f0       	brlt	.+2      	; 0x8b2 <__stack+0x53>
     8b0:	46 c0       	rjmp	.+140    	; 0x93e <__stack+0xdf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e2       	ldi	r20, 0x20	; 32
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	69 ad       	ldd	r22, Y+57	; 0x39
     8bc:	7a ad       	ldd	r23, Y+58	; 0x3a
     8be:	8b ad       	ldd	r24, Y+59	; 0x3b
     8c0:	9c ad       	ldd	r25, Y+60	; 0x3c
     8c2:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5b       	subi	r16, 0xBF	; 191
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	bc 01       	movw	r22, r24
     8d2:	cd 01       	movw	r24, r26
     8d4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	f8 01       	movw	r30, r16
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	80 83       	st	Z, r24
     8e2:	24 c0       	rjmp	.+72     	; 0x92c <__stack+0xcd>
     8e4:	ce 01       	movw	r24, r28
     8e6:	8d 5b       	subi	r24, 0xBD	; 189
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	28 ec       	ldi	r18, 0xC8	; 200
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	fc 01       	movw	r30, r24
     8f0:	31 83       	std	Z+1, r19	; 0x01
     8f2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8f4:	ce 01       	movw	r24, r28
     8f6:	8d 5b       	subi	r24, 0xBD	; 189
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0xa1>
     904:	9e 01       	movw	r18, r28
     906:	2d 5b       	subi	r18, 0xBD	; 189
     908:	3f 4f       	sbci	r19, 0xFF	; 255
     90a:	f9 01       	movw	r30, r18
     90c:	91 83       	std	Z+1, r25	; 0x01
     90e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     910:	ce 01       	movw	r24, r28
     912:	8f 5b       	subi	r24, 0xBF	; 191
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	9e 01       	movw	r18, r28
     918:	2f 5b       	subi	r18, 0xBF	; 191
     91a:	3f 4f       	sbci	r19, 0xFF	; 255
     91c:	f9 01       	movw	r30, r18
     91e:	20 81       	ld	r18, Z
     920:	31 81       	ldd	r19, Z+1	; 0x01
     922:	21 50       	subi	r18, 0x01	; 1
     924:	31 09       	sbc	r19, r1
     926:	fc 01       	movw	r30, r24
     928:	31 83       	std	Z+1, r19	; 0x01
     92a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     92c:	ce 01       	movw	r24, r28
     92e:	8f 5b       	subi	r24, 0xBF	; 191
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	fc 01       	movw	r30, r24
     934:	80 81       	ld	r24, Z
     936:	91 81       	ldd	r25, Z+1	; 0x01
     938:	89 2b       	or	r24, r25
     93a:	a1 f6       	brne	.-88     	; 0x8e4 <__stack+0x85>
     93c:	2b c0       	rjmp	.+86     	; 0x994 <__stack+0x135>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     93e:	8e 01       	movw	r16, r28
     940:	0f 5b       	subi	r16, 0xBF	; 191
     942:	1f 4f       	sbci	r17, 0xFF	; 255
     944:	ce 01       	movw	r24, r28
     946:	cd 96       	adiw	r24, 0x3d	; 61
     948:	fc 01       	movw	r30, r24
     94a:	60 81       	ld	r22, Z
     94c:	71 81       	ldd	r23, Z+1	; 0x01
     94e:	82 81       	ldd	r24, Z+2	; 0x02
     950:	93 81       	ldd	r25, Z+3	; 0x03
     952:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	f8 01       	movw	r30, r16
     95c:	91 83       	std	Z+1, r25	; 0x01
     95e:	80 83       	st	Z, r24
     960:	ce 01       	movw	r24, r28
     962:	8b 5b       	subi	r24, 0xBB	; 187
     964:	9f 4f       	sbci	r25, 0xFF	; 255
     966:	9e 01       	movw	r18, r28
     968:	2f 5b       	subi	r18, 0xBF	; 191
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	f9 01       	movw	r30, r18
     96e:	20 81       	ld	r18, Z
     970:	31 81       	ldd	r19, Z+1	; 0x01
     972:	fc 01       	movw	r30, r24
     974:	31 83       	std	Z+1, r19	; 0x01
     976:	20 83       	st	Z, r18
     978:	ce 01       	movw	r24, r28
     97a:	8b 5b       	subi	r24, 0xBB	; 187
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	fc 01       	movw	r30, r24
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	f1 f7       	brne	.-4      	; 0x984 <__stack+0x125>
     988:	9e 01       	movw	r18, r28
     98a:	2b 5b       	subi	r18, 0xBB	; 187
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	f9 01       	movw	r30, r18
     990:	91 83       	std	Z+1, r25	; 0x01
     992:	80 83       	st	Z, r24
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN0, DIO_PIN_OUTPUT);
     994:	41 e0       	ldi	r20, 0x01	; 1
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN1, DIO_PIN_OUTPUT);
     99e:	41 e0       	ldi	r20, 0x01	; 1
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN2, DIO_PIN_OUTPUT);
     9a8:	41 e0       	ldi	r20, 0x01	; 1
     9aa:	62 e0       	ldi	r22, 0x02	; 2
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN3, DIO_PIN_OUTPUT);
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	63 e0       	ldi	r22, 0x03	; 3
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	67 e0       	ldi	r22, 0x07	; 7
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	66 e0       	ldi	r22, 0x06	; 6
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	65 e0       	ldi	r22, 0x05	; 5
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e2       	ldi	r26, 0x20	; 32
     9e6:	b1 e4       	ldi	r27, 0x41	; 65
     9e8:	8b a7       	std	Y+43, r24	; 0x2b
     9ea:	9c a7       	std	Y+44, r25	; 0x2c
     9ec:	ad a7       	std	Y+45, r26	; 0x2d
     9ee:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	4a ef       	ldi	r20, 0xFA	; 250
     9f6:	54 e4       	ldi	r21, 0x44	; 68
     9f8:	6b a5       	ldd	r22, Y+43	; 0x2b
     9fa:	7c a5       	ldd	r23, Y+44	; 0x2c
     9fc:	8d a5       	ldd	r24, Y+45	; 0x2d
     9fe:	9e a5       	ldd	r25, Y+46	; 0x2e
     a00:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	8f a7       	std	Y+47, r24	; 0x2f
     a0a:	98 ab       	std	Y+48, r25	; 0x30
     a0c:	a9 ab       	std	Y+49, r26	; 0x31
     a0e:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e8       	ldi	r20, 0x80	; 128
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	6f a5       	ldd	r22, Y+47	; 0x2f
     a1a:	78 a9       	ldd	r23, Y+48	; 0x30
     a1c:	89 a9       	ldd	r24, Y+49	; 0x31
     a1e:	9a a9       	ldd	r25, Y+50	; 0x32
     a20:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
     a24:	88 23       	and	r24, r24
     a26:	2c f4       	brge	.+10     	; 0xa32 <__stack+0x1d3>
		__ticks = 1;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	9c ab       	std	Y+52, r25	; 0x34
     a2e:	8b ab       	std	Y+51, r24	; 0x33
     a30:	3f c0       	rjmp	.+126    	; 0xab0 <__stack+0x251>
	else if (__tmp > 65535)
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	3f ef       	ldi	r19, 0xFF	; 255
     a36:	4f e7       	ldi	r20, 0x7F	; 127
     a38:	57 e4       	ldi	r21, 0x47	; 71
     a3a:	6f a5       	ldd	r22, Y+47	; 0x2f
     a3c:	78 a9       	ldd	r23, Y+48	; 0x30
     a3e:	89 a9       	ldd	r24, Y+49	; 0x31
     a40:	9a a9       	ldd	r25, Y+50	; 0x32
     a42:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
     a46:	18 16       	cp	r1, r24
     a48:	4c f5       	brge	.+82     	; 0xa9c <__stack+0x23d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e2       	ldi	r20, 0x20	; 32
     a50:	51 e4       	ldi	r21, 0x41	; 65
     a52:	6b a5       	ldd	r22, Y+43	; 0x2b
     a54:	7c a5       	ldd	r23, Y+44	; 0x2c
     a56:	8d a5       	ldd	r24, Y+45	; 0x2d
     a58:	9e a5       	ldd	r25, Y+46	; 0x2e
     a5a:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	bc 01       	movw	r22, r24
     a64:	cd 01       	movw	r24, r26
     a66:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	9c ab       	std	Y+52, r25	; 0x34
     a70:	8b ab       	std	Y+51, r24	; 0x33
     a72:	0f c0       	rjmp	.+30     	; 0xa92 <__stack+0x233>
     a74:	88 ec       	ldi	r24, 0xC8	; 200
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	9e ab       	std	Y+54, r25	; 0x36
     a7a:	8d ab       	std	Y+53, r24	; 0x35
     a7c:	8d a9       	ldd	r24, Y+53	; 0x35
     a7e:	9e a9       	ldd	r25, Y+54	; 0x36
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <__stack+0x221>
     a84:	9e ab       	std	Y+54, r25	; 0x36
     a86:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a88:	8b a9       	ldd	r24, Y+51	; 0x33
     a8a:	9c a9       	ldd	r25, Y+52	; 0x34
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	9c ab       	std	Y+52, r25	; 0x34
     a90:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a92:	8b a9       	ldd	r24, Y+51	; 0x33
     a94:	9c a9       	ldd	r25, Y+52	; 0x34
     a96:	89 2b       	or	r24, r25
     a98:	69 f7       	brne	.-38     	; 0xa74 <__stack+0x215>
     a9a:	14 c0       	rjmp	.+40     	; 0xac4 <__stack+0x265>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a9c:	6f a5       	ldd	r22, Y+47	; 0x2f
     a9e:	78 a9       	ldd	r23, Y+48	; 0x30
     aa0:	89 a9       	ldd	r24, Y+49	; 0x31
     aa2:	9a a9       	ldd	r25, Y+50	; 0x32
     aa4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9c ab       	std	Y+52, r25	; 0x34
     aae:	8b ab       	std	Y+51, r24	; 0x33
     ab0:	8b a9       	ldd	r24, Y+51	; 0x33
     ab2:	9c a9       	ldd	r25, Y+52	; 0x34
     ab4:	98 af       	std	Y+56, r25	; 0x38
     ab6:	8f ab       	std	Y+55, r24	; 0x37
     ab8:	8f a9       	ldd	r24, Y+55	; 0x37
     aba:	98 ad       	ldd	r25, Y+56	; 0x38
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <__stack+0x25d>
     ac0:	98 af       	std	Y+56, r25	; 0x38
     ac2:	8f ab       	std	Y+55, r24	; 0x37
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
     ac4:	88 e2       	ldi	r24, 0x28	; 40
     ac6:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e8       	ldi	r26, 0x80	; 128
     ad0:	bf e3       	ldi	r27, 0x3F	; 63
     ad2:	8d 8f       	std	Y+29, r24	; 0x1d
     ad4:	9e 8f       	std	Y+30, r25	; 0x1e
     ad6:	af 8f       	std	Y+31, r26	; 0x1f
     ad8:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	4a ef       	ldi	r20, 0xFA	; 250
     ae0:	54 e4       	ldi	r21, 0x44	; 68
     ae2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ae4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ae6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ae8:	98 a1       	ldd	r25, Y+32	; 0x20
     aea:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	89 a3       	std	Y+33, r24	; 0x21
     af4:	9a a3       	std	Y+34, r25	; 0x22
     af6:	ab a3       	std	Y+35, r26	; 0x23
     af8:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	5f e3       	ldi	r21, 0x3F	; 63
     b02:	69 a1       	ldd	r22, Y+33	; 0x21
     b04:	7a a1       	ldd	r23, Y+34	; 0x22
     b06:	8b a1       	ldd	r24, Y+35	; 0x23
     b08:	9c a1       	ldd	r25, Y+36	; 0x24
     b0a:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
     b0e:	88 23       	and	r24, r24
     b10:	2c f4       	brge	.+10     	; 0xb1c <__stack+0x2bd>
		__ticks = 1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	9e a3       	std	Y+38, r25	; 0x26
     b18:	8d a3       	std	Y+37, r24	; 0x25
     b1a:	3f c0       	rjmp	.+126    	; 0xb9a <__stack+0x33b>
	else if (__tmp > 65535)
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	3f ef       	ldi	r19, 0xFF	; 255
     b20:	4f e7       	ldi	r20, 0x7F	; 127
     b22:	57 e4       	ldi	r21, 0x47	; 71
     b24:	69 a1       	ldd	r22, Y+33	; 0x21
     b26:	7a a1       	ldd	r23, Y+34	; 0x22
     b28:	8b a1       	ldd	r24, Y+35	; 0x23
     b2a:	9c a1       	ldd	r25, Y+36	; 0x24
     b2c:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
     b30:	18 16       	cp	r1, r24
     b32:	4c f5       	brge	.+82     	; 0xb86 <__stack+0x327>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e2       	ldi	r20, 0x20	; 32
     b3a:	51 e4       	ldi	r21, 0x41	; 65
     b3c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b3e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b40:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b42:	98 a1       	ldd	r25, Y+32	; 0x20
     b44:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	bc 01       	movw	r22, r24
     b4e:	cd 01       	movw	r24, r26
     b50:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	9e a3       	std	Y+38, r25	; 0x26
     b5a:	8d a3       	std	Y+37, r24	; 0x25
     b5c:	0f c0       	rjmp	.+30     	; 0xb7c <__stack+0x31d>
     b5e:	88 ec       	ldi	r24, 0xC8	; 200
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	98 a7       	std	Y+40, r25	; 0x28
     b64:	8f a3       	std	Y+39, r24	; 0x27
     b66:	8f a1       	ldd	r24, Y+39	; 0x27
     b68:	98 a5       	ldd	r25, Y+40	; 0x28
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <__stack+0x30b>
     b6e:	98 a7       	std	Y+40, r25	; 0x28
     b70:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b72:	8d a1       	ldd	r24, Y+37	; 0x25
     b74:	9e a1       	ldd	r25, Y+38	; 0x26
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	9e a3       	std	Y+38, r25	; 0x26
     b7a:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b7c:	8d a1       	ldd	r24, Y+37	; 0x25
     b7e:	9e a1       	ldd	r25, Y+38	; 0x26
     b80:	89 2b       	or	r24, r25
     b82:	69 f7       	brne	.-38     	; 0xb5e <__stack+0x2ff>
     b84:	14 c0       	rjmp	.+40     	; 0xbae <__stack+0x34f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b86:	69 a1       	ldd	r22, Y+33	; 0x21
     b88:	7a a1       	ldd	r23, Y+34	; 0x22
     b8a:	8b a1       	ldd	r24, Y+35	; 0x23
     b8c:	9c a1       	ldd	r25, Y+36	; 0x24
     b8e:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	9e a3       	std	Y+38, r25	; 0x26
     b98:	8d a3       	std	Y+37, r24	; 0x25
     b9a:	8d a1       	ldd	r24, Y+37	; 0x25
     b9c:	9e a1       	ldd	r25, Y+38	; 0x26
     b9e:	9a a7       	std	Y+42, r25	; 0x2a
     ba0:	89 a7       	std	Y+41, r24	; 0x29
     ba2:	89 a5       	ldd	r24, Y+41	; 0x29
     ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <__stack+0x347>
     baa:	9a a7       	std	Y+42, r25	; 0x2a
     bac:	89 a7       	std	Y+41, r24	; 0x29
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
     bae:	8c e0       	ldi	r24, 0x0C	; 12
     bb0:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e8       	ldi	r26, 0x80	; 128
     bba:	bf e3       	ldi	r27, 0x3F	; 63
     bbc:	8f 87       	std	Y+15, r24	; 0x0f
     bbe:	98 8b       	std	Y+16, r25	; 0x10
     bc0:	a9 8b       	std	Y+17, r26	; 0x11
     bc2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4a ef       	ldi	r20, 0xFA	; 250
     bca:	54 e4       	ldi	r21, 0x44	; 68
     bcc:	6f 85       	ldd	r22, Y+15	; 0x0f
     bce:	78 89       	ldd	r23, Y+16	; 0x10
     bd0:	89 89       	ldd	r24, Y+17	; 0x11
     bd2:	9a 89       	ldd	r25, Y+18	; 0x12
     bd4:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8b 8b       	std	Y+19, r24	; 0x13
     bde:	9c 8b       	std	Y+20, r25	; 0x14
     be0:	ad 8b       	std	Y+21, r26	; 0x15
     be2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e8       	ldi	r20, 0x80	; 128
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	6b 89       	ldd	r22, Y+19	; 0x13
     bee:	7c 89       	ldd	r23, Y+20	; 0x14
     bf0:	8d 89       	ldd	r24, Y+21	; 0x15
     bf2:	9e 89       	ldd	r25, Y+22	; 0x16
     bf4:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <__stack+0x3a7>
		__ticks = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	98 8f       	std	Y+24, r25	; 0x18
     c02:	8f 8b       	std	Y+23, r24	; 0x17
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <__stack+0x425>
	else if (__tmp > 65535)
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	3f ef       	ldi	r19, 0xFF	; 255
     c0a:	4f e7       	ldi	r20, 0x7F	; 127
     c0c:	57 e4       	ldi	r21, 0x47	; 71
     c0e:	6b 89       	ldd	r22, Y+19	; 0x13
     c10:	7c 89       	ldd	r23, Y+20	; 0x14
     c12:	8d 89       	ldd	r24, Y+21	; 0x15
     c14:	9e 89       	ldd	r25, Y+22	; 0x16
     c16:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <__stack+0x411>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	6f 85       	ldd	r22, Y+15	; 0x0f
     c28:	78 89       	ldd	r23, Y+16	; 0x10
     c2a:	89 89       	ldd	r24, Y+17	; 0x11
     c2c:	9a 89       	ldd	r25, Y+18	; 0x12
     c2e:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	98 8f       	std	Y+24, r25	; 0x18
     c44:	8f 8b       	std	Y+23, r24	; 0x17
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <__stack+0x407>
     c48:	88 ec       	ldi	r24, 0xC8	; 200
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9a 8f       	std	Y+26, r25	; 0x1a
     c4e:	89 8f       	std	Y+25, r24	; 0x19
     c50:	89 8d       	ldd	r24, Y+25	; 0x19
     c52:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <__stack+0x3f5>
     c58:	9a 8f       	std	Y+26, r25	; 0x1a
     c5a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	8f 89       	ldd	r24, Y+23	; 0x17
     c5e:	98 8d       	ldd	r25, Y+24	; 0x18
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	98 8f       	std	Y+24, r25	; 0x18
     c64:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	8f 89       	ldd	r24, Y+23	; 0x17
     c68:	98 8d       	ldd	r25, Y+24	; 0x18
     c6a:	89 2b       	or	r24, r25
     c6c:	69 f7       	brne	.-38     	; 0xc48 <__stack+0x3e9>
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <__stack+0x439>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	6b 89       	ldd	r22, Y+19	; 0x13
     c72:	7c 89       	ldd	r23, Y+20	; 0x14
     c74:	8d 89       	ldd	r24, Y+21	; 0x15
     c76:	9e 89       	ldd	r25, Y+22	; 0x16
     c78:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	98 8f       	std	Y+24, r25	; 0x18
     c82:	8f 8b       	std	Y+23, r24	; 0x17
     c84:	8f 89       	ldd	r24, Y+23	; 0x17
     c86:	98 8d       	ldd	r25, Y+24	; 0x18
     c88:	9c 8f       	std	Y+28, r25	; 0x1c
     c8a:	8b 8f       	std	Y+27, r24	; 0x1b
     c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <__stack+0x431>
     c94:	9c 8f       	std	Y+28, r25	; 0x1c
     c96:	8b 8f       	std	Y+27, r24	; 0x1b
  _delay_ms(1);

  CLCD_vClearScreen();
     c98:	0e 94 1a 08 	call	0x1034	; 0x1034 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
     c9c:	86 e0       	ldi	r24, 0x06	; 6
     c9e:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a0 e8       	ldi	r26, 0x80	; 128
     ca8:	bf e3       	ldi	r27, 0x3F	; 63
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	ab 83       	std	Y+3, r26	; 0x03
     cb0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a ef       	ldi	r20, 0xFA	; 250
     cb8:	54 e4       	ldi	r21, 0x44	; 68
     cba:	69 81       	ldd	r22, Y+1	; 0x01
     cbc:	7a 81       	ldd	r23, Y+2	; 0x02
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	8d 83       	std	Y+5, r24	; 0x05
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	af 83       	std	Y+7, r26	; 0x07
     cd0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	6d 81       	ldd	r22, Y+5	; 0x05
     cdc:	7e 81       	ldd	r23, Y+6	; 0x06
     cde:	8f 81       	ldd	r24, Y+7	; 0x07
     ce0:	98 85       	ldd	r25, Y+8	; 0x08
     ce2:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <__stack+0x495>
		__ticks = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9a 87       	std	Y+10, r25	; 0x0a
     cf0:	89 87       	std	Y+9, r24	; 0x09
     cf2:	3f c0       	rjmp	.+126    	; 0xd72 <__stack+0x513>
	else if (__tmp > 65535)
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	4f e7       	ldi	r20, 0x7F	; 127
     cfa:	57 e4       	ldi	r21, 0x47	; 71
     cfc:	6d 81       	ldd	r22, Y+5	; 0x05
     cfe:	7e 81       	ldd	r23, Y+6	; 0x06
     d00:	8f 81       	ldd	r24, Y+7	; 0x07
     d02:	98 85       	ldd	r25, Y+8	; 0x08
     d04:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
     d08:	18 16       	cp	r1, r24
     d0a:	4c f5       	brge	.+82     	; 0xd5e <__stack+0x4ff>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e2       	ldi	r20, 0x20	; 32
     d12:	51 e4       	ldi	r21, 0x41	; 65
     d14:	69 81       	ldd	r22, Y+1	; 0x01
     d16:	7a 81       	ldd	r23, Y+2	; 0x02
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	9a 87       	std	Y+10, r25	; 0x0a
     d32:	89 87       	std	Y+9, r24	; 0x09
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <__stack+0x4f5>
     d36:	88 ec       	ldi	r24, 0xC8	; 200
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9c 87       	std	Y+12, r25	; 0x0c
     d3c:	8b 87       	std	Y+11, r24	; 0x0b
     d3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d40:	9c 85       	ldd	r25, Y+12	; 0x0c
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <__stack+0x4e3>
     d46:	9c 87       	std	Y+12, r25	; 0x0c
     d48:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4a:	89 85       	ldd	r24, Y+9	; 0x09
     d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	9a 87       	std	Y+10, r25	; 0x0a
     d52:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	89 85       	ldd	r24, Y+9	; 0x09
     d56:	9a 85       	ldd	r25, Y+10	; 0x0a
     d58:	89 2b       	or	r24, r25
     d5a:	69 f7       	brne	.-38     	; 0xd36 <__stack+0x4d7>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <__stack+0x527>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5e:	6d 81       	ldd	r22, Y+5	; 0x05
     d60:	7e 81       	ldd	r23, Y+6	; 0x06
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	98 85       	ldd	r25, Y+8	; 0x08
     d66:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	9a 87       	std	Y+10, r25	; 0x0a
     d70:	89 87       	std	Y+9, r24	; 0x09
     d72:	89 85       	ldd	r24, Y+9	; 0x09
     d74:	9a 85       	ldd	r25, Y+10	; 0x0a
     d76:	9e 87       	std	Y+14, r25	; 0x0e
     d78:	8d 87       	std	Y+13, r24	; 0x0d
     d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <__stack+0x51f>
     d82:	9e 87       	std	Y+14, r25	; 0x0e
     d84:	8d 87       	std	Y+13, r24	; 0x0d
     d86:	00 00       	nop
     d88:	ca 5b       	subi	r28, 0xBA	; 186
     d8a:	df 4f       	sbci	r29, 0xFF	; 255
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	1f 92       	push	r1
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	67 e0       	ldi	r22, 0x07	; 7
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	66 e0       	ldi	r22, 0x06	; 6
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to low nibbles
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	82 95       	swap	r24
     dc4:	8f 70       	andi	r24, 0x0F	; 15
     dc6:	68 2f       	mov	r22, r24
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
     dce:	0e 94 18 07 	call	0xe30	; 0xe30 <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to low nibbles
     dd2:	69 81       	ldd	r22, Y+1	; 0x01
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
     dda:	0e 94 18 07 	call	0xe30	; 0xe30 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
     dde:	00 00       	nop
     de0:	0f 90       	pop	r0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	1f 92       	push	r1
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	67 e0       	ldi	r22, 0x07	; 7
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	66 e0       	ldi	r22, 0x06	; 6
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to low nibbles
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	82 95       	swap	r24
     e0c:	8f 70       	andi	r24, 0x0F	; 15
     e0e:	68 2f       	mov	r22, r24
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
     e16:	0e 94 18 07 	call	0xe30	; 0xe30 <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to low nibbles
     e1a:	69 81       	ldd	r22, Y+1	; 0x01
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
     e22:	0e 94 18 07 	call	0xe30	; 0xe30 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
     e26:	00 00       	nop
     e28:	0f 90       	pop	r0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	6c 97       	sbiw	r28, 0x1c	; 28
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	65 e0       	ldi	r22, 0x05	; 5
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <DIO_enumWritePinVal>
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a0 e8       	ldi	r26, 0x80	; 128
     e54:	bf e3       	ldi	r27, 0x3F	; 63
     e56:	8f 87       	std	Y+15, r24	; 0x0f
     e58:	98 8b       	std	Y+16, r25	; 0x10
     e5a:	a9 8b       	std	Y+17, r26	; 0x11
     e5c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	4a ef       	ldi	r20, 0xFA	; 250
     e64:	54 e4       	ldi	r21, 0x44	; 68
     e66:	6f 85       	ldd	r22, Y+15	; 0x0f
     e68:	78 89       	ldd	r23, Y+16	; 0x10
     e6a:	89 89       	ldd	r24, Y+17	; 0x11
     e6c:	9a 89       	ldd	r25, Y+18	; 0x12
     e6e:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	8b 8b       	std	Y+19, r24	; 0x13
     e78:	9c 8b       	std	Y+20, r25	; 0x14
     e7a:	ad 8b       	std	Y+21, r26	; 0x15
     e7c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	6b 89       	ldd	r22, Y+19	; 0x13
     e88:	7c 89       	ldd	r23, Y+20	; 0x14
     e8a:	8d 89       	ldd	r24, Y+21	; 0x15
     e8c:	9e 89       	ldd	r25, Y+22	; 0x16
     e8e:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
     e92:	88 23       	and	r24, r24
     e94:	2c f4       	brge	.+10     	; 0xea0 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	98 8f       	std	Y+24, r25	; 0x18
     e9c:	8f 8b       	std	Y+23, r24	; 0x17
     e9e:	3f c0       	rjmp	.+126    	; 0xf1e <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
     ea6:	57 e4       	ldi	r21, 0x47	; 71
     ea8:	6b 89       	ldd	r22, Y+19	; 0x13
     eaa:	7c 89       	ldd	r23, Y+20	; 0x14
     eac:	8d 89       	ldd	r24, Y+21	; 0x15
     eae:	9e 89       	ldd	r25, Y+22	; 0x16
     eb0:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
     eb4:	18 16       	cp	r1, r24
     eb6:	4c f5       	brge	.+82     	; 0xf0a <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e2       	ldi	r20, 0x20	; 32
     ebe:	51 e4       	ldi	r21, 0x41	; 65
     ec0:	6f 85       	ldd	r22, Y+15	; 0x0f
     ec2:	78 89       	ldd	r23, Y+16	; 0x10
     ec4:	89 89       	ldd	r24, Y+17	; 0x11
     ec6:	9a 89       	ldd	r25, Y+18	; 0x12
     ec8:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	98 8f       	std	Y+24, r25	; 0x18
     ede:	8f 8b       	std	Y+23, r24	; 0x17
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <CLCD_vSendFallingEdge+0xd0>
     ee2:	88 ec       	ldi	r24, 0xC8	; 200
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9a 8f       	std	Y+26, r25	; 0x1a
     ee8:	89 8f       	std	Y+25, r24	; 0x19
     eea:	89 8d       	ldd	r24, Y+25	; 0x19
     eec:	9a 8d       	ldd	r25, Y+26	; 0x1a
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <CLCD_vSendFallingEdge+0xbe>
     ef2:	9a 8f       	std	Y+26, r25	; 0x1a
     ef4:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	8f 89       	ldd	r24, Y+23	; 0x17
     ef8:	98 8d       	ldd	r25, Y+24	; 0x18
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	98 8f       	std	Y+24, r25	; 0x18
     efe:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f00:	8f 89       	ldd	r24, Y+23	; 0x17
     f02:	98 8d       	ldd	r25, Y+24	; 0x18
     f04:	89 2b       	or	r24, r25
     f06:	69 f7       	brne	.-38     	; 0xee2 <CLCD_vSendFallingEdge+0xb2>
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0a:	6b 89       	ldd	r22, Y+19	; 0x13
     f0c:	7c 89       	ldd	r23, Y+20	; 0x14
     f0e:	8d 89       	ldd	r24, Y+21	; 0x15
     f10:	9e 89       	ldd	r25, Y+22	; 0x16
     f12:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	98 8f       	std	Y+24, r25	; 0x18
     f1c:	8f 8b       	std	Y+23, r24	; 0x17
     f1e:	8f 89       	ldd	r24, Y+23	; 0x17
     f20:	98 8d       	ldd	r25, Y+24	; 0x18
     f22:	9c 8f       	std	Y+28, r25	; 0x1c
     f24:	8b 8f       	std	Y+27, r24	; 0x1b
     f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <CLCD_vSendFallingEdge+0xfa>
     f2e:	9c 8f       	std	Y+28, r25	; 0x1c
     f30:	8b 8f       	std	Y+27, r24	; 0x1b
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	65 e0       	ldi	r22, 0x05	; 5
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <DIO_enumWritePinVal>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e8       	ldi	r26, 0x80	; 128
     f42:	bf e3       	ldi	r27, 0x3F	; 63
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	ab 83       	std	Y+3, r26	; 0x03
     f4a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	4a ef       	ldi	r20, 0xFA	; 250
     f52:	54 e4       	ldi	r21, 0x44	; 68
     f54:	69 81       	ldd	r22, Y+1	; 0x01
     f56:	7a 81       	ldd	r23, Y+2	; 0x02
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	af 83       	std	Y+7, r26	; 0x07
     f6a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e8       	ldi	r20, 0x80	; 128
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	6d 81       	ldd	r22, Y+5	; 0x05
     f76:	7e 81       	ldd	r23, Y+6	; 0x06
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	98 85       	ldd	r25, Y+8	; 0x08
     f7c:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
     f80:	88 23       	and	r24, r24
     f82:	2c f4       	brge	.+10     	; 0xf8e <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9a 87       	std	Y+10, r25	; 0x0a
     f8a:	89 87       	std	Y+9, r24	; 0x09
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	3f ef       	ldi	r19, 0xFF	; 255
     f92:	4f e7       	ldi	r20, 0x7F	; 127
     f94:	57 e4       	ldi	r21, 0x47	; 71
     f96:	6d 81       	ldd	r22, Y+5	; 0x05
     f98:	7e 81       	ldd	r23, Y+6	; 0x06
     f9a:	8f 81       	ldd	r24, Y+7	; 0x07
     f9c:	98 85       	ldd	r25, Y+8	; 0x08
     f9e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	4c f5       	brge	.+82     	; 0xff8 <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e2       	ldi	r20, 0x20	; 32
     fac:	51 e4       	ldi	r21, 0x41	; 65
     fae:	69 81       	ldd	r22, Y+1	; 0x01
     fb0:	7a 81       	ldd	r23, Y+2	; 0x02
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9a 87       	std	Y+10, r25	; 0x0a
     fcc:	89 87       	std	Y+9, r24	; 0x09
     fce:	0f c0       	rjmp	.+30     	; 0xfee <CLCD_vSendFallingEdge+0x1be>
     fd0:	88 ec       	ldi	r24, 0xC8	; 200
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 87       	std	Y+12, r25	; 0x0c
     fd6:	8b 87       	std	Y+11, r24	; 0x0b
     fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fda:	9c 85       	ldd	r25, Y+12	; 0x0c
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <CLCD_vSendFallingEdge+0x1ac>
     fe0:	9c 87       	std	Y+12, r25	; 0x0c
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	9a 87       	std	Y+10, r25	; 0x0a
     fec:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff2:	89 2b       	or	r24, r25
     ff4:	69 f7       	brne	.-38     	; 0xfd0 <CLCD_vSendFallingEdge+0x1a0>
  _delay_ms(1);
}
     ff6:	14 c0       	rjmp	.+40     	; 0x1020 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	6d 81       	ldd	r22, Y+5	; 0x05
     ffa:	7e 81       	ldd	r23, Y+6	; 0x06
     ffc:	8f 81       	ldd	r24, Y+7	; 0x07
     ffe:	98 85       	ldd	r25, Y+8	; 0x08
    1000:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9a 87       	std	Y+10, r25	; 0x0a
    100a:	89 87       	std	Y+9, r24	; 0x09
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	9e 87       	std	Y+14, r25	; 0x0e
    1012:	8d 87       	std	Y+13, r24	; 0x0d
    1014:	8d 85       	ldd	r24, Y+13	; 0x0d
    1016:	9e 85       	ldd	r25, Y+14	; 0x0e
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <CLCD_vSendFallingEdge+0x1e8>
    101c:	9e 87       	std	Y+14, r25	; 0x0e
    101e:	8d 87       	std	Y+13, r24	; 0x0d
    1020:	00 00       	nop
    1022:	6c 96       	adiw	r28, 0x1c	; 28
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	2e 97       	sbiw	r28, 0x0e	; 14
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e2       	ldi	r26, 0x20	; 32
    1054:	b1 e4       	ldi	r27, 0x41	; 65
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	ab 83       	std	Y+3, r26	; 0x03
    105c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	4a ef       	ldi	r20, 0xFA	; 250
    1064:	54 e4       	ldi	r21, 0x44	; 68
    1066:	69 81       	ldd	r22, Y+1	; 0x01
    1068:	7a 81       	ldd	r23, Y+2	; 0x02
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8d 83       	std	Y+5, r24	; 0x05
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	af 83       	std	Y+7, r26	; 0x07
    107c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e8       	ldi	r20, 0x80	; 128
    1084:	5f e3       	ldi	r21, 0x3F	; 63
    1086:	6d 81       	ldd	r22, Y+5	; 0x05
    1088:	7e 81       	ldd	r23, Y+6	; 0x06
    108a:	8f 81       	ldd	r24, Y+7	; 0x07
    108c:	98 85       	ldd	r25, Y+8	; 0x08
    108e:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9a 87       	std	Y+10, r25	; 0x0a
    109c:	89 87       	std	Y+9, r24	; 0x09
    109e:	3f c0       	rjmp	.+126    	; 0x111e <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	3f ef       	ldi	r19, 0xFF	; 255
    10a4:	4f e7       	ldi	r20, 0x7F	; 127
    10a6:	57 e4       	ldi	r21, 0x47	; 71
    10a8:	6d 81       	ldd	r22, Y+5	; 0x05
    10aa:	7e 81       	ldd	r23, Y+6	; 0x06
    10ac:	8f 81       	ldd	r24, Y+7	; 0x07
    10ae:	98 85       	ldd	r25, Y+8	; 0x08
    10b0:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e2       	ldi	r20, 0x20	; 32
    10be:	51 e4       	ldi	r21, 0x41	; 65
    10c0:	69 81       	ldd	r22, Y+1	; 0x01
    10c2:	7a 81       	ldd	r23, Y+2	; 0x02
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9a 87       	std	Y+10, r25	; 0x0a
    10de:	89 87       	std	Y+9, r24	; 0x09
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <CLCD_vClearScreen+0xcc>
    10e2:	88 ec       	ldi	r24, 0xC8	; 200
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9c 87       	std	Y+12, r25	; 0x0c
    10e8:	8b 87       	std	Y+11, r24	; 0x0b
    10ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <CLCD_vClearScreen+0xba>
    10f2:	9c 87       	std	Y+12, r25	; 0x0c
    10f4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9a 87       	std	Y+10, r25	; 0x0a
    10fe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	89 2b       	or	r24, r25
    1106:	69 f7       	brne	.-38     	; 0x10e2 <CLCD_vClearScreen+0xae>
  _delay_ms(10); // wait more than 1.53 ms
}
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6d 81       	ldd	r22, Y+5	; 0x05
    110c:	7e 81       	ldd	r23, Y+6	; 0x06
    110e:	8f 81       	ldd	r24, Y+7	; 0x07
    1110:	98 85       	ldd	r25, Y+8	; 0x08
    1112:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9a 87       	std	Y+10, r25	; 0x0a
    111c:	89 87       	std	Y+9, r24	; 0x09
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	9e 87       	std	Y+14, r25	; 0x0e
    1124:	8d 87       	std	Y+13, r24	; 0x0d
    1126:	8d 85       	ldd	r24, Y+13	; 0x0d
    1128:	9e 85       	ldd	r25, Y+14	; 0x0e
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <CLCD_vClearScreen+0xf6>
    112e:	9e 87       	std	Y+14, r25	; 0x0e
    1130:	8d 87       	std	Y+13, r24	; 0x0d
    1132:	00 00       	nop
    1134:	2e 96       	adiw	r28, 0x0e	; 14
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	00 d0       	rcall	.+0      	; 0x114c <CLCD_vSendString+0x6>
    114c:	1f 92       	push	r1
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9b 83       	std	Y+3, r25	; 0x03
    1154:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    1156:	19 82       	std	Y+1, r1	; 0x01
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    1158:	0e c0       	rjmp	.+28     	; 0x1176 <CLCD_vSendString+0x30>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	2a 81       	ldd	r18, Y+2	; 0x02
    1162:	3b 81       	ldd	r19, Y+3	; 0x03
    1164:	82 0f       	add	r24, r18
    1166:	93 1f       	adc	r25, r19
    1168:	fc 01       	movw	r30, r24
    116a:	80 81       	ld	r24, Z
    116c:	0e 94 d0 06 	call	0xda0	; 0xda0 <CLCD_vSendData>
    LOC_u8Iterator++;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	2a 81       	ldd	r18, Y+2	; 0x02
    117e:	3b 81       	ldd	r19, Y+3	; 0x03
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	fc 01       	movw	r30, r24
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	39 f7       	brne	.-50     	; 0x115a <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    118c:	00 00       	nop
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	28 97       	sbiw	r28, 0x08	; 8
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	6d 83       	std	Y+5, r22	; 0x05
    11b8:	7e 83       	std	Y+6, r23	; 0x06
    11ba:	8f 83       	std	Y+7, r24	; 0x07
    11bc:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	ab 83       	std	Y+3, r26	; 0x03
    11cc:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	af 81       	ldd	r26, Y+7	; 0x07
    11d4:	b8 85       	ldd	r27, Y+8	; 0x08
    11d6:	89 2b       	or	r24, r25
    11d8:	8a 2b       	or	r24, r26
    11da:	8b 2b       	or	r24, r27
    11dc:	21 f4       	brne	.+8      	; 0x11e6 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    11de:	80 e3       	ldi	r24, 0x30	; 48
    11e0:	0e 94 d0 06 	call	0xda0	; 0xda0 <CLCD_vSendData>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    11e4:	8f c0       	rjmp	.+286    	; 0x1304 <CLCD_vSendIntNumber+0x16a>
  {
    CLCD_vSendData('0');
  }
  else
  {
    if (Copy_s32Number < 0)
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ea:	af 81       	ldd	r26, Y+7	; 0x07
    11ec:	b8 85       	ldd	r27, Y+8	; 0x08
    11ee:	bb 23       	and	r27, r27
    11f0:	0c f0       	brlt	.+2      	; 0x11f4 <CLCD_vSendIntNumber+0x5a>
    11f2:	53 c0       	rjmp	.+166    	; 0x129a <CLCD_vSendIntNumber+0x100>
    {
      CLCD_vSendData('-');
    11f4:	8d e2       	ldi	r24, 0x2D	; 45
    11f6:	0e 94 d0 06 	call	0xda0	; 0xda0 <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	af 81       	ldd	r26, Y+7	; 0x07
    1200:	b8 85       	ldd	r27, Y+8	; 0x08
    1202:	b0 95       	com	r27
    1204:	a0 95       	com	r26
    1206:	90 95       	com	r25
    1208:	81 95       	neg	r24
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	af 4f       	sbci	r26, 0xFF	; 255
    120e:	bf 4f       	sbci	r27, 0xFF	; 255
    1210:	8d 83       	std	Y+5, r24	; 0x05
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	af 83       	std	Y+7, r26	; 0x07
    1216:	b8 87       	std	Y+8, r27	; 0x08
    }
    while (Copy_s32Number != 0)
    1218:	40 c0       	rjmp	.+128    	; 0x129a <CLCD_vSendIntNumber+0x100>
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    121a:	29 81       	ldd	r18, Y+1	; 0x01
    121c:	3a 81       	ldd	r19, Y+2	; 0x02
    121e:	4b 81       	ldd	r20, Y+3	; 0x03
    1220:	5c 81       	ldd	r21, Y+4	; 0x04
    1222:	da 01       	movw	r26, r20
    1224:	c9 01       	movw	r24, r18
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	aa 1f       	adc	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	aa 1f       	adc	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	82 0f       	add	r24, r18
    1238:	93 1f       	adc	r25, r19
    123a:	a4 1f       	adc	r26, r20
    123c:	b5 1f       	adc	r27, r21
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	aa 1f       	adc	r26, r26
    1244:	bb 1f       	adc	r27, r27
    1246:	7c 01       	movw	r14, r24
    1248:	8d 01       	movw	r16, r26
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	af 81       	ldd	r26, Y+7	; 0x07
    1250:	b8 85       	ldd	r27, Y+8	; 0x08
    1252:	2a e0       	ldi	r18, 0x0A	; 10
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__divmodsi4>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	8e 0d       	add	r24, r14
    1268:	9f 1d       	adc	r25, r15
    126a:	a0 1f       	adc	r26, r16
    126c:	b1 1f       	adc	r27, r17
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	ab 83       	std	Y+3, r26	; 0x03
    1274:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	af 81       	ldd	r26, Y+7	; 0x07
    127c:	b8 85       	ldd	r27, Y+8	; 0x08
    127e:	2a e0       	ldi	r18, 0x0A	; 10
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__divmodsi4>
    128e:	da 01       	movw	r26, r20
    1290:	c9 01       	movw	r24, r18
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	9e 83       	std	Y+6, r25	; 0x06
    1296:	af 83       	std	Y+7, r26	; 0x07
    1298:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	af 81       	ldd	r26, Y+7	; 0x07
    12a0:	b8 85       	ldd	r27, Y+8	; 0x08
    12a2:	89 2b       	or	r24, r25
    12a4:	8a 2b       	or	r24, r26
    12a6:	8b 2b       	or	r24, r27
    12a8:	09 f0       	breq	.+2      	; 0x12ac <CLCD_vSendIntNumber+0x112>
    12aa:	b7 cf       	rjmp	.-146    	; 0x121a <CLCD_vSendIntNumber+0x80>
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    12ac:	23 c0       	rjmp	.+70     	; 0x12f4 <CLCD_vSendIntNumber+0x15a>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	ab 81       	ldd	r26, Y+3	; 0x03
    12b4:	bc 81       	ldd	r27, Y+4	; 0x04
    12b6:	2a e0       	ldi	r18, 0x0A	; 10
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <__udivmodsi4>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	80 5d       	subi	r24, 0xD0	; 208
    12cc:	0e 94 d0 06 	call	0xda0	; 0xda0 <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	ab 81       	ldd	r26, Y+3	; 0x03
    12d6:	bc 81       	ldd	r27, Y+4	; 0x04
    12d8:	2a e0       	ldi	r18, 0x0A	; 10
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <__udivmodsi4>
    12e8:	da 01       	movw	r26, r20
    12ea:	c9 01       	movw	r24, r18
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	ab 83       	std	Y+3, r26	; 0x03
    12f2:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	ab 81       	ldd	r26, Y+3	; 0x03
    12fa:	bc 81       	ldd	r27, Y+4	; 0x04
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	a1 05       	cpc	r26, r1
    1300:	b1 05       	cpc	r27, r1
    1302:	a9 f6       	brne	.-86     	; 0x12ae <CLCD_vSendIntNumber+0x114>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    1304:	00 00       	nop
    1306:	28 96       	adiw	r28, 0x08	; 8
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	08 95       	ret

00001320 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    1320:	af 92       	push	r10
    1322:	bf 92       	push	r11
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	00 d0       	rcall	.+0      	; 0x1336 <CLCD_vSendFloatNumber+0x16>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <CLCD_vSendFloatNumber+0x18>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	69 83       	std	Y+1, r22	; 0x01
    133e:	7a 83       	std	Y+2, r23	; 0x02
    1340:	8b 83       	std	Y+3, r24	; 0x03
    1342:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    1344:	69 81       	ldd	r22, Y+1	; 0x01
    1346:	7a 81       	ldd	r23, Y+2	; 0x02
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__fixsfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	0e 94 cd 08 	call	0x119a	; 0x119a <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	a9 01       	movw	r20, r18
    1362:	69 81       	ldd	r22, Y+1	; 0x01
    1364:	7a 81       	ldd	r23, Y+2	; 0x02
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
    136e:	88 23       	and	r24, r24
    1370:	4c f4       	brge	.+18     	; 0x1384 <CLCD_vSendFloatNumber+0x64>
  {
    Copy_f64Number *= -1;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	ab 81       	ldd	r26, Y+3	; 0x03
    1378:	bc 81       	ldd	r27, Y+4	; 0x04
    137a:	b0 58       	subi	r27, 0x80	; 128
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	ab 83       	std	Y+3, r26	; 0x03
    1382:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    1384:	69 81       	ldd	r22, Y+1	; 0x01
    1386:	7a 81       	ldd	r23, Y+2	; 0x02
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__fixsfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__floatsisf>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9c 01       	movw	r18, r24
    13a2:	ad 01       	movw	r20, r26
    13a4:	69 81       	ldd	r22, Y+1	; 0x01
    13a6:	7a 81       	ldd	r23, Y+2	; 0x02
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	0e 94 24 1b 	call	0x3648	; 0x3648 <__subsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	ab 83       	std	Y+3, r26	; 0x03
    13ba:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e4       	ldi	r19, 0x40	; 64
    13c0:	4c e1       	ldi	r20, 0x1C	; 28
    13c2:	56 e4       	ldi	r21, 0x46	; 70
    13c4:	69 81       	ldd	r22, Y+1	; 0x01
    13c6:	7a 81       	ldd	r23, Y+2	; 0x02
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	ab 83       	std	Y+3, r26	; 0x03
    13da:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    13dc:	69 81       	ldd	r22, Y+1	; 0x01
    13de:	7a 81       	ldd	r23, Y+2	; 0x02
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	0e 94 96 1b 	call	0x372c	; 0x372c <__fixsfdi>
    13e8:	a2 2e       	mov	r10, r18
    13ea:	b3 2e       	mov	r11, r19
    13ec:	c4 2e       	mov	r12, r20
    13ee:	d5 2e       	mov	r13, r21
    13f0:	e6 2e       	mov	r14, r22
    13f2:	f7 2e       	mov	r15, r23
    13f4:	08 2f       	mov	r16, r24
    13f6:	19 2f       	mov	r17, r25
    13f8:	2a 2d       	mov	r18, r10
    13fa:	3b 2d       	mov	r19, r11
    13fc:	4c 2d       	mov	r20, r12
    13fe:	5d 2d       	mov	r21, r13
    1400:	6e 2d       	mov	r22, r14
    1402:	7f 2d       	mov	r23, r15
    1404:	80 2f       	mov	r24, r16
    1406:	91 2f       	mov	r25, r17
    1408:	a0 e0       	ldi	r26, 0x00	; 0
    140a:	0e 94 18 1b 	call	0x3630	; 0x3630 <__cmpdi2_s8>
    140e:	79 f0       	breq	.+30     	; 0x142e <CLCD_vSendFloatNumber+0x10e>
  {
    CLCD_vSendData('.');
    1410:	8e e2       	ldi	r24, 0x2E	; 46
    1412:	0e 94 d0 06 	call	0xda0	; 0xda0 <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    1416:	69 81       	ldd	r22, Y+1	; 0x01
    1418:	7a 81       	ldd	r23, Y+2	; 0x02
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__fixsfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	0e 94 cd 08 	call	0x119a	; 0x119a <CLCD_vSendIntNumber>
  }
}
    142e:	00 00       	nop
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	08 95       	ret

0000144e <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	61 97       	sbiw	r28, 0x11	; 17
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	88 8b       	std	Y+16, r24	; 0x10
    1464:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    1466:	88 89       	ldd	r24, Y+16	; 0x10
    1468:	88 23       	and	r24, r24
    146a:	49 f0       	breq	.+18     	; 0x147e <CLCD_vSetPosition+0x30>
    146c:	88 89       	ldd	r24, Y+16	; 0x10
    146e:	85 30       	cpi	r24, 0x05	; 5
    1470:	30 f4       	brcc	.+12     	; 0x147e <CLCD_vSetPosition+0x30>
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	88 23       	and	r24, r24
    1476:	19 f0       	breq	.+6      	; 0x147e <CLCD_vSetPosition+0x30>
    1478:	89 89       	ldd	r24, Y+17	; 0x11
    147a:	85 31       	cpi	r24, 0x15	; 21
    147c:	18 f0       	brcs	.+6      	; 0x1484 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    147e:	80 e8       	ldi	r24, 0x80	; 128
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	1b c0       	rjmp	.+54     	; 0x14ba <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    1484:	88 89       	ldd	r24, Y+16	; 0x10
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	21 f4       	brne	.+8      	; 0x1492 <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    148a:	89 89       	ldd	r24, Y+17	; 0x11
    148c:	81 58       	subi	r24, 0x81	; 129
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    1492:	88 89       	ldd	r24, Y+16	; 0x10
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	21 f4       	brne	.+8      	; 0x14a0 <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    1498:	89 89       	ldd	r24, Y+17	; 0x11
    149a:	81 54       	subi	r24, 0x41	; 65
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	0d c0       	rjmp	.+26     	; 0x14ba <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    14a0:	88 89       	ldd	r24, Y+16	; 0x10
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	21 f4       	brne	.+8      	; 0x14ae <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    14a6:	89 89       	ldd	r24, Y+17	; 0x11
    14a8:	8d 56       	subi	r24, 0x6D	; 109
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    14ae:	88 89       	ldd	r24, Y+16	; 0x10
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	19 f4       	brne	.+6      	; 0x14ba <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    14b4:	89 89       	ldd	r24, Y+17	; 0x11
    14b6:	8d 52       	subi	r24, 0x2D	; 45
    14b8:	89 83       	std	Y+1, r24	; 0x01
  }

  CLCD_vSendCommand(LOC_u8Data);
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a0 e8       	ldi	r26, 0x80	; 128
    14c6:	bf e3       	ldi	r27, 0x3F	; 63
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	9b 83       	std	Y+3, r25	; 0x03
    14cc:	ac 83       	std	Y+4, r26	; 0x04
    14ce:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a ef       	ldi	r20, 0xFA	; 250
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	6a 81       	ldd	r22, Y+2	; 0x02
    14da:	7b 81       	ldd	r23, Y+3	; 0x03
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8e 83       	std	Y+6, r24	; 0x06
    14ea:	9f 83       	std	Y+7, r25	; 0x07
    14ec:	a8 87       	std	Y+8, r26	; 0x08
    14ee:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	6e 81       	ldd	r22, Y+6	; 0x06
    14fa:	7f 81       	ldd	r23, Y+7	; 0x07
    14fc:	88 85       	ldd	r24, Y+8	; 0x08
    14fe:	99 85       	ldd	r25, Y+9	; 0x09
    1500:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
    1504:	88 23       	and	r24, r24
    1506:	2c f4       	brge	.+10     	; 0x1512 <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9b 87       	std	Y+11, r25	; 0x0b
    150e:	8a 87       	std	Y+10, r24	; 0x0a
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f e7       	ldi	r20, 0x7F	; 127
    1518:	57 e4       	ldi	r21, 0x47	; 71
    151a:	6e 81       	ldd	r22, Y+6	; 0x06
    151c:	7f 81       	ldd	r23, Y+7	; 0x07
    151e:	88 85       	ldd	r24, Y+8	; 0x08
    1520:	99 85       	ldd	r25, Y+9	; 0x09
    1522:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
    1526:	18 16       	cp	r1, r24
    1528:	4c f5       	brge	.+82     	; 0x157c <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	51 e4       	ldi	r21, 0x41	; 65
    1532:	6a 81       	ldd	r22, Y+2	; 0x02
    1534:	7b 81       	ldd	r23, Y+3	; 0x03
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	9d 81       	ldd	r25, Y+5	; 0x05
    153a:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9b 87       	std	Y+11, r25	; 0x0b
    1550:	8a 87       	std	Y+10, r24	; 0x0a
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <CLCD_vSetPosition+0x124>
    1554:	88 ec       	ldi	r24, 0xC8	; 200
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9d 87       	std	Y+13, r25	; 0x0d
    155a:	8c 87       	std	Y+12, r24	; 0x0c
    155c:	8c 85       	ldd	r24, Y+12	; 0x0c
    155e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <CLCD_vSetPosition+0x112>
    1564:	9d 87       	std	Y+13, r25	; 0x0d
    1566:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	8a 85       	ldd	r24, Y+10	; 0x0a
    156a:	9b 85       	ldd	r25, Y+11	; 0x0b
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	9b 87       	std	Y+11, r25	; 0x0b
    1570:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1572:	8a 85       	ldd	r24, Y+10	; 0x0a
    1574:	9b 85       	ldd	r25, Y+11	; 0x0b
    1576:	89 2b       	or	r24, r25
    1578:	69 f7       	brne	.-38     	; 0x1554 <CLCD_vSetPosition+0x106>
  _delay_ms(1);
}
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157c:	6e 81       	ldd	r22, Y+6	; 0x06
    157e:	7f 81       	ldd	r23, Y+7	; 0x07
    1580:	88 85       	ldd	r24, Y+8	; 0x08
    1582:	99 85       	ldd	r25, Y+9	; 0x09
    1584:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9b 87       	std	Y+11, r25	; 0x0b
    158e:	8a 87       	std	Y+10, r24	; 0x0a
    1590:	8a 85       	ldd	r24, Y+10	; 0x0a
    1592:	9b 85       	ldd	r25, Y+11	; 0x0b
    1594:	9f 87       	std	Y+15, r25	; 0x0f
    1596:	8e 87       	std	Y+14, r24	; 0x0e
    1598:	8e 85       	ldd	r24, Y+14	; 0x0e
    159a:	9f 85       	ldd	r25, Y+15	; 0x0f
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <CLCD_vSetPosition+0x14e>
    15a0:	9f 87       	std	Y+15, r25	; 0x0f
    15a2:	8e 87       	std	Y+14, r24	; 0x0e
    15a4:	00 00       	nop
    15a6:	61 96       	adiw	r28, 0x11	; 17
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	00 d0       	rcall	.+0      	; 0x15be <CLCD_vSendExtraChar+0x6>
    15be:	1f 92       	push	r1
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	8a 83       	std	Y+2, r24	; 0x02
    15c6:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    15c8:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    15ca:	80 e4       	ldi	r24, 0x40	; 64
    15cc:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    15d0:	19 82       	std	Y+1, r1	; 0x01
    15d2:	0c c0       	rjmp	.+24     	; 0x15ec <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	80 5a       	subi	r24, 0xA0	; 160
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	fc 01       	movw	r30, r24
    15e0:	80 81       	ld	r24, Z
    15e2:	0e 94 d0 06 	call	0xda0	; 0xda0 <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 30       	cpi	r24, 0x08	; 8
    15f0:	88 f3       	brcs	.-30     	; 0x15d4 <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    15f2:	6b 81       	ldd	r22, Y+3	; 0x03
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	0e 94 27 0a 	call	0x144e	; 0x144e <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    15fa:	19 82       	std	Y+1, r1	; 0x01
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	0e 94 d0 06 	call	0xda0	; 0xda0 <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	88 30       	cpi	r24, 0x08	; 8
    160e:	b8 f3       	brcs	.-18     	; 0x15fe <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    1610:	00 00       	nop
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	2e 97       	sbiw	r28, 0x0e	; 14
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    1632:	8c e1       	ldi	r24, 0x1C	; 28
    1634:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a0 e8       	ldi	r26, 0x80	; 128
    163e:	bf e3       	ldi	r27, 0x3F	; 63
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	ab 83       	std	Y+3, r26	; 0x03
    1646:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a ef       	ldi	r20, 0xFA	; 250
    164e:	54 e4       	ldi	r21, 0x44	; 68
    1650:	69 81       	ldd	r22, Y+1	; 0x01
    1652:	7a 81       	ldd	r23, Y+2	; 0x02
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	af 83       	std	Y+7, r26	; 0x07
    1666:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	6d 81       	ldd	r22, Y+5	; 0x05
    1672:	7e 81       	ldd	r23, Y+6	; 0x06
    1674:	8f 81       	ldd	r24, Y+7	; 0x07
    1676:	98 85       	ldd	r25, Y+8	; 0x08
    1678:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
    167c:	88 23       	and	r24, r24
    167e:	2c f4       	brge	.+10     	; 0x168a <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9a 87       	std	Y+10, r25	; 0x0a
    1686:	89 87       	std	Y+9, r24	; 0x09
    1688:	3f c0       	rjmp	.+126    	; 0x1708 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	6d 81       	ldd	r22, Y+5	; 0x05
    1694:	7e 81       	ldd	r23, Y+6	; 0x06
    1696:	8f 81       	ldd	r24, Y+7	; 0x07
    1698:	98 85       	ldd	r25, Y+8	; 0x08
    169a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
    169e:	18 16       	cp	r1, r24
    16a0:	4c f5       	brge	.+82     	; 0x16f4 <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	69 81       	ldd	r22, Y+1	; 0x01
    16ac:	7a 81       	ldd	r23, Y+2	; 0x02
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9a 87       	std	Y+10, r25	; 0x0a
    16c8:	89 87       	std	Y+9, r24	; 0x09
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <CLCD_voidShiftDisplayRight+0xcc>
    16cc:	88 ec       	ldi	r24, 0xC8	; 200
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9c 87       	std	Y+12, r25	; 0x0c
    16d2:	8b 87       	std	Y+11, r24	; 0x0b
    16d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <CLCD_voidShiftDisplayRight+0xba>
    16dc:	9c 87       	std	Y+12, r25	; 0x0c
    16de:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9a 87       	std	Y+10, r25	; 0x0a
    16e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	89 85       	ldd	r24, Y+9	; 0x09
    16ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ee:	89 2b       	or	r24, r25
    16f0:	69 f7       	brne	.-38     	; 0x16cc <CLCD_voidShiftDisplayRight+0xae>
  _delay_ms(1);
}
    16f2:	14 c0       	rjmp	.+40     	; 0x171c <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	6d 81       	ldd	r22, Y+5	; 0x05
    16f6:	7e 81       	ldd	r23, Y+6	; 0x06
    16f8:	8f 81       	ldd	r24, Y+7	; 0x07
    16fa:	98 85       	ldd	r25, Y+8	; 0x08
    16fc:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9a 87       	std	Y+10, r25	; 0x0a
    1706:	89 87       	std	Y+9, r24	; 0x09
    1708:	89 85       	ldd	r24, Y+9	; 0x09
    170a:	9a 85       	ldd	r25, Y+10	; 0x0a
    170c:	9e 87       	std	Y+14, r25	; 0x0e
    170e:	8d 87       	std	Y+13, r24	; 0x0d
    1710:	8d 85       	ldd	r24, Y+13	; 0x0d
    1712:	9e 85       	ldd	r25, Y+14	; 0x0e
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <CLCD_voidShiftDisplayRight+0xf6>
    1718:	9e 87       	std	Y+14, r25	; 0x0e
    171a:	8d 87       	std	Y+13, r24	; 0x0d
    171c:	00 00       	nop
    171e:	2e 96       	adiw	r28, 0x0e	; 14
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	2e 97       	sbiw	r28, 0x0e	; 14
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    1744:	88 e1       	ldi	r24, 0x18	; 24
    1746:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_vSendCommand>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e8       	ldi	r26, 0x80	; 128
    1750:	bf e3       	ldi	r27, 0x3F	; 63
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	ab 83       	std	Y+3, r26	; 0x03
    1758:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a ef       	ldi	r20, 0xFA	; 250
    1760:	54 e4       	ldi	r21, 0x44	; 68
    1762:	69 81       	ldd	r22, Y+1	; 0x01
    1764:	7a 81       	ldd	r23, Y+2	; 0x02
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	af 83       	std	Y+7, r26	; 0x07
    1778:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	6d 81       	ldd	r22, Y+5	; 0x05
    1784:	7e 81       	ldd	r23, Y+6	; 0x06
    1786:	8f 81       	ldd	r24, Y+7	; 0x07
    1788:	98 85       	ldd	r25, Y+8	; 0x08
    178a:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
    178e:	88 23       	and	r24, r24
    1790:	2c f4       	brge	.+10     	; 0x179c <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9a 87       	std	Y+10, r25	; 0x0a
    1798:	89 87       	std	Y+9, r24	; 0x09
    179a:	3f c0       	rjmp	.+126    	; 0x181a <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	6d 81       	ldd	r22, Y+5	; 0x05
    17a6:	7e 81       	ldd	r23, Y+6	; 0x06
    17a8:	8f 81       	ldd	r24, Y+7	; 0x07
    17aa:	98 85       	ldd	r25, Y+8	; 0x08
    17ac:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	4c f5       	brge	.+82     	; 0x1806 <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e2       	ldi	r20, 0x20	; 32
    17ba:	51 e4       	ldi	r21, 0x41	; 65
    17bc:	69 81       	ldd	r22, Y+1	; 0x01
    17be:	7a 81       	ldd	r23, Y+2	; 0x02
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9a 87       	std	Y+10, r25	; 0x0a
    17da:	89 87       	std	Y+9, r24	; 0x09
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <CLCD_voidShiftDisplayLeft+0xcc>
    17de:	88 ec       	ldi	r24, 0xC8	; 200
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9c 87       	std	Y+12, r25	; 0x0c
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <CLCD_voidShiftDisplayLeft+0xba>
    17ee:	9c 87       	std	Y+12, r25	; 0x0c
    17f0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9a 87       	std	Y+10, r25	; 0x0a
    17fa:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	89 2b       	or	r24, r25
    1802:	69 f7       	brne	.-38     	; 0x17de <CLCD_voidShiftDisplayLeft+0xae>
  _delay_ms(1);
}
    1804:	14 c0       	rjmp	.+40     	; 0x182e <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	6d 81       	ldd	r22, Y+5	; 0x05
    1808:	7e 81       	ldd	r23, Y+6	; 0x06
    180a:	8f 81       	ldd	r24, Y+7	; 0x07
    180c:	98 85       	ldd	r25, Y+8	; 0x08
    180e:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9a 87       	std	Y+10, r25	; 0x0a
    1818:	89 87       	std	Y+9, r24	; 0x09
    181a:	89 85       	ldd	r24, Y+9	; 0x09
    181c:	9a 85       	ldd	r25, Y+10	; 0x0a
    181e:	9e 87       	std	Y+14, r25	; 0x0e
    1820:	8d 87       	std	Y+13, r24	; 0x0d
    1822:	8d 85       	ldd	r24, Y+13	; 0x0d
    1824:	9e 85       	ldd	r25, Y+14	; 0x0e
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <CLCD_voidShiftDisplayLeft+0xf6>
    182a:	9e 87       	std	Y+14, r25	; 0x0e
    182c:	8d 87       	std	Y+13, r24	; 0x0d
    182e:	00 00       	nop
    1830:	2e 96       	adiw	r28, 0x0e	; 14
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	00 d0       	rcall	.+0      	; 0x1848 <DIO_enumSetPinDir+0x6>
    1848:	00 d0       	rcall	.+0      	; 0x184a <DIO_enumSetPinDir+0x8>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	6b 83       	std	Y+3, r22	; 0x03
    1852:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	08 f0       	brcs	.+2      	; 0x1860 <DIO_enumSetPinDir+0x1e>
    185e:	eb c0       	rjmp	.+470    	; 0x1a36 <DIO_enumSetPinDir+0x1f4>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	88 30       	cpi	r24, 0x08	; 8
    1864:	08 f0       	brcs	.+2      	; 0x1868 <DIO_enumSetPinDir+0x26>
    1866:	e7 c0       	rjmp	.+462    	; 0x1a36 <DIO_enumSetPinDir+0x1f4>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	09 f0       	breq	.+2      	; 0x1870 <DIO_enumSetPinDir+0x2e>
    186e:	6c c0       	rjmp	.+216    	; 0x1948 <DIO_enumSetPinDir+0x106>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	19 f1       	breq	.+70     	; 0x18c2 <DIO_enumSetPinDir+0x80>
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	91 05       	cpc	r25, r1
    1880:	1c f4       	brge	.+6      	; 0x1888 <DIO_enumSetPinDir+0x46>
    1882:	89 2b       	or	r24, r25
    1884:	41 f0       	breq	.+16     	; 0x1896 <DIO_enumSetPinDir+0x54>
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1886:	d8 c0       	rjmp	.+432    	; 0x1a38 <DIO_enumSetPinDir+0x1f6>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	91 05       	cpc	r25, r1
    188c:	81 f1       	breq	.+96     	; 0x18ee <DIO_enumSetPinDir+0xac>
    188e:	03 97       	sbiw	r24, 0x03	; 3
    1890:	09 f4       	brne	.+2      	; 0x1894 <DIO_enumSetPinDir+0x52>
    1892:	43 c0       	rjmp	.+134    	; 0x191a <DIO_enumSetPinDir+0xd8>
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1894:	d1 c0       	rjmp	.+418    	; 0x1a38 <DIO_enumSetPinDir+0x1f6>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    1896:	8a e3       	ldi	r24, 0x3A	; 58
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	fc 01       	movw	r30, r24
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_enumSetPinDir+0x6e>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	2a 95       	dec	r18
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_enumSetPinDir+0x6a>
    18b4:	24 2f       	mov	r18, r20
    18b6:	28 2b       	or	r18, r24
    18b8:	8a e3       	ldi	r24, 0x3A	; 58
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	fc 01       	movw	r30, r24
    18be:	20 83       	st	Z, r18
        break;
    18c0:	b9 c0       	rjmp	.+370    	; 0x1a34 <DIO_enumSetPinDir+0x1f2>
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    18c2:	87 e3       	ldi	r24, 0x37	; 55
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	fc 01       	movw	r30, r24
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_enumSetPinDir+0x9a>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	2a 95       	dec	r18
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_enumSetPinDir+0x96>
    18e0:	24 2f       	mov	r18, r20
    18e2:	28 2b       	or	r18, r24
    18e4:	87 e3       	ldi	r24, 0x37	; 55
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 83       	st	Z, r18
        break;
    18ec:	a3 c0       	rjmp	.+326    	; 0x1a34 <DIO_enumSetPinDir+0x1f2>
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    18ee:	84 e3       	ldi	r24, 0x34	; 52
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	fc 01       	movw	r30, r24
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_enumSetPinDir+0xc6>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	2a 95       	dec	r18
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_enumSetPinDir+0xc2>
    190c:	24 2f       	mov	r18, r20
    190e:	28 2b       	or	r18, r24
    1910:	84 e3       	ldi	r24, 0x34	; 52
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	20 83       	st	Z, r18
        break;
    1918:	8d c0       	rjmp	.+282    	; 0x1a34 <DIO_enumSetPinDir+0x1f2>
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    191a:	81 e3       	ldi	r24, 0x31	; 49
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	fc 01       	movw	r30, r24
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_enumSetPinDir+0xf2>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	2a 95       	dec	r18
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_enumSetPinDir+0xee>
    1938:	24 2f       	mov	r18, r20
    193a:	28 2b       	or	r18, r24
    193c:	81 e3       	ldi	r24, 0x31	; 49
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18
        break;
    1944:	00 00       	nop
    1946:	76 c0       	rjmp	.+236    	; 0x1a34 <DIO_enumSetPinDir+0x1f2>
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	88 23       	and	r24, r24
    194c:	09 f0       	breq	.+2      	; 0x1950 <DIO_enumSetPinDir+0x10e>
    194e:	70 c0       	rjmp	.+224    	; 0x1a30 <DIO_enumSetPinDir+0x1ee>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	21 f1       	breq	.+72     	; 0x19a4 <DIO_enumSetPinDir+0x162>
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	91 05       	cpc	r25, r1
    1960:	1c f4       	brge	.+6      	; 0x1968 <DIO_enumSetPinDir+0x126>
    1962:	89 2b       	or	r24, r25
    1964:	41 f0       	breq	.+16     	; 0x1976 <DIO_enumSetPinDir+0x134>
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1966:	68 c0       	rjmp	.+208    	; 0x1a38 <DIO_enumSetPinDir+0x1f6>
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	91 05       	cpc	r25, r1
    196c:	91 f1       	breq	.+100    	; 0x19d2 <DIO_enumSetPinDir+0x190>
    196e:	03 97       	sbiw	r24, 0x03	; 3
    1970:	09 f4       	brne	.+2      	; 0x1974 <DIO_enumSetPinDir+0x132>
    1972:	46 c0       	rjmp	.+140    	; 0x1a00 <DIO_enumSetPinDir+0x1be>
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1974:	61 c0       	rjmp	.+194    	; 0x1a38 <DIO_enumSetPinDir+0x1f6>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    1976:	8a e3       	ldi	r24, 0x3A	; 58
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	fc 01       	movw	r30, r24
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_enumSetPinDir+0x14e>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	2a 95       	dec	r18
    1992:	e2 f7       	brpl	.-8      	; 0x198c <DIO_enumSetPinDir+0x14a>
    1994:	80 95       	com	r24
    1996:	24 2f       	mov	r18, r20
    1998:	28 23       	and	r18, r24
    199a:	8a e3       	ldi	r24, 0x3A	; 58
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	fc 01       	movw	r30, r24
    19a0:	20 83       	st	Z, r18
        break;
    19a2:	48 c0       	rjmp	.+144    	; 0x1a34 <DIO_enumSetPinDir+0x1f2>
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    19a4:	87 e3       	ldi	r24, 0x37	; 55
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <DIO_enumSetPinDir+0x17c>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	2a 95       	dec	r18
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <DIO_enumSetPinDir+0x178>
    19c2:	80 95       	com	r24
    19c4:	24 2f       	mov	r18, r20
    19c6:	28 23       	and	r18, r24
    19c8:	87 e3       	ldi	r24, 0x37	; 55
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18
        break;
    19d0:	31 c0       	rjmp	.+98     	; 0x1a34 <DIO_enumSetPinDir+0x1f2>
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    19d2:	84 e3       	ldi	r24, 0x34	; 52
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	fc 01       	movw	r30, r24
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <DIO_enumSetPinDir+0x1aa>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	2a 95       	dec	r18
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <DIO_enumSetPinDir+0x1a6>
    19f0:	80 95       	com	r24
    19f2:	24 2f       	mov	r18, r20
    19f4:	28 23       	and	r18, r24
    19f6:	84 e3       	ldi	r24, 0x34	; 52
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
        break;
    19fe:	1a c0       	rjmp	.+52     	; 0x1a34 <DIO_enumSetPinDir+0x1f2>
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    1a00:	81 e3       	ldi	r24, 0x31	; 49
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	fc 01       	movw	r30, r24
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_enumSetPinDir+0x1d8>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	2a 95       	dec	r18
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_enumSetPinDir+0x1d4>
    1a1e:	80 95       	com	r24
    1a20:	24 2f       	mov	r18, r20
    1a22:	28 23       	and	r18, r24
    1a24:	81 e3       	ldi	r24, 0x31	; 49
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	fc 01       	movw	r30, r24
    1a2a:	20 83       	st	Z, r18
        break;
    1a2c:	00 00       	nop
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_enumSetPinDir+0x1f2>
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1a30:	19 82       	std	Y+1, r1	; 0x01
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_enumSetPinDir+0x1f6>
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <DIO_enumSetPinDir+0x1f6>
      LOC_enumState = DIO_NOK;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1a36:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <DIO_enumWritePinVal+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <DIO_enumWritePinVal+0x8>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	8a 83       	std	Y+2, r24	; 0x02
    1a56:	6b 83       	std	Y+3, r22	; 0x03
    1a58:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	08 f0       	brcs	.+2      	; 0x1a66 <DIO_enumWritePinVal+0x1e>
    1a64:	eb c0       	rjmp	.+470    	; 0x1c3c <DIO_enumWritePinVal+0x1f4>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	88 30       	cpi	r24, 0x08	; 8
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <DIO_enumWritePinVal+0x26>
    1a6c:	e7 c0       	rjmp	.+462    	; 0x1c3c <DIO_enumWritePinVal+0x1f4>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <DIO_enumWritePinVal+0x2e>
    1a74:	6c c0       	rjmp	.+216    	; 0x1b4e <DIO_enumWritePinVal+0x106>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	91 05       	cpc	r25, r1
    1a80:	19 f1       	breq	.+70     	; 0x1ac8 <DIO_enumWritePinVal+0x80>
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	91 05       	cpc	r25, r1
    1a86:	1c f4       	brge	.+6      	; 0x1a8e <DIO_enumWritePinVal+0x46>
    1a88:	89 2b       	or	r24, r25
    1a8a:	41 f0       	breq	.+16     	; 0x1a9c <DIO_enumWritePinVal+0x54>
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1a8c:	d8 c0       	rjmp	.+432    	; 0x1c3e <DIO_enumWritePinVal+0x1f6>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	91 05       	cpc	r25, r1
    1a92:	81 f1       	breq	.+96     	; 0x1af4 <DIO_enumWritePinVal+0xac>
    1a94:	03 97       	sbiw	r24, 0x03	; 3
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <DIO_enumWritePinVal+0x52>
    1a98:	43 c0       	rjmp	.+134    	; 0x1b20 <DIO_enumWritePinVal+0xd8>
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1a9a:	d1 c0       	rjmp	.+418    	; 0x1c3e <DIO_enumWritePinVal+0x1f6>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    1a9c:	8b e3       	ldi	r24, 0x3B	; 59
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_enumWritePinVal+0x6e>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	2a 95       	dec	r18
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_enumWritePinVal+0x6a>
    1aba:	24 2f       	mov	r18, r20
    1abc:	28 2b       	or	r18, r24
    1abe:	8b e3       	ldi	r24, 0x3B	; 59
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	20 83       	st	Z, r18
        break;
    1ac6:	b9 c0       	rjmp	.+370    	; 0x1c3a <DIO_enumWritePinVal+0x1f2>
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    1ac8:	88 e3       	ldi	r24, 0x38	; 56
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	fc 01       	movw	r30, r24
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <DIO_enumWritePinVal+0x9a>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	2a 95       	dec	r18
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <DIO_enumWritePinVal+0x96>
    1ae6:	24 2f       	mov	r18, r20
    1ae8:	28 2b       	or	r18, r24
    1aea:	88 e3       	ldi	r24, 0x38	; 56
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	fc 01       	movw	r30, r24
    1af0:	20 83       	st	Z, r18
        break;
    1af2:	a3 c0       	rjmp	.+326    	; 0x1c3a <DIO_enumWritePinVal+0x1f2>
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    1af4:	85 e3       	ldi	r24, 0x35	; 53
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	fc 01       	movw	r30, r24
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_enumWritePinVal+0xc6>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	2a 95       	dec	r18
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_enumWritePinVal+0xc2>
    1b12:	24 2f       	mov	r18, r20
    1b14:	28 2b       	or	r18, r24
    1b16:	85 e3       	ldi	r24, 0x35	; 53
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	20 83       	st	Z, r18
        break;
    1b1e:	8d c0       	rjmp	.+282    	; 0x1c3a <DIO_enumWritePinVal+0x1f2>
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    1b20:	82 e3       	ldi	r24, 0x32	; 50
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	fc 01       	movw	r30, r24
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_enumWritePinVal+0xf2>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	2a 95       	dec	r18
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_enumWritePinVal+0xee>
    1b3e:	24 2f       	mov	r18, r20
    1b40:	28 2b       	or	r18, r24
    1b42:	82 e3       	ldi	r24, 0x32	; 50
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	fc 01       	movw	r30, r24
    1b48:	20 83       	st	Z, r18
        break;
    1b4a:	00 00       	nop
    1b4c:	76 c0       	rjmp	.+236    	; 0x1c3a <DIO_enumWritePinVal+0x1f2>
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	88 23       	and	r24, r24
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <DIO_enumWritePinVal+0x10e>
    1b54:	70 c0       	rjmp	.+224    	; 0x1c36 <DIO_enumWritePinVal+0x1ee>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	91 05       	cpc	r25, r1
    1b60:	21 f1       	breq	.+72     	; 0x1baa <DIO_enumWritePinVal+0x162>
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	91 05       	cpc	r25, r1
    1b66:	1c f4       	brge	.+6      	; 0x1b6e <DIO_enumWritePinVal+0x126>
    1b68:	89 2b       	or	r24, r25
    1b6a:	41 f0       	breq	.+16     	; 0x1b7c <DIO_enumWritePinVal+0x134>
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1b6c:	68 c0       	rjmp	.+208    	; 0x1c3e <DIO_enumWritePinVal+0x1f6>
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	91 05       	cpc	r25, r1
    1b72:	91 f1       	breq	.+100    	; 0x1bd8 <DIO_enumWritePinVal+0x190>
    1b74:	03 97       	sbiw	r24, 0x03	; 3
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <DIO_enumWritePinVal+0x132>
    1b78:	46 c0       	rjmp	.+140    	; 0x1c06 <DIO_enumWritePinVal+0x1be>
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1b7a:	61 c0       	rjmp	.+194    	; 0x1c3e <DIO_enumWritePinVal+0x1f6>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    1b7c:	8b e3       	ldi	r24, 0x3B	; 59
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	fc 01       	movw	r30, r24
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_enumWritePinVal+0x14e>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	2a 95       	dec	r18
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_enumWritePinVal+0x14a>
    1b9a:	80 95       	com	r24
    1b9c:	24 2f       	mov	r18, r20
    1b9e:	28 23       	and	r18, r24
    1ba0:	8b e3       	ldi	r24, 0x3B	; 59
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 83       	st	Z, r18
        break;
    1ba8:	48 c0       	rjmp	.+144    	; 0x1c3a <DIO_enumWritePinVal+0x1f2>
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    1baa:	88 e3       	ldi	r24, 0x38	; 56
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	fc 01       	movw	r30, r24
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <DIO_enumWritePinVal+0x17c>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	2a 95       	dec	r18
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <DIO_enumWritePinVal+0x178>
    1bc8:	80 95       	com	r24
    1bca:	24 2f       	mov	r18, r20
    1bcc:	28 23       	and	r18, r24
    1bce:	88 e3       	ldi	r24, 0x38	; 56
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	20 83       	st	Z, r18
        break;
    1bd6:	31 c0       	rjmp	.+98     	; 0x1c3a <DIO_enumWritePinVal+0x1f2>
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    1bd8:	85 e3       	ldi	r24, 0x35	; 53
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	fc 01       	movw	r30, r24
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_enumWritePinVal+0x1aa>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	2a 95       	dec	r18
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_enumWritePinVal+0x1a6>
    1bf6:	80 95       	com	r24
    1bf8:	24 2f       	mov	r18, r20
    1bfa:	28 23       	and	r18, r24
    1bfc:	85 e3       	ldi	r24, 0x35	; 53
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	fc 01       	movw	r30, r24
    1c02:	20 83       	st	Z, r18
        break;
    1c04:	1a c0       	rjmp	.+52     	; 0x1c3a <DIO_enumWritePinVal+0x1f2>
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    1c06:	82 e3       	ldi	r24, 0x32	; 50
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <DIO_enumWritePinVal+0x1d8>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	2a 95       	dec	r18
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <DIO_enumWritePinVal+0x1d4>
    1c24:	80 95       	com	r24
    1c26:	24 2f       	mov	r18, r20
    1c28:	28 23       	and	r18, r24
    1c2a:	82 e3       	ldi	r24, 0x32	; 50
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	fc 01       	movw	r30, r24
    1c30:	20 83       	st	Z, r18
        break;
    1c32:	00 00       	nop
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_enumWritePinVal+0x1f2>
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1c36:	19 82       	std	Y+1, r1	; 0x01
  DIO_errorStatus LOC_enumState = DIO_OK;

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_enumWritePinVal+0x1f6>
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <DIO_enumWritePinVal+0x1f6>
      LOC_enumState = DIO_NOK;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1c3c:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <DIO_enumReadPinVal+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <DIO_enumReadPinVal+0x8>
    1c56:	1f 92       	push	r1
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	8a 83       	std	Y+2, r24	; 0x02
    1c5e:	6b 83       	std	Y+3, r22	; 0x03
    1c60:	5d 83       	std	Y+5, r21	; 0x05
    1c62:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	84 30       	cpi	r24, 0x04	; 4
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <DIO_enumReadPinVal+0x22>
    1c6e:	99 c0       	rjmp	.+306    	; 0x1da2 <DIO_enumReadPinVal+0x154>
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	88 30       	cpi	r24, 0x08	; 8
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <DIO_enumReadPinVal+0x2a>
    1c76:	95 c0       	rjmp	.+298    	; 0x1da2 <DIO_enumReadPinVal+0x154>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	71 f1       	breq	.+92     	; 0x1ce0 <DIO_enumReadPinVal+0x92>
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	91 05       	cpc	r25, r1
    1c88:	1c f4       	brge	.+6      	; 0x1c90 <DIO_enumReadPinVal+0x42>
    1c8a:	89 2b       	or	r24, r25
    1c8c:	49 f0       	breq	.+18     	; 0x1ca0 <DIO_enumReadPinVal+0x52>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
      break;
    }
  }
    1c8e:	8a c0       	rjmp	.+276    	; 0x1da4 <DIO_enumReadPinVal+0x156>
  DIO_errorStatus LOC_enumState = DIO_OK;

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    1c90:	82 30       	cpi	r24, 0x02	; 2
    1c92:	91 05       	cpc	r25, r1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <DIO_enumReadPinVal+0x4a>
    1c96:	44 c0       	rjmp	.+136    	; 0x1d20 <DIO_enumReadPinVal+0xd2>
    1c98:	03 97       	sbiw	r24, 0x03	; 3
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <DIO_enumReadPinVal+0x50>
    1c9c:	61 c0       	rjmp	.+194    	; 0x1d60 <DIO_enumReadPinVal+0x112>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
      break;
    }
  }
    1c9e:	82 c0       	rjmp	.+260    	; 0x1da4 <DIO_enumReadPinVal+0x156>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    1ca0:	89 e3       	ldi	r24, 0x39	; 57
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	48 2f       	mov	r20, r24
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <DIO_enumReadPinVal+0x6e>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	4a 95       	dec	r20
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <DIO_enumReadPinVal+0x6a>
    1cc0:	82 23       	and	r24, r18
    1cc2:	93 23       	and	r25, r19
    1cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc6:	22 2f       	mov	r18, r18
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <DIO_enumReadPinVal+0x82>
    1ccc:	95 95       	asr	r25
    1cce:	87 95       	ror	r24
    1cd0:	2a 95       	dec	r18
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <DIO_enumReadPinVal+0x7e>
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cda:	fc 01       	movw	r30, r24
    1cdc:	20 83       	st	Z, r18
      break;
    1cde:	60 c0       	rjmp	.+192    	; 0x1da0 <DIO_enumReadPinVal+0x152>
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    1ce0:	86 e3       	ldi	r24, 0x36	; 54
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	80 81       	ld	r24, Z
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	48 2f       	mov	r20, r24
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_enumReadPinVal+0xae>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	4a 95       	dec	r20
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_enumReadPinVal+0xaa>
    1d00:	82 23       	and	r24, r18
    1d02:	93 23       	and	r25, r19
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	22 2f       	mov	r18, r18
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <DIO_enumReadPinVal+0xc2>
    1d0c:	95 95       	asr	r25
    1d0e:	87 95       	ror	r24
    1d10:	2a 95       	dec	r18
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <DIO_enumReadPinVal+0xbe>
    1d14:	28 2f       	mov	r18, r24
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 83       	st	Z, r18
      break;
    1d1e:	40 c0       	rjmp	.+128    	; 0x1da0 <DIO_enumReadPinVal+0x152>
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    1d20:	83 e3       	ldi	r24, 0x33	; 51
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	fc 01       	movw	r30, r24
    1d26:	80 81       	ld	r24, Z
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	48 2f       	mov	r20, r24
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_enumReadPinVal+0xee>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	4a 95       	dec	r20
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_enumReadPinVal+0xea>
    1d40:	82 23       	and	r24, r18
    1d42:	93 23       	and	r25, r19
    1d44:	2b 81       	ldd	r18, Y+3	; 0x03
    1d46:	22 2f       	mov	r18, r18
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <DIO_enumReadPinVal+0x102>
    1d4c:	95 95       	asr	r25
    1d4e:	87 95       	ror	r24
    1d50:	2a 95       	dec	r18
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <DIO_enumReadPinVal+0xfe>
    1d54:	28 2f       	mov	r18, r24
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	20 83       	st	Z, r18
      break;
    1d5e:	20 c0       	rjmp	.+64     	; 0x1da0 <DIO_enumReadPinVal+0x152>
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    1d60:	80 e3       	ldi	r24, 0x30	; 48
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	fc 01       	movw	r30, r24
    1d66:	80 81       	ld	r24, Z
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	48 2f       	mov	r20, r24
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <DIO_enumReadPinVal+0x12e>
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	4a 95       	dec	r20
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <DIO_enumReadPinVal+0x12a>
    1d80:	82 23       	and	r24, r18
    1d82:	93 23       	and	r25, r19
    1d84:	2b 81       	ldd	r18, Y+3	; 0x03
    1d86:	22 2f       	mov	r18, r18
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_enumReadPinVal+0x142>
    1d8c:	95 95       	asr	r25
    1d8e:	87 95       	ror	r24
    1d90:	2a 95       	dec	r18
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_enumReadPinVal+0x13e>
    1d94:	28 2f       	mov	r18, r24
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	20 83       	st	Z, r18
      break;
    1d9e:	00 00       	nop
    }
  }
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <DIO_enumReadPinVal+0x156>
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1da2:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <DIO_enumTogglePinVal+0x6>
    1dbc:	1f 92       	push	r1
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
    1dc4:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	84 30       	cpi	r24, 0x04	; 4
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <DIO_enumTogglePinVal+0x1c>
    1dd0:	70 c0       	rjmp	.+224    	; 0x1eb2 <DIO_enumTogglePinVal+0xfc>
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	88 30       	cpi	r24, 0x08	; 8
    1dd6:	08 f0       	brcs	.+2      	; 0x1dda <DIO_enumTogglePinVal+0x24>
    1dd8:	6c c0       	rjmp	.+216    	; 0x1eb2 <DIO_enumTogglePinVal+0xfc>
  {
    switch (Copy_u8PORT)
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	91 05       	cpc	r25, r1
    1de4:	19 f1       	breq	.+70     	; 0x1e2c <DIO_enumTogglePinVal+0x76>
    1de6:	82 30       	cpi	r24, 0x02	; 2
    1de8:	91 05       	cpc	r25, r1
    1dea:	1c f4       	brge	.+6      	; 0x1df2 <DIO_enumTogglePinVal+0x3c>
    1dec:	89 2b       	or	r24, r25
    1dee:	41 f0       	breq	.+16     	; 0x1e00 <DIO_enumTogglePinVal+0x4a>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
      break;
    }
  }
    1df0:	61 c0       	rjmp	.+194    	; 0x1eb4 <DIO_enumTogglePinVal+0xfe>
{
  DIO_errorStatus LOC_enumState = DIO_OK;

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    switch (Copy_u8PORT)
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	91 05       	cpc	r25, r1
    1df6:	81 f1       	breq	.+96     	; 0x1e58 <DIO_enumTogglePinVal+0xa2>
    1df8:	03 97       	sbiw	r24, 0x03	; 3
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <DIO_enumTogglePinVal+0x48>
    1dfc:	43 c0       	rjmp	.+134    	; 0x1e84 <DIO_enumTogglePinVal+0xce>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
      break;
    }
  }
    1dfe:	5a c0       	rjmp	.+180    	; 0x1eb4 <DIO_enumTogglePinVal+0xfe>
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    switch (Copy_u8PORT)
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    1e00:	8b e3       	ldi	r24, 0x3B	; 59
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	fc 01       	movw	r30, r24
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_enumTogglePinVal+0x64>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	2a 95       	dec	r18
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_enumTogglePinVal+0x60>
    1e1e:	24 2f       	mov	r18, r20
    1e20:	28 27       	eor	r18, r24
    1e22:	8b e3       	ldi	r24, 0x3B	; 59
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 83       	st	Z, r18
      break;
    1e2a:	42 c0       	rjmp	.+132    	; 0x1eb0 <DIO_enumTogglePinVal+0xfa>
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    1e2c:	88 e3       	ldi	r24, 0x38	; 56
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	fc 01       	movw	r30, r24
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_enumTogglePinVal+0x90>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	2a 95       	dec	r18
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <DIO_enumTogglePinVal+0x8c>
    1e4a:	24 2f       	mov	r18, r20
    1e4c:	28 27       	eor	r18, r24
    1e4e:	88 e3       	ldi	r24, 0x38	; 56
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	fc 01       	movw	r30, r24
    1e54:	20 83       	st	Z, r18
      break;
    1e56:	2c c0       	rjmp	.+88     	; 0x1eb0 <DIO_enumTogglePinVal+0xfa>
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    1e58:	85 e3       	ldi	r24, 0x35	; 53
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_enumTogglePinVal+0xbc>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	2a 95       	dec	r18
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_enumTogglePinVal+0xb8>
    1e76:	24 2f       	mov	r18, r20
    1e78:	28 27       	eor	r18, r24
    1e7a:	85 e3       	ldi	r24, 0x35	; 53
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	fc 01       	movw	r30, r24
    1e80:	20 83       	st	Z, r18
      break;
    1e82:	16 c0       	rjmp	.+44     	; 0x1eb0 <DIO_enumTogglePinVal+0xfa>
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    1e84:	82 e3       	ldi	r24, 0x32	; 50
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	fc 01       	movw	r30, r24
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_enumTogglePinVal+0xe8>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	2a 95       	dec	r18
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_enumTogglePinVal+0xe4>
    1ea2:	24 2f       	mov	r18, r20
    1ea4:	28 27       	eor	r18, r24
    1ea6:	82 e3       	ldi	r24, 0x32	; 50
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	fc 01       	movw	r30, r24
    1eac:	20 83       	st	Z, r18
      break;
    1eae:	00 00       	nop
    }
  }
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <DIO_enumTogglePinVal+0xfe>
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1eb2:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	08 95       	ret

00001ec2 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <DIO_enumConnectPullUp+0x6>
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <DIO_enumConnectPullUp+0x8>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	6b 83       	std	Y+3, r22	; 0x03
    1ed2:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <DIO_enumConnectPullUp+0x1e>
    1ede:	56 c1       	rjmp	.+684    	; 0x218c <DIO_enumConnectPullUp+0x2ca>
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	88 30       	cpi	r24, 0x08	; 8
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <DIO_enumConnectPullUp+0x26>
    1ee6:	52 c1       	rjmp	.+676    	; 0x218c <DIO_enumConnectPullUp+0x2ca>
  {
    switch (Copy_u8PORT)
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <DIO_enumConnectPullUp+0x34>
    1ef4:	5d c0       	rjmp	.+186    	; 0x1fb0 <DIO_enumConnectPullUp+0xee>
    1ef6:	82 30       	cpi	r24, 0x02	; 2
    1ef8:	91 05       	cpc	r25, r1
    1efa:	1c f4       	brge	.+6      	; 0x1f02 <DIO_enumConnectPullUp+0x40>
    1efc:	89 2b       	or	r24, r25
    1efe:	49 f0       	breq	.+18     	; 0x1f12 <DIO_enumConnectPullUp+0x50>
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
      }
      break;
    }
  }
    1f00:	46 c1       	rjmp	.+652    	; 0x218e <DIO_enumConnectPullUp+0x2cc>
{
  DIO_errorStatus LOC_enumState = DIO_OK;

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  {
    switch (Copy_u8PORT)
    1f02:	82 30       	cpi	r24, 0x02	; 2
    1f04:	91 05       	cpc	r25, r1
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <DIO_enumConnectPullUp+0x48>
    1f08:	a2 c0       	rjmp	.+324    	; 0x204e <DIO_enumConnectPullUp+0x18c>
    1f0a:	03 97       	sbiw	r24, 0x03	; 3
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <DIO_enumConnectPullUp+0x4e>
    1f0e:	ee c0       	rjmp	.+476    	; 0x20ec <DIO_enumConnectPullUp+0x22a>
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
      }
      break;
    }
  }
    1f10:	3e c1       	rjmp	.+636    	; 0x218e <DIO_enumConnectPullUp+0x2cc>
  {
    switch (Copy_u8PORT)
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	a9 f5       	brne	.+106    	; 0x1f82 <DIO_enumConnectPullUp+0xc0>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    1f18:	80 e5       	ldi	r24, 0x50	; 80
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	20 81       	ld	r18, Z
    1f20:	80 e5       	ldi	r24, 0x50	; 80
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	2b 7f       	andi	r18, 0xFB	; 251
    1f26:	fc 01       	movw	r30, r24
    1f28:	20 83       	st	Z, r18
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    1f2a:	8a e3       	ldi	r24, 0x3A	; 58
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	fc 01       	movw	r30, r24
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_enumConnectPullUp+0x82>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	2a 95       	dec	r18
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_enumConnectPullUp+0x7e>
    1f48:	80 95       	com	r24
    1f4a:	24 2f       	mov	r18, r20
    1f4c:	28 23       	and	r18, r24
    1f4e:	8a e3       	ldi	r24, 0x3A	; 58
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	fc 01       	movw	r30, r24
    1f54:	20 83       	st	Z, r18
        SET_BIT(PORTA_REG, Copy_u8PIN);
    1f56:	8b e3       	ldi	r24, 0x3B	; 59
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <DIO_enumConnectPullUp+0xae>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	2a 95       	dec	r18
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <DIO_enumConnectPullUp+0xaa>
    1f74:	24 2f       	mov	r18, r20
    1f76:	28 2b       	or	r18, r24
    1f78:	8b e3       	ldi	r24, 0x3B	; 59
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	20 83       	st	Z, r18
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
      }
      break;
    1f80:	04 c1       	rjmp	.+520    	; 0x218a <DIO_enumConnectPullUp+0x2c8>
        CLR_BIT(DDRA_REG, Copy_u8PIN);
        SET_BIT(PORTA_REG, Copy_u8PIN);
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    1f82:	8b e3       	ldi	r24, 0x3B	; 59
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	fc 01       	movw	r30, r24
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <DIO_enumConnectPullUp+0xda>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	2a 95       	dec	r18
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <DIO_enumConnectPullUp+0xd6>
    1fa0:	80 95       	com	r24
    1fa2:	24 2f       	mov	r18, r20
    1fa4:	28 23       	and	r18, r24
    1fa6:	8b e3       	ldi	r24, 0x3B	; 59
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18
      }
      break;
    1fae:	ed c0       	rjmp	.+474    	; 0x218a <DIO_enumConnectPullUp+0x2c8>
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	a9 f5       	brne	.+106    	; 0x2020 <DIO_enumConnectPullUp+0x15e>
      {
        CLR_BIT(SFIOR_REG, PUD);
    1fb6:	80 e5       	ldi	r24, 0x50	; 80
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	fc 01       	movw	r30, r24
    1fbc:	20 81       	ld	r18, Z
    1fbe:	80 e5       	ldi	r24, 0x50	; 80
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	2b 7f       	andi	r18, 0xFB	; 251
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	20 83       	st	Z, r18
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    1fc8:	87 e3       	ldi	r24, 0x37	; 55
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	fc 01       	movw	r30, r24
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <DIO_enumConnectPullUp+0x120>
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	2a 95       	dec	r18
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <DIO_enumConnectPullUp+0x11c>
    1fe6:	80 95       	com	r24
    1fe8:	24 2f       	mov	r18, r20
    1fea:	28 23       	and	r18, r24
    1fec:	87 e3       	ldi	r24, 0x37	; 55
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	20 83       	st	Z, r18
        SET_BIT(PORTB_REG, Copy_u8PIN);
    1ff4:	88 e3       	ldi	r24, 0x38	; 56
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	80 81       	ld	r24, Z
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 c0       	rjmp	.+4      	; 0x200e <DIO_enumConnectPullUp+0x14c>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	2a 95       	dec	r18
    2010:	e2 f7       	brpl	.-8      	; 0x200a <DIO_enumConnectPullUp+0x148>
    2012:	24 2f       	mov	r18, r20
    2014:	28 2b       	or	r18, r24
    2016:	88 e3       	ldi	r24, 0x38	; 56
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	fc 01       	movw	r30, r24
    201c:	20 83       	st	Z, r18
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
      }
      break;
    201e:	b5 c0       	rjmp	.+362    	; 0x218a <DIO_enumConnectPullUp+0x2c8>
        CLR_BIT(DDRB_REG, Copy_u8PIN);
        SET_BIT(PORTB_REG, Copy_u8PIN);
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    2020:	88 e3       	ldi	r24, 0x38	; 56
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	fc 01       	movw	r30, r24
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_enumConnectPullUp+0x178>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	2a 95       	dec	r18
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_enumConnectPullUp+0x174>
    203e:	80 95       	com	r24
    2040:	24 2f       	mov	r18, r20
    2042:	28 23       	and	r18, r24
    2044:	88 e3       	ldi	r24, 0x38	; 56
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	fc 01       	movw	r30, r24
    204a:	20 83       	st	Z, r18
      }
      break;
    204c:	9e c0       	rjmp	.+316    	; 0x218a <DIO_enumConnectPullUp+0x2c8>
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	a9 f5       	brne	.+106    	; 0x20be <DIO_enumConnectPullUp+0x1fc>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2054:	80 e5       	ldi	r24, 0x50	; 80
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	fc 01       	movw	r30, r24
    205a:	20 81       	ld	r18, Z
    205c:	80 e5       	ldi	r24, 0x50	; 80
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	2b 7f       	andi	r18, 0xFB	; 251
    2062:	fc 01       	movw	r30, r24
    2064:	20 83       	st	Z, r18
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2066:	84 e3       	ldi	r24, 0x34	; 52
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	fc 01       	movw	r30, r24
    206c:	80 81       	ld	r24, Z
    206e:	48 2f       	mov	r20, r24
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <DIO_enumConnectPullUp+0x1be>
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	2a 95       	dec	r18
    2082:	e2 f7       	brpl	.-8      	; 0x207c <DIO_enumConnectPullUp+0x1ba>
    2084:	80 95       	com	r24
    2086:	24 2f       	mov	r18, r20
    2088:	28 23       	and	r18, r24
    208a:	84 e3       	ldi	r24, 0x34	; 52
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	fc 01       	movw	r30, r24
    2090:	20 83       	st	Z, r18
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2092:	85 e3       	ldi	r24, 0x35	; 53
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	fc 01       	movw	r30, r24
    2098:	80 81       	ld	r24, Z
    209a:	48 2f       	mov	r20, r24
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_enumConnectPullUp+0x1ea>
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	2a 95       	dec	r18
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_enumConnectPullUp+0x1e6>
    20b0:	24 2f       	mov	r18, r20
    20b2:	28 2b       	or	r18, r24
    20b4:	85 e3       	ldi	r24, 0x35	; 53
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	fc 01       	movw	r30, r24
    20ba:	20 83       	st	Z, r18
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
      }
      break;
    20bc:	66 c0       	rjmp	.+204    	; 0x218a <DIO_enumConnectPullUp+0x2c8>
        CLR_BIT(DDRC_REG, Copy_u8PIN);
        SET_BIT(PORTC_REG, Copy_u8PIN);
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    20be:	85 e3       	ldi	r24, 0x35	; 53
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	48 2f       	mov	r20, r24
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <DIO_enumConnectPullUp+0x216>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	2a 95       	dec	r18
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <DIO_enumConnectPullUp+0x212>
    20dc:	80 95       	com	r24
    20de:	24 2f       	mov	r18, r20
    20e0:	28 23       	and	r18, r24
    20e2:	85 e3       	ldi	r24, 0x35	; 53
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	fc 01       	movw	r30, r24
    20e8:	20 83       	st	Z, r18
      }
      break;
    20ea:	4f c0       	rjmp	.+158    	; 0x218a <DIO_enumConnectPullUp+0x2c8>
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	a9 f5       	brne	.+106    	; 0x215c <DIO_enumConnectPullUp+0x29a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    20f2:	80 e5       	ldi	r24, 0x50	; 80
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	fc 01       	movw	r30, r24
    20f8:	20 81       	ld	r18, Z
    20fa:	80 e5       	ldi	r24, 0x50	; 80
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	2b 7f       	andi	r18, 0xFB	; 251
    2100:	fc 01       	movw	r30, r24
    2102:	20 83       	st	Z, r18
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    2104:	81 e3       	ldi	r24, 0x31	; 49
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	fc 01       	movw	r30, r24
    210a:	80 81       	ld	r24, Z
    210c:	48 2f       	mov	r20, r24
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 c0       	rjmp	.+4      	; 0x211e <DIO_enumConnectPullUp+0x25c>
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	2a 95       	dec	r18
    2120:	e2 f7       	brpl	.-8      	; 0x211a <DIO_enumConnectPullUp+0x258>
    2122:	80 95       	com	r24
    2124:	24 2f       	mov	r18, r20
    2126:	28 23       	and	r18, r24
    2128:	81 e3       	ldi	r24, 0x31	; 49
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	fc 01       	movw	r30, r24
    212e:	20 83       	st	Z, r18
        SET_BIT(PORTD_REG, Copy_u8PIN);
    2130:	82 e3       	ldi	r24, 0x32	; 50
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	fc 01       	movw	r30, r24
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 c0       	rjmp	.+4      	; 0x214a <DIO_enumConnectPullUp+0x288>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	2a 95       	dec	r18
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <DIO_enumConnectPullUp+0x284>
    214e:	24 2f       	mov	r18, r20
    2150:	28 2b       	or	r18, r24
    2152:	82 e3       	ldi	r24, 0x32	; 50
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	fc 01       	movw	r30, r24
    2158:	20 83       	st	Z, r18
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
      }
      break;
    215a:	16 c0       	rjmp	.+44     	; 0x2188 <DIO_enumConnectPullUp+0x2c6>
        CLR_BIT(DDRD_REG, Copy_u8PIN);
        SET_BIT(PORTD_REG, Copy_u8PIN);
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    215c:	82 e3       	ldi	r24, 0x32	; 50
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	fc 01       	movw	r30, r24
    2162:	80 81       	ld	r24, Z
    2164:	48 2f       	mov	r20, r24
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_enumConnectPullUp+0x2b4>
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	2a 95       	dec	r18
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <DIO_enumConnectPullUp+0x2b0>
    217a:	80 95       	com	r24
    217c:	24 2f       	mov	r18, r20
    217e:	28 23       	and	r18, r24
    2180:	82 e3       	ldi	r24, 0x32	; 50
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	fc 01       	movw	r30, r24
    2186:	20 83       	st	Z, r18
      }
      break;
    2188:	00 00       	nop
    }
  }
    218a:	01 c0       	rjmp	.+2      	; 0x218e <DIO_enumConnectPullUp+0x2cc>

  else
  {
    LOC_enumState = DIO_NOK;
    218c:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    218e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	08 95       	ret

0000219e <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <DIO_enumSetPortDir+0x6>
    21a4:	1f 92       	push	r1
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	8a 83       	std	Y+2, r24	; 0x02
    21ac:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	68 f5       	brcc	.+90     	; 0x2212 <DIO_enumSetPortDir+0x74>
  {
    switch (Copy_u8PORT)
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	91 05       	cpc	r25, r1
    21c2:	91 f0       	breq	.+36     	; 0x21e8 <DIO_enumSetPortDir+0x4a>
    21c4:	82 30       	cpi	r24, 0x02	; 2
    21c6:	91 05       	cpc	r25, r1
    21c8:	1c f4       	brge	.+6      	; 0x21d0 <DIO_enumSetPortDir+0x32>
    21ca:	89 2b       	or	r24, r25
    21cc:	39 f0       	breq	.+14     	; 0x21dc <DIO_enumSetPortDir+0x3e>
    21ce:	1e c0       	rjmp	.+60     	; 0x220c <DIO_enumSetPortDir+0x6e>
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	91 05       	cpc	r25, r1
    21d4:	79 f0       	breq	.+30     	; 0x21f4 <DIO_enumSetPortDir+0x56>
    21d6:	03 97       	sbiw	r24, 0x03	; 3
    21d8:	99 f0       	breq	.+38     	; 0x2200 <DIO_enumSetPortDir+0x62>
    21da:	18 c0       	rjmp	.+48     	; 0x220c <DIO_enumSetPortDir+0x6e>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    21dc:	8a e3       	ldi	r24, 0x3A	; 58
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	2b 81       	ldd	r18, Y+3	; 0x03
    21e2:	fc 01       	movw	r30, r24
    21e4:	20 83       	st	Z, r18
      break;
    21e6:	16 c0       	rjmp	.+44     	; 0x2214 <DIO_enumSetPortDir+0x76>
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    21e8:	87 e3       	ldi	r24, 0x37	; 55
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	2b 81       	ldd	r18, Y+3	; 0x03
    21ee:	fc 01       	movw	r30, r24
    21f0:	20 83       	st	Z, r18
      break;
    21f2:	10 c0       	rjmp	.+32     	; 0x2214 <DIO_enumSetPortDir+0x76>
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    21f4:	84 e3       	ldi	r24, 0x34	; 52
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	2b 81       	ldd	r18, Y+3	; 0x03
    21fa:	fc 01       	movw	r30, r24
    21fc:	20 83       	st	Z, r18
      break;
    21fe:	0a c0       	rjmp	.+20     	; 0x2214 <DIO_enumSetPortDir+0x76>
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    2200:	81 e3       	ldi	r24, 0x31	; 49
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	2b 81       	ldd	r18, Y+3	; 0x03
    2206:	fc 01       	movw	r30, r24
    2208:	20 83       	st	Z, r18
      break;
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <DIO_enumSetPortDir+0x76>
    default:
      LOC_enumState = DIO_NOK;
    220c:	19 82       	std	Y+1, r1	; 0x01
      break;
    220e:	00 00       	nop
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <DIO_enumSetPortDir+0x76>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2212:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2214:	89 81       	ldd	r24, Y+1	; 0x01
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	00 d0       	rcall	.+0      	; 0x2228 <DIO_enumWritePortVal+0x6>
    2228:	1f 92       	push	r1
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	84 30       	cpi	r24, 0x04	; 4
    223a:	68 f5       	brcc	.+90     	; 0x2296 <DIO_enumWritePortVal+0x74>
  {
    switch (Copy_u8PORT)
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	91 05       	cpc	r25, r1
    2246:	91 f0       	breq	.+36     	; 0x226c <DIO_enumWritePortVal+0x4a>
    2248:	82 30       	cpi	r24, 0x02	; 2
    224a:	91 05       	cpc	r25, r1
    224c:	1c f4       	brge	.+6      	; 0x2254 <DIO_enumWritePortVal+0x32>
    224e:	89 2b       	or	r24, r25
    2250:	39 f0       	breq	.+14     	; 0x2260 <DIO_enumWritePortVal+0x3e>
    2252:	1e c0       	rjmp	.+60     	; 0x2290 <DIO_enumWritePortVal+0x6e>
    2254:	82 30       	cpi	r24, 0x02	; 2
    2256:	91 05       	cpc	r25, r1
    2258:	79 f0       	breq	.+30     	; 0x2278 <DIO_enumWritePortVal+0x56>
    225a:	03 97       	sbiw	r24, 0x03	; 3
    225c:	99 f0       	breq	.+38     	; 0x2284 <DIO_enumWritePortVal+0x62>
    225e:	18 c0       	rjmp	.+48     	; 0x2290 <DIO_enumWritePortVal+0x6e>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    2260:	8b e3       	ldi	r24, 0x3B	; 59
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	2b 81       	ldd	r18, Y+3	; 0x03
    2266:	fc 01       	movw	r30, r24
    2268:	20 83       	st	Z, r18
      break;
    226a:	16 c0       	rjmp	.+44     	; 0x2298 <DIO_enumWritePortVal+0x76>
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    226c:	88 e3       	ldi	r24, 0x38	; 56
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	2b 81       	ldd	r18, Y+3	; 0x03
    2272:	fc 01       	movw	r30, r24
    2274:	20 83       	st	Z, r18
      break;
    2276:	10 c0       	rjmp	.+32     	; 0x2298 <DIO_enumWritePortVal+0x76>
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    2278:	85 e3       	ldi	r24, 0x35	; 53
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	2b 81       	ldd	r18, Y+3	; 0x03
    227e:	fc 01       	movw	r30, r24
    2280:	20 83       	st	Z, r18
      break;
    2282:	0a c0       	rjmp	.+20     	; 0x2298 <DIO_enumWritePortVal+0x76>
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    2284:	82 e3       	ldi	r24, 0x32	; 50
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	2b 81       	ldd	r18, Y+3	; 0x03
    228a:	fc 01       	movw	r30, r24
    228c:	20 83       	st	Z, r18
      break;
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <DIO_enumWritePortVal+0x76>
    default:
      LOC_enumState = DIO_NOK;
    2290:	19 82       	std	Y+1, r1	; 0x01
      break;
    2292:	00 00       	nop
    2294:	01 c0       	rjmp	.+2      	; 0x2298 <DIO_enumWritePortVal+0x76>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2296:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2298:	89 81       	ldd	r24, Y+1	; 0x01
}
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <DIO_enumReadPorVal+0x6>
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <DIO_enumReadPorVal+0x8>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	8a 83       	std	Y+2, r24	; 0x02
    22b4:	7c 83       	std	Y+4, r23	; 0x04
    22b6:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	84 30       	cpi	r24, 0x04	; 4
    22c0:	d0 f5       	brcc	.+116    	; 0x2336 <DIO_enumReadPorVal+0x90>
  {
    switch (Copy_u8PORT)
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	91 05       	cpc	r25, r1
    22cc:	a9 f0       	breq	.+42     	; 0x22f8 <DIO_enumReadPorVal+0x52>
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	91 05       	cpc	r25, r1
    22d2:	1c f4       	brge	.+6      	; 0x22da <DIO_enumReadPorVal+0x34>
    22d4:	89 2b       	or	r24, r25
    22d6:	39 f0       	breq	.+14     	; 0x22e6 <DIO_enumReadPorVal+0x40>
    22d8:	2a c0       	rjmp	.+84     	; 0x232e <DIO_enumReadPorVal+0x88>
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	91 05       	cpc	r25, r1
    22de:	a9 f0       	breq	.+42     	; 0x230a <DIO_enumReadPorVal+0x64>
    22e0:	03 97       	sbiw	r24, 0x03	; 3
    22e2:	e1 f0       	breq	.+56     	; 0x231c <DIO_enumReadPorVal+0x76>
    22e4:	24 c0       	rjmp	.+72     	; 0x232e <DIO_enumReadPorVal+0x88>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    22e6:	89 e3       	ldi	r24, 0x39	; 57
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	fc 01       	movw	r30, r24
    22ec:	20 81       	ld	r18, Z
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	fc 01       	movw	r30, r24
    22f4:	20 83       	st	Z, r18
      break;
    22f6:	1d c0       	rjmp	.+58     	; 0x2332 <DIO_enumReadPorVal+0x8c>
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    22f8:	86 e3       	ldi	r24, 0x36	; 54
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	fc 01       	movw	r30, r24
    22fe:	20 81       	ld	r18, Z
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	fc 01       	movw	r30, r24
    2306:	20 83       	st	Z, r18
      break;
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <DIO_enumReadPorVal+0x8c>
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    230a:	83 e3       	ldi	r24, 0x33	; 51
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	fc 01       	movw	r30, r24
    2310:	20 81       	ld	r18, Z
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	fc 01       	movw	r30, r24
    2318:	20 83       	st	Z, r18
      break;
    231a:	0b c0       	rjmp	.+22     	; 0x2332 <DIO_enumReadPorVal+0x8c>
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    231c:	80 e3       	ldi	r24, 0x30	; 48
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	fc 01       	movw	r30, r24
    2322:	20 81       	ld	r18, Z
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	fc 01       	movw	r30, r24
    232a:	20 83       	st	Z, r18
      break;
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <DIO_enumReadPorVal+0x8c>
    default:
      LOC_enumState = DIO_NOK;
    232e:	19 82       	std	Y+1, r1	; 0x01
      break;
    2330:	00 00       	nop
    }
    return LOC_enumState;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	02 c0       	rjmp	.+4      	; 0x233a <DIO_enumReadPorVal+0x94>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2336:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	00 d0       	rcall	.+0      	; 0x234e <DIO_enumTogglePortValue+0x6>
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	84 30       	cpi	r24, 0x04	; 4
    235c:	d8 f5       	brcc	.+118    	; 0x23d4 <DIO_enumTogglePortValue+0x8c>
  {
    switch (Copy_u8PORT)
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	91 05       	cpc	r25, r1
    2368:	b1 f0       	breq	.+44     	; 0x2396 <DIO_enumTogglePortValue+0x4e>
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	91 05       	cpc	r25, r1
    236e:	1c f4       	brge	.+6      	; 0x2376 <DIO_enumTogglePortValue+0x2e>
    2370:	89 2b       	or	r24, r25
    2372:	39 f0       	breq	.+14     	; 0x2382 <DIO_enumTogglePortValue+0x3a>
    2374:	30 c0       	rjmp	.+96     	; 0x23d6 <DIO_enumTogglePortValue+0x8e>
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	91 05       	cpc	r25, r1
    237a:	b9 f0       	breq	.+46     	; 0x23aa <DIO_enumTogglePortValue+0x62>
    237c:	03 97       	sbiw	r24, 0x03	; 3
    237e:	f9 f0       	breq	.+62     	; 0x23be <DIO_enumTogglePortValue+0x76>
    2380:	2a c0       	rjmp	.+84     	; 0x23d6 <DIO_enumTogglePortValue+0x8e>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    2382:	8b e3       	ldi	r24, 0x3B	; 59
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	fc 01       	movw	r30, r24
    2388:	20 81       	ld	r18, Z
    238a:	8b e3       	ldi	r24, 0x3B	; 59
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	20 95       	com	r18
    2390:	fc 01       	movw	r30, r24
    2392:	20 83       	st	Z, r18
      break;
    2394:	20 c0       	rjmp	.+64     	; 0x23d6 <DIO_enumTogglePortValue+0x8e>
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    2396:	88 e3       	ldi	r24, 0x38	; 56
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	fc 01       	movw	r30, r24
    239c:	20 81       	ld	r18, Z
    239e:	88 e3       	ldi	r24, 0x38	; 56
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	20 95       	com	r18
    23a4:	fc 01       	movw	r30, r24
    23a6:	20 83       	st	Z, r18
      break;
    23a8:	16 c0       	rjmp	.+44     	; 0x23d6 <DIO_enumTogglePortValue+0x8e>
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    23aa:	85 e3       	ldi	r24, 0x35	; 53
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	fc 01       	movw	r30, r24
    23b0:	20 81       	ld	r18, Z
    23b2:	85 e3       	ldi	r24, 0x35	; 53
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	20 95       	com	r18
    23b8:	fc 01       	movw	r30, r24
    23ba:	20 83       	st	Z, r18
      break;
    23bc:	0c c0       	rjmp	.+24     	; 0x23d6 <DIO_enumTogglePortValue+0x8e>
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    23be:	82 e3       	ldi	r24, 0x32	; 50
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	fc 01       	movw	r30, r24
    23c4:	20 81       	ld	r18, Z
    23c6:	82 e3       	ldi	r24, 0x32	; 50
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	20 95       	com	r18
    23cc:	fc 01       	movw	r30, r24
    23ce:	20 83       	st	Z, r18
      break;
    23d0:	00 00       	nop
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <DIO_enumTogglePortValue+0x8e>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    23d4:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	08 95       	ret

000023e2 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <DIO_vWriteLowNibble+0x6>
    23e8:	1f 92       	push	r1
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	8a 83       	std	Y+2, r24	; 0x02
    23f0:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	84 30       	cpi	r24, 0x04	; 4
    23fa:	08 f0       	brcs	.+2      	; 0x23fe <DIO_vWriteLowNibble+0x1c>
    23fc:	65 c0       	rjmp	.+202    	; 0x24c8 <DIO_vWriteLowNibble+0xe6>
  {
    value &= 0x0F;
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	8f 70       	andi	r24, 0x0F	; 15
    2402:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	91 05       	cpc	r25, r1
    240e:	01 f1       	breq	.+64     	; 0x2450 <DIO_vWriteLowNibble+0x6e>
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	91 05       	cpc	r25, r1
    2414:	1c f4       	brge	.+6      	; 0x241c <DIO_vWriteLowNibble+0x3a>
    2416:	89 2b       	or	r24, r25
    2418:	39 f0       	breq	.+14     	; 0x2428 <DIO_vWriteLowNibble+0x46>
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
      PORTD_REG |= value;
      break;
    default:
      break;
    241a:	57 c0       	rjmp	.+174    	; 0x24ca <DIO_vWriteLowNibble+0xe8>
  DIO_errorStatus LOC_enumState = DIO_OK;

  if ((Copy_u8PORT <= DIO_PORTD))
  {
    value &= 0x0F;
    switch (Copy_u8PORT)
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	91 05       	cpc	r25, r1
    2420:	59 f1       	breq	.+86     	; 0x2478 <DIO_vWriteLowNibble+0x96>
    2422:	03 97       	sbiw	r24, 0x03	; 3
    2424:	e9 f1       	breq	.+122    	; 0x24a0 <DIO_vWriteLowNibble+0xbe>
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
      PORTD_REG |= value;
      break;
    default:
      break;
    2426:	51 c0       	rjmp	.+162    	; 0x24ca <DIO_vWriteLowNibble+0xe8>
  {
    value &= 0x0F;
    switch (Copy_u8PORT)
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2428:	8b e3       	ldi	r24, 0x3B	; 59
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	fc 01       	movw	r30, r24
    242e:	20 81       	ld	r18, Z
    2430:	8b e3       	ldi	r24, 0x3B	; 59
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	20 7f       	andi	r18, 0xF0	; 240
    2436:	fc 01       	movw	r30, r24
    2438:	20 83       	st	Z, r18
      PORTA_REG |= value;
    243a:	8b e3       	ldi	r24, 0x3B	; 59
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	fc 01       	movw	r30, r24
    2440:	30 81       	ld	r19, Z
    2442:	8b e3       	ldi	r24, 0x3B	; 59
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	2b 81       	ldd	r18, Y+3	; 0x03
    2448:	23 2b       	or	r18, r19
    244a:	fc 01       	movw	r30, r24
    244c:	20 83       	st	Z, r18
      break;
    244e:	3d c0       	rjmp	.+122    	; 0x24ca <DIO_vWriteLowNibble+0xe8>
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2450:	88 e3       	ldi	r24, 0x38	; 56
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	fc 01       	movw	r30, r24
    2456:	20 81       	ld	r18, Z
    2458:	88 e3       	ldi	r24, 0x38	; 56
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	20 7f       	andi	r18, 0xF0	; 240
    245e:	fc 01       	movw	r30, r24
    2460:	20 83       	st	Z, r18
      PORTB_REG |= value;
    2462:	88 e3       	ldi	r24, 0x38	; 56
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	fc 01       	movw	r30, r24
    2468:	30 81       	ld	r19, Z
    246a:	88 e3       	ldi	r24, 0x38	; 56
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	2b 81       	ldd	r18, Y+3	; 0x03
    2470:	23 2b       	or	r18, r19
    2472:	fc 01       	movw	r30, r24
    2474:	20 83       	st	Z, r18
      break;
    2476:	29 c0       	rjmp	.+82     	; 0x24ca <DIO_vWriteLowNibble+0xe8>
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    2478:	85 e3       	ldi	r24, 0x35	; 53
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	fc 01       	movw	r30, r24
    247e:	20 81       	ld	r18, Z
    2480:	85 e3       	ldi	r24, 0x35	; 53
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	20 7f       	andi	r18, 0xF0	; 240
    2486:	fc 01       	movw	r30, r24
    2488:	20 83       	st	Z, r18
      PORTC_REG |= value;
    248a:	85 e3       	ldi	r24, 0x35	; 53
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	fc 01       	movw	r30, r24
    2490:	30 81       	ld	r19, Z
    2492:	85 e3       	ldi	r24, 0x35	; 53
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	2b 81       	ldd	r18, Y+3	; 0x03
    2498:	23 2b       	or	r18, r19
    249a:	fc 01       	movw	r30, r24
    249c:	20 83       	st	Z, r18
      break;
    249e:	15 c0       	rjmp	.+42     	; 0x24ca <DIO_vWriteLowNibble+0xe8>
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    24a0:	82 e3       	ldi	r24, 0x32	; 50
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	fc 01       	movw	r30, r24
    24a6:	20 81       	ld	r18, Z
    24a8:	82 e3       	ldi	r24, 0x32	; 50
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	20 7f       	andi	r18, 0xF0	; 240
    24ae:	fc 01       	movw	r30, r24
    24b0:	20 83       	st	Z, r18
      PORTD_REG |= value;
    24b2:	82 e3       	ldi	r24, 0x32	; 50
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	fc 01       	movw	r30, r24
    24b8:	30 81       	ld	r19, Z
    24ba:	82 e3       	ldi	r24, 0x32	; 50
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	2b 81       	ldd	r18, Y+3	; 0x03
    24c0:	23 2b       	or	r18, r19
    24c2:	fc 01       	movw	r30, r24
    24c4:	20 83       	st	Z, r18
      break;
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <DIO_vWriteLowNibble+0xe8>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    24c8:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	08 95       	ret

000024d8 <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	00 d0       	rcall	.+0      	; 0x24de <DIO_vWriteHighNibble+0x6>
    24de:	1f 92       	push	r1
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	8a 83       	std	Y+2, r24	; 0x02
    24e6:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	08 f0       	brcs	.+2      	; 0x24f4 <DIO_vWriteHighNibble+0x1c>
    24f2:	66 c0       	rjmp	.+204    	; 0x25c0 <DIO_vWriteHighNibble+0xe8>
  {
    value <<= 4;
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	82 95       	swap	r24
    24f8:	80 7f       	andi	r24, 0xF0	; 240
    24fa:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	91 05       	cpc	r25, r1
    2506:	01 f1       	breq	.+64     	; 0x2548 <DIO_vWriteHighNibble+0x70>
    2508:	82 30       	cpi	r24, 0x02	; 2
    250a:	91 05       	cpc	r25, r1
    250c:	1c f4       	brge	.+6      	; 0x2514 <DIO_vWriteHighNibble+0x3c>
    250e:	89 2b       	or	r24, r25
    2510:	39 f0       	breq	.+14     	; 0x2520 <DIO_vWriteHighNibble+0x48>
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
      PORTD_REG |= value;
      break;
    default:
      break;
    2512:	57 c0       	rjmp	.+174    	; 0x25c2 <DIO_vWriteHighNibble+0xea>
  DIO_errorStatus LOC_enumState = DIO_OK;

  if ((Copy_u8PORT <= DIO_PORTD))
  {
    value <<= 4;
    switch (Copy_u8PORT)
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	91 05       	cpc	r25, r1
    2518:	59 f1       	breq	.+86     	; 0x2570 <DIO_vWriteHighNibble+0x98>
    251a:	03 97       	sbiw	r24, 0x03	; 3
    251c:	e9 f1       	breq	.+122    	; 0x2598 <DIO_vWriteHighNibble+0xc0>
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
      PORTD_REG |= value;
      break;
    default:
      break;
    251e:	51 c0       	rjmp	.+162    	; 0x25c2 <DIO_vWriteHighNibble+0xea>
  {
    value <<= 4;
    switch (Copy_u8PORT)
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    2520:	8b e3       	ldi	r24, 0x3B	; 59
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	fc 01       	movw	r30, r24
    2526:	20 81       	ld	r18, Z
    2528:	8b e3       	ldi	r24, 0x3B	; 59
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	2f 70       	andi	r18, 0x0F	; 15
    252e:	fc 01       	movw	r30, r24
    2530:	20 83       	st	Z, r18
      PORTA_REG|= value;
    2532:	8b e3       	ldi	r24, 0x3B	; 59
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	fc 01       	movw	r30, r24
    2538:	30 81       	ld	r19, Z
    253a:	8b e3       	ldi	r24, 0x3B	; 59
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	2b 81       	ldd	r18, Y+3	; 0x03
    2540:	23 2b       	or	r18, r19
    2542:	fc 01       	movw	r30, r24
    2544:	20 83       	st	Z, r18
      break;
    2546:	3d c0       	rjmp	.+122    	; 0x25c2 <DIO_vWriteHighNibble+0xea>
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    2548:	88 e3       	ldi	r24, 0x38	; 56
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	fc 01       	movw	r30, r24
    254e:	20 81       	ld	r18, Z
    2550:	88 e3       	ldi	r24, 0x38	; 56
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	2f 70       	andi	r18, 0x0F	; 15
    2556:	fc 01       	movw	r30, r24
    2558:	20 83       	st	Z, r18
      PORTB_REG |= value;
    255a:	88 e3       	ldi	r24, 0x38	; 56
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	fc 01       	movw	r30, r24
    2560:	30 81       	ld	r19, Z
    2562:	88 e3       	ldi	r24, 0x38	; 56
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	2b 81       	ldd	r18, Y+3	; 0x03
    2568:	23 2b       	or	r18, r19
    256a:	fc 01       	movw	r30, r24
    256c:	20 83       	st	Z, r18
      break;
    256e:	29 c0       	rjmp	.+82     	; 0x25c2 <DIO_vWriteHighNibble+0xea>
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    2570:	85 e3       	ldi	r24, 0x35	; 53
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	fc 01       	movw	r30, r24
    2576:	20 81       	ld	r18, Z
    2578:	85 e3       	ldi	r24, 0x35	; 53
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	2f 70       	andi	r18, 0x0F	; 15
    257e:	fc 01       	movw	r30, r24
    2580:	20 83       	st	Z, r18
      PORTC_REG |= value;
    2582:	85 e3       	ldi	r24, 0x35	; 53
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	fc 01       	movw	r30, r24
    2588:	30 81       	ld	r19, Z
    258a:	85 e3       	ldi	r24, 0x35	; 53
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	2b 81       	ldd	r18, Y+3	; 0x03
    2590:	23 2b       	or	r18, r19
    2592:	fc 01       	movw	r30, r24
    2594:	20 83       	st	Z, r18
      break;
    2596:	15 c0       	rjmp	.+42     	; 0x25c2 <DIO_vWriteHighNibble+0xea>
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    2598:	82 e3       	ldi	r24, 0x32	; 50
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	fc 01       	movw	r30, r24
    259e:	20 81       	ld	r18, Z
    25a0:	82 e3       	ldi	r24, 0x32	; 50
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	2f 70       	andi	r18, 0x0F	; 15
    25a6:	fc 01       	movw	r30, r24
    25a8:	20 83       	st	Z, r18
      PORTD_REG |= value;
    25aa:	82 e3       	ldi	r24, 0x32	; 50
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	fc 01       	movw	r30, r24
    25b0:	30 81       	ld	r19, Z
    25b2:	82 e3       	ldi	r24, 0x32	; 50
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	2b 81       	ldd	r18, Y+3	; 0x03
    25b8:	23 2b       	or	r18, r19
    25ba:	fc 01       	movw	r30, r24
    25bc:	20 83       	st	Z, r18
      break;
    25be:	01 c0       	rjmp	.+2      	; 0x25c2 <DIO_vWriteHighNibble+0xea>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    25c0:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	08 95       	ret

000025d0 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <DIO_vSetLowNibbleDir+0x6>
    25d6:	1f 92       	push	r1
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	8a 83       	std	Y+2, r24	; 0x02
    25de:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	84 30       	cpi	r24, 0x04	; 4
    25e8:	08 f0       	brcs	.+2      	; 0x25ec <DIO_vSetLowNibbleDir+0x1c>
    25ea:	65 c0       	rjmp	.+202    	; 0x26b6 <DIO_vSetLowNibbleDir+0xe6>
  {
    value &= 0x0F;
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	8f 70       	andi	r24, 0x0F	; 15
    25f0:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	81 30       	cpi	r24, 0x01	; 1
    25fa:	91 05       	cpc	r25, r1
    25fc:	01 f1       	breq	.+64     	; 0x263e <DIO_vSetLowNibbleDir+0x6e>
    25fe:	82 30       	cpi	r24, 0x02	; 2
    2600:	91 05       	cpc	r25, r1
    2602:	1c f4       	brge	.+6      	; 0x260a <DIO_vSetLowNibbleDir+0x3a>
    2604:	89 2b       	or	r24, r25
    2606:	39 f0       	breq	.+14     	; 0x2616 <DIO_vSetLowNibbleDir+0x46>
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
      DDRD_REG|= value;
      break;
    default:
      break;
    2608:	57 c0       	rjmp	.+174    	; 0x26b8 <DIO_vSetLowNibbleDir+0xe8>
  DIO_errorStatus LOC_enumState = DIO_OK;

  if ((Copy_u8PORT <= DIO_PORTD))
  {
    value &= 0x0F;
    switch (Copy_u8PORT)
    260a:	82 30       	cpi	r24, 0x02	; 2
    260c:	91 05       	cpc	r25, r1
    260e:	59 f1       	breq	.+86     	; 0x2666 <DIO_vSetLowNibbleDir+0x96>
    2610:	03 97       	sbiw	r24, 0x03	; 3
    2612:	e9 f1       	breq	.+122    	; 0x268e <DIO_vSetLowNibbleDir+0xbe>
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
      DDRD_REG|= value;
      break;
    default:
      break;
    2614:	51 c0       	rjmp	.+162    	; 0x26b8 <DIO_vSetLowNibbleDir+0xe8>
  {
    value &= 0x0F;
    switch (Copy_u8PORT)
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2616:	8a e3       	ldi	r24, 0x3A	; 58
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	fc 01       	movw	r30, r24
    261c:	20 81       	ld	r18, Z
    261e:	8a e3       	ldi	r24, 0x3A	; 58
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	20 7f       	andi	r18, 0xF0	; 240
    2624:	fc 01       	movw	r30, r24
    2626:	20 83       	st	Z, r18
      DDRA_REG |= value;
    2628:	8a e3       	ldi	r24, 0x3A	; 58
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	fc 01       	movw	r30, r24
    262e:	30 81       	ld	r19, Z
    2630:	8a e3       	ldi	r24, 0x3A	; 58
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	2b 81       	ldd	r18, Y+3	; 0x03
    2636:	23 2b       	or	r18, r19
    2638:	fc 01       	movw	r30, r24
    263a:	20 83       	st	Z, r18
      break;
    263c:	3d c0       	rjmp	.+122    	; 0x26b8 <DIO_vSetLowNibbleDir+0xe8>
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    263e:	87 e3       	ldi	r24, 0x37	; 55
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	fc 01       	movw	r30, r24
    2644:	20 81       	ld	r18, Z
    2646:	87 e3       	ldi	r24, 0x37	; 55
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	20 7f       	andi	r18, 0xF0	; 240
    264c:	fc 01       	movw	r30, r24
    264e:	20 83       	st	Z, r18
      DDRB_REG |= value;
    2650:	87 e3       	ldi	r24, 0x37	; 55
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	fc 01       	movw	r30, r24
    2656:	30 81       	ld	r19, Z
    2658:	87 e3       	ldi	r24, 0x37	; 55
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	2b 81       	ldd	r18, Y+3	; 0x03
    265e:	23 2b       	or	r18, r19
    2660:	fc 01       	movw	r30, r24
    2662:	20 83       	st	Z, r18
      break;
    2664:	29 c0       	rjmp	.+82     	; 0x26b8 <DIO_vSetLowNibbleDir+0xe8>
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    2666:	84 e3       	ldi	r24, 0x34	; 52
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	fc 01       	movw	r30, r24
    266c:	20 81       	ld	r18, Z
    266e:	84 e3       	ldi	r24, 0x34	; 52
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	20 7f       	andi	r18, 0xF0	; 240
    2674:	fc 01       	movw	r30, r24
    2676:	20 83       	st	Z, r18
      DDRC_REG |= value;
    2678:	84 e3       	ldi	r24, 0x34	; 52
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	fc 01       	movw	r30, r24
    267e:	30 81       	ld	r19, Z
    2680:	84 e3       	ldi	r24, 0x34	; 52
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	2b 81       	ldd	r18, Y+3	; 0x03
    2686:	23 2b       	or	r18, r19
    2688:	fc 01       	movw	r30, r24
    268a:	20 83       	st	Z, r18
      break;
    268c:	15 c0       	rjmp	.+42     	; 0x26b8 <DIO_vSetLowNibbleDir+0xe8>
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    268e:	81 e3       	ldi	r24, 0x31	; 49
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	fc 01       	movw	r30, r24
    2694:	20 81       	ld	r18, Z
    2696:	81 e3       	ldi	r24, 0x31	; 49
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	20 7f       	andi	r18, 0xF0	; 240
    269c:	fc 01       	movw	r30, r24
    269e:	20 83       	st	Z, r18
      DDRD_REG|= value;
    26a0:	81 e3       	ldi	r24, 0x31	; 49
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	fc 01       	movw	r30, r24
    26a6:	30 81       	ld	r19, Z
    26a8:	81 e3       	ldi	r24, 0x31	; 49
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	2b 81       	ldd	r18, Y+3	; 0x03
    26ae:	23 2b       	or	r18, r19
    26b0:	fc 01       	movw	r30, r24
    26b2:	20 83       	st	Z, r18
      break;
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <DIO_vSetLowNibbleDir+0xe8>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    26b6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <DIO_vSetHighNibbleDir+0x6>
    26cc:	1f 92       	push	r1
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	8a 83       	std	Y+2, r24	; 0x02
    26d4:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	84 30       	cpi	r24, 0x04	; 4
    26de:	08 f0       	brcs	.+2      	; 0x26e2 <DIO_vSetHighNibbleDir+0x1c>
    26e0:	66 c0       	rjmp	.+204    	; 0x27ae <DIO_vSetHighNibbleDir+0xe8>
  {
    value <<= 4;
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	82 95       	swap	r24
    26e6:	80 7f       	andi	r24, 0xF0	; 240
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	91 05       	cpc	r25, r1
    26f4:	01 f1       	breq	.+64     	; 0x2736 <DIO_vSetHighNibbleDir+0x70>
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	91 05       	cpc	r25, r1
    26fa:	1c f4       	brge	.+6      	; 0x2702 <DIO_vSetHighNibbleDir+0x3c>
    26fc:	89 2b       	or	r24, r25
    26fe:	39 f0       	breq	.+14     	; 0x270e <DIO_vSetHighNibbleDir+0x48>
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
      DDRD_REG |= value;
      break;
    default:
      break;
    2700:	57 c0       	rjmp	.+174    	; 0x27b0 <DIO_vSetHighNibbleDir+0xea>
  DIO_errorStatus LOC_enumState = DIO_OK;

  if ((Copy_u8PORT <= DIO_PORTD))
  {
    value <<= 4;
    switch (Copy_u8PORT)
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	91 05       	cpc	r25, r1
    2706:	59 f1       	breq	.+86     	; 0x275e <DIO_vSetHighNibbleDir+0x98>
    2708:	03 97       	sbiw	r24, 0x03	; 3
    270a:	e9 f1       	breq	.+122    	; 0x2786 <DIO_vSetHighNibbleDir+0xc0>
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
      DDRD_REG |= value;
      break;
    default:
      break;
    270c:	51 c0       	rjmp	.+162    	; 0x27b0 <DIO_vSetHighNibbleDir+0xea>
  {
    value <<= 4;
    switch (Copy_u8PORT)
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    270e:	8a e3       	ldi	r24, 0x3A	; 58
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	fc 01       	movw	r30, r24
    2714:	20 81       	ld	r18, Z
    2716:	8a e3       	ldi	r24, 0x3A	; 58
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	2f 70       	andi	r18, 0x0F	; 15
    271c:	fc 01       	movw	r30, r24
    271e:	20 83       	st	Z, r18
      DDRA_REG |= value;
    2720:	8a e3       	ldi	r24, 0x3A	; 58
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	fc 01       	movw	r30, r24
    2726:	30 81       	ld	r19, Z
    2728:	8a e3       	ldi	r24, 0x3A	; 58
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	23 2b       	or	r18, r19
    2730:	fc 01       	movw	r30, r24
    2732:	20 83       	st	Z, r18
      break;
    2734:	3d c0       	rjmp	.+122    	; 0x27b0 <DIO_vSetHighNibbleDir+0xea>
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    2736:	87 e3       	ldi	r24, 0x37	; 55
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	fc 01       	movw	r30, r24
    273c:	20 81       	ld	r18, Z
    273e:	87 e3       	ldi	r24, 0x37	; 55
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	2f 70       	andi	r18, 0x0F	; 15
    2744:	fc 01       	movw	r30, r24
    2746:	20 83       	st	Z, r18
      DDRB_REG |= value;
    2748:	87 e3       	ldi	r24, 0x37	; 55
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	fc 01       	movw	r30, r24
    274e:	30 81       	ld	r19, Z
    2750:	87 e3       	ldi	r24, 0x37	; 55
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	2b 81       	ldd	r18, Y+3	; 0x03
    2756:	23 2b       	or	r18, r19
    2758:	fc 01       	movw	r30, r24
    275a:	20 83       	st	Z, r18
      break;
    275c:	29 c0       	rjmp	.+82     	; 0x27b0 <DIO_vSetHighNibbleDir+0xea>
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    275e:	84 e3       	ldi	r24, 0x34	; 52
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	fc 01       	movw	r30, r24
    2764:	20 81       	ld	r18, Z
    2766:	84 e3       	ldi	r24, 0x34	; 52
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	2f 70       	andi	r18, 0x0F	; 15
    276c:	fc 01       	movw	r30, r24
    276e:	20 83       	st	Z, r18
      DDRC_REG |= value;
    2770:	84 e3       	ldi	r24, 0x34	; 52
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	fc 01       	movw	r30, r24
    2776:	30 81       	ld	r19, Z
    2778:	84 e3       	ldi	r24, 0x34	; 52
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	2b 81       	ldd	r18, Y+3	; 0x03
    277e:	23 2b       	or	r18, r19
    2780:	fc 01       	movw	r30, r24
    2782:	20 83       	st	Z, r18
      break;
    2784:	15 c0       	rjmp	.+42     	; 0x27b0 <DIO_vSetHighNibbleDir+0xea>
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    2786:	81 e3       	ldi	r24, 0x31	; 49
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	fc 01       	movw	r30, r24
    278c:	20 81       	ld	r18, Z
    278e:	81 e3       	ldi	r24, 0x31	; 49
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	2f 70       	andi	r18, 0x0F	; 15
    2794:	fc 01       	movw	r30, r24
    2796:	20 83       	st	Z, r18
      DDRD_REG |= value;
    2798:	81 e3       	ldi	r24, 0x31	; 49
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	fc 01       	movw	r30, r24
    279e:	30 81       	ld	r19, Z
    27a0:	81 e3       	ldi	r24, 0x31	; 49
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	2b 81       	ldd	r18, Y+3	; 0x03
    27a6:	23 2b       	or	r18, r19
    27a8:	fc 01       	movw	r30, r24
    27aa:	20 83       	st	Z, r18
      break;
    27ac:	01 c0       	rjmp	.+2      	; 0x27b0 <DIO_vSetHighNibbleDir+0xea>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    27ae:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	08 95       	ret

000027be <EEPROM_vWrite>:
Function Returns     : void
Function Arguments   : unsigned short address, unsigned char data
Function Description :  write one byte to the given  address.
*/
void EEPROM_vWrite(u16 address, u8 data)
{
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <EEPROM_vWrite+0x6>
    27c4:	1f 92       	push	r1
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	6b 83       	std	Y+3, r22	; 0x03
  /*set up address register*/
  EEAR_REG = address;
    27d0:	8e e3       	ldi	r24, 0x3E	; 62
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	29 81       	ldd	r18, Y+1	; 0x01
    27d6:	3a 81       	ldd	r19, Y+2	; 0x02
    27d8:	fc 01       	movw	r30, r24
    27da:	31 83       	std	Z+1, r19	; 0x01
    27dc:	20 83       	st	Z, r18
  /*set up data register*/
  EEDR_REG = data;
    27de:	8d e3       	ldi	r24, 0x3D	; 61
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	2b 81       	ldd	r18, Y+3	; 0x03
    27e4:	fc 01       	movw	r30, r24
    27e6:	20 83       	st	Z, r18
  /*write logical one to EEMWE*/
  SET_BIT(EECR_REG, EECR_EEMWE);
    27e8:	8c e3       	ldi	r24, 0x3C	; 60
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	fc 01       	movw	r30, r24
    27ee:	20 81       	ld	r18, Z
    27f0:	8c e3       	ldi	r24, 0x3C	; 60
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	24 60       	ori	r18, 0x04	; 4
    27f6:	fc 01       	movw	r30, r24
    27f8:	20 83       	st	Z, r18
  /*start EEPROM write by setting EEWE*/
  SET_BIT(EECR_REG, EECR_EEWE );
    27fa:	8c e3       	ldi	r24, 0x3C	; 60
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	fc 01       	movw	r30, r24
    2800:	20 81       	ld	r18, Z
    2802:	8c e3       	ldi	r24, 0x3C	; 60
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	22 60       	ori	r18, 0x02	; 2
    2808:	fc 01       	movw	r30, r24
    280a:	20 83       	st	Z, r18
  /* wait for completion of  write operation*/
  while (READ_BIT(EECR_REG, EECR_EEWE) == 1);
    280c:	00 00       	nop
    280e:	8c e3       	ldi	r24, 0x3C	; 60
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	fc 01       	movw	r30, r24
    2814:	80 81       	ld	r24, Z
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	95 95       	asr	r25
    281c:	87 95       	ror	r24
    281e:	81 70       	andi	r24, 0x01	; 1
    2820:	99 27       	eor	r25, r25
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	a1 f3       	breq	.-24     	; 0x280e <EEPROM_vWrite+0x50>
}
    2826:	00 00       	nop
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	08 95       	ret

00002834 <EEPROM_vRead>:
Function Returns     : unsigned char
Function Arguments   :  unsigned short address
Function Description :  read one byte from the given  address.
*/
u8 EEPROM_vRead(u16 address)
{
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	00 d0       	rcall	.+0      	; 0x283a <EEPROM_vRead+0x6>
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	9a 83       	std	Y+2, r25	; 0x02
    2840:	89 83       	std	Y+1, r24	; 0x01
  /*set up address register*/
  EEARL_REG = (char)address;
    2842:	8e e3       	ldi	r24, 0x3E	; 62
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	29 81       	ldd	r18, Y+1	; 0x01
    2848:	fc 01       	movw	r30, r24
    284a:	20 83       	st	Z, r18
  EEARH_REG = (char)(address >> 8);
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	29 2f       	mov	r18, r25
    2852:	33 27       	eor	r19, r19
    2854:	8f e3       	ldi	r24, 0x3F	; 63
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	fc 01       	movw	r30, r24
    285a:	20 83       	st	Z, r18
  /*start EEPROM read by setting EERE*/
  SET_BIT(EECR_REG, EECR_EERE);
    285c:	8c e3       	ldi	r24, 0x3C	; 60
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	fc 01       	movw	r30, r24
    2862:	20 81       	ld	r18, Z
    2864:	8c e3       	ldi	r24, 0x3C	; 60
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	21 60       	ori	r18, 0x01	; 1
    286a:	fc 01       	movw	r30, r24
    286c:	20 83       	st	Z, r18
  /*return data from data register*/
  return EEDR_REG;
    286e:	8d e3       	ldi	r24, 0x3D	; 61
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	fc 01       	movw	r30, r24
    2874:	80 81       	ld	r24, Z
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	08 95       	ret

00002880 <EXTI_vInit>:
 *                                             *-----------------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void EXTI_vInit(void)
{
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
        SET_BIT(MCUCR, 0);
        CLR_BIT(MCUCR, 1);

      #elif EXTI_SENSE_MODE == EXTI_FALLING_EDGE

        CLR_BIT(MCUCR, 0);
    2888:	85 e5       	ldi	r24, 0x55	; 85
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	fc 01       	movw	r30, r24
    288e:	20 81       	ld	r18, Z
    2890:	85 e5       	ldi	r24, 0x55	; 85
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	2e 7f       	andi	r18, 0xFE	; 254
    2896:	fc 01       	movw	r30, r24
    2898:	20 83       	st	Z, r18
        SET_BIT(MCUCR, 1);
    289a:	85 e5       	ldi	r24, 0x55	; 85
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	fc 01       	movw	r30, r24
    28a0:	20 81       	ld	r18, Z
    28a2:	85 e5       	ldi	r24, 0x55	; 85
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	22 60       	ori	r18, 0x02	; 2
    28a8:	fc 01       	movw	r30, r24
    28aa:	20 83       	st	Z, r18
        SET_BIT(MCUCSR, 6);

      #endif
    #endif
  #endif
}
    28ac:	00 00       	nop
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	08 95       	ret

000028b4 <EXTI_vSetSignal>:
 *		Copy_u8Line      => [EXTI_LINEx](x=0..2)
 *
 * return     : Nothing
 */
void EXTI_vSetSignal(u8 Copy_u8SenseMode, u8 Copy_u8Line)
{
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <EXTI_vSetSignal+0x6>
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	6a 83       	std	Y+2, r22	; 0x02
  if (Copy_u8Line >= EXTI_LINE0 && Copy_u8Line <= EXTI_LINE1)
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	86 30       	cpi	r24, 0x06	; 6
    28c6:	08 f4       	brcc	.+2      	; 0x28ca <EXTI_vSetSignal+0x16>
    28c8:	e2 c0       	rjmp	.+452    	; 0x2a8e <EXTI_vSetSignal+0x1da>
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	88 30       	cpi	r24, 0x08	; 8
    28ce:	08 f0       	brcs	.+2      	; 0x28d2 <EXTI_vSetSignal+0x1e>
    28d0:	de c0       	rjmp	.+444    	; 0x2a8e <EXTI_vSetSignal+0x1da>
  {
    Copy_u8Line = (6 - Copy_u8Line) * -2;
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	26 e0       	ldi	r18, 0x06	; 6
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	a9 01       	movw	r20, r18
    28de:	48 1b       	sub	r20, r24
    28e0:	59 0b       	sbc	r21, r25
    28e2:	ca 01       	movw	r24, r20
    28e4:	98 2f       	mov	r25, r24
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	89 1b       	sub	r24, r25
    28ea:	88 0f       	add	r24, r24
    28ec:	8a 83       	std	Y+2, r24	; 0x02

    switch (Copy_u8SenseMode)
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	88 2f       	mov	r24, r24
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	81 30       	cpi	r24, 0x01	; 1
    28f6:	91 05       	cpc	r25, r1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <EXTI_vSetSignal+0x48>
    28fa:	9b c0       	rjmp	.+310    	; 0x2a32 <EXTI_vSetSignal+0x17e>
    28fc:	82 30       	cpi	r24, 0x02	; 2
    28fe:	91 05       	cpc	r25, r1
    2900:	24 f4       	brge	.+8      	; 0x290a <EXTI_vSetSignal+0x56>
    2902:	89 2b       	or	r24, r25
    2904:	09 f4       	brne	.+2      	; 0x2908 <EXTI_vSetSignal+0x54>
    2906:	66 c0       	rjmp	.+204    	; 0x29d4 <EXTI_vSetSignal+0x120>
    2908:	c2 c0       	rjmp	.+388    	; 0x2a8e <EXTI_vSetSignal+0x1da>
    290a:	82 30       	cpi	r24, 0x02	; 2
    290c:	91 05       	cpc	r25, r1
    290e:	19 f0       	breq	.+6      	; 0x2916 <EXTI_vSetSignal+0x62>
    2910:	03 97       	sbiw	r24, 0x03	; 3
    2912:	89 f1       	breq	.+98     	; 0x2976 <EXTI_vSetSignal+0xc2>
    2914:	bc c0       	rjmp	.+376    	; 0x2a8e <EXTI_vSetSignal+0x1da>
    {
    case EXTI_LOW_LEVEL:
      CLR_BIT(MCUCR, Copy_u8Line);
    2916:	85 e5       	ldi	r24, 0x55	; 85
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	fc 01       	movw	r30, r24
    291c:	80 81       	ld	r24, Z
    291e:	48 2f       	mov	r20, r24
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <EXTI_vSetSignal+0x7c>
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	2a 95       	dec	r18
    2932:	e2 f7       	brpl	.-8      	; 0x292c <EXTI_vSetSignal+0x78>
    2934:	80 95       	com	r24
    2936:	24 2f       	mov	r18, r20
    2938:	28 23       	and	r18, r24
    293a:	85 e5       	ldi	r24, 0x55	; 85
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	fc 01       	movw	r30, r24
    2940:	20 83       	st	Z, r18
      CLR_BIT(MCUCR, Copy_u8Line + 1);
    2942:	85 e5       	ldi	r24, 0x55	; 85
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	fc 01       	movw	r30, r24
    2948:	80 81       	ld	r24, Z
    294a:	48 2f       	mov	r20, r24
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	9c 01       	movw	r18, r24
    2954:	2f 5f       	subi	r18, 0xFF	; 255
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <EXTI_vSetSignal+0xae>
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	2a 95       	dec	r18
    2964:	e2 f7       	brpl	.-8      	; 0x295e <EXTI_vSetSignal+0xaa>
    2966:	80 95       	com	r24
    2968:	24 2f       	mov	r18, r20
    296a:	28 23       	and	r18, r24
    296c:	85 e5       	ldi	r24, 0x55	; 85
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	fc 01       	movw	r30, r24
    2972:	20 83       	st	Z, r18
      break;
    2974:	8c c0       	rjmp	.+280    	; 0x2a8e <EXTI_vSetSignal+0x1da>
    case EXTI_ON_CHANGE:
      SET_BIT(MCUCR, Copy_u8Line);
    2976:	85 e5       	ldi	r24, 0x55	; 85
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	fc 01       	movw	r30, r24
    297c:	80 81       	ld	r24, Z
    297e:	48 2f       	mov	r20, r24
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <EXTI_vSetSignal+0xdc>
    298c:	88 0f       	add	r24, r24
    298e:	99 1f       	adc	r25, r25
    2990:	2a 95       	dec	r18
    2992:	e2 f7       	brpl	.-8      	; 0x298c <EXTI_vSetSignal+0xd8>
    2994:	24 2f       	mov	r18, r20
    2996:	28 2b       	or	r18, r24
    2998:	85 e5       	ldi	r24, 0x55	; 85
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	fc 01       	movw	r30, r24
    299e:	20 83       	st	Z, r18
      CLR_BIT(MCUCR, Copy_u8Line + 1);
    29a0:	85 e5       	ldi	r24, 0x55	; 85
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	fc 01       	movw	r30, r24
    29a6:	80 81       	ld	r24, Z
    29a8:	48 2f       	mov	r20, r24
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	88 2f       	mov	r24, r24
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9c 01       	movw	r18, r24
    29b2:	2f 5f       	subi	r18, 0xFF	; 255
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <EXTI_vSetSignal+0x10c>
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	2a 95       	dec	r18
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <EXTI_vSetSignal+0x108>
    29c4:	80 95       	com	r24
    29c6:	24 2f       	mov	r18, r20
    29c8:	28 23       	and	r18, r24
    29ca:	85 e5       	ldi	r24, 0x55	; 85
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	fc 01       	movw	r30, r24
    29d0:	20 83       	st	Z, r18
      break;
    29d2:	5d c0       	rjmp	.+186    	; 0x2a8e <EXTI_vSetSignal+0x1da>
    case EXTI_FALLING_EDGE:
      CLR_BIT(MCUCR, Copy_u8Line);
    29d4:	85 e5       	ldi	r24, 0x55	; 85
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	fc 01       	movw	r30, r24
    29da:	80 81       	ld	r24, Z
    29dc:	48 2f       	mov	r20, r24
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <EXTI_vSetSignal+0x13a>
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	2a 95       	dec	r18
    29f0:	e2 f7       	brpl	.-8      	; 0x29ea <EXTI_vSetSignal+0x136>
    29f2:	80 95       	com	r24
    29f4:	24 2f       	mov	r18, r20
    29f6:	28 23       	and	r18, r24
    29f8:	85 e5       	ldi	r24, 0x55	; 85
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	fc 01       	movw	r30, r24
    29fe:	20 83       	st	Z, r18
      SET_BIT(MCUCR, Copy_u8Line + 1);
    2a00:	85 e5       	ldi	r24, 0x55	; 85
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	fc 01       	movw	r30, r24
    2a06:	80 81       	ld	r24, Z
    2a08:	48 2f       	mov	r20, r24
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	88 2f       	mov	r24, r24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9c 01       	movw	r18, r24
    2a12:	2f 5f       	subi	r18, 0xFF	; 255
    2a14:	3f 4f       	sbci	r19, 0xFF	; 255
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <EXTI_vSetSignal+0x16c>
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	2a 95       	dec	r18
    2a22:	e2 f7       	brpl	.-8      	; 0x2a1c <EXTI_vSetSignal+0x168>
    2a24:	24 2f       	mov	r18, r20
    2a26:	28 2b       	or	r18, r24
    2a28:	85 e5       	ldi	r24, 0x55	; 85
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	20 83       	st	Z, r18
      break;
    2a30:	2e c0       	rjmp	.+92     	; 0x2a8e <EXTI_vSetSignal+0x1da>
    case EXTI_RISING_EDGE:
      SET_BIT(MCUCR, Copy_u8Line);
    2a32:	85 e5       	ldi	r24, 0x55	; 85
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	fc 01       	movw	r30, r24
    2a38:	80 81       	ld	r24, Z
    2a3a:	48 2f       	mov	r20, r24
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <EXTI_vSetSignal+0x198>
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	2a 95       	dec	r18
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <EXTI_vSetSignal+0x194>
    2a50:	24 2f       	mov	r18, r20
    2a52:	28 2b       	or	r18, r24
    2a54:	85 e5       	ldi	r24, 0x55	; 85
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	fc 01       	movw	r30, r24
    2a5a:	20 83       	st	Z, r18
      SET_BIT(MCUCR, Copy_u8Line + 1);
    2a5c:	85 e5       	ldi	r24, 0x55	; 85
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	fc 01       	movw	r30, r24
    2a62:	80 81       	ld	r24, Z
    2a64:	48 2f       	mov	r20, r24
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	88 2f       	mov	r24, r24
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9c 01       	movw	r18, r24
    2a6e:	2f 5f       	subi	r18, 0xFF	; 255
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <EXTI_vSetSignal+0x1c8>
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	2a 95       	dec	r18
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <EXTI_vSetSignal+0x1c4>
    2a80:	24 2f       	mov	r18, r20
    2a82:	28 2b       	or	r18, r24
    2a84:	85 e5       	ldi	r24, 0x55	; 85
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	fc 01       	movw	r30, r24
    2a8a:	20 83       	st	Z, r18
      break;
    2a8c:	00 00       	nop
    }
  }
  if (Copy_u8Line == EXTI_LINE2)
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	85 30       	cpi	r24, 0x05	; 5
    2a92:	e1 f4       	brne	.+56     	; 0x2acc <EXTI_vSetSignal+0x218>
  {
    switch (Copy_u8SenseMode)
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	19 f0       	breq	.+6      	; 0x2aa4 <EXTI_vSetSignal+0x1f0>
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	59 f0       	breq	.+22     	; 0x2ab8 <EXTI_vSetSignal+0x204>
      SET_BIT(MCUCSR, 6);
      break;
      ;
    }
  }
}
    2aa2:	14 c0       	rjmp	.+40     	; 0x2acc <EXTI_vSetSignal+0x218>
  if (Copy_u8Line == EXTI_LINE2)
  {
    switch (Copy_u8SenseMode)
    {
    case EXTI_FALLING_EDGE:
      CLR_BIT(MCUCSR, 6);
    2aa4:	84 e5       	ldi	r24, 0x54	; 84
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	20 81       	ld	r18, Z
    2aac:	84 e5       	ldi	r24, 0x54	; 84
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	2f 7b       	andi	r18, 0xBF	; 191
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	20 83       	st	Z, r18
      break;
    2ab6:	0a c0       	rjmp	.+20     	; 0x2acc <EXTI_vSetSignal+0x218>
    case EXTI_RISING_EDGE:
      SET_BIT(MCUCSR, 6);
    2ab8:	84 e5       	ldi	r24, 0x54	; 84
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	fc 01       	movw	r30, r24
    2abe:	20 81       	ld	r18, Z
    2ac0:	84 e5       	ldi	r24, 0x54	; 84
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	20 64       	ori	r18, 0x40	; 64
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	20 83       	st	Z, r18
      break;
    2aca:	00 00       	nop
      ;
    }
  }
}
    2acc:	00 00       	nop
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	08 95       	ret

00002ad8 <EXTI_vDisableInterrupt>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Error status with type u8
 */
u8 EXTI_vDisableInterrupt(u8 Copy_u8Line)
{
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <EXTI_vDisableInterrupt+0x6>
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2ae4:	19 82       	std	Y+1, r1	; 0x01
  if ((Copy_u8Line == EXTI_LINE0) || (Copy_u8Line == EXTI_LINE1) || (Copy_u8Line == EXTI_LINE2))
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	86 30       	cpi	r24, 0x06	; 6
    2aea:	31 f0       	breq	.+12     	; 0x2af8 <EXTI_vDisableInterrupt+0x20>
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	87 30       	cpi	r24, 0x07	; 7
    2af0:	19 f0       	breq	.+6      	; 0x2af8 <EXTI_vDisableInterrupt+0x20>
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	85 30       	cpi	r24, 0x05	; 5
    2af6:	b9 f4       	brne	.+46     	; 0x2b26 <EXTI_vDisableInterrupt+0x4e>
  {
    /* Clear The Required BIT */
    CLR_BIT(GICR, Copy_u8Line);
    2af8:	8b e5       	ldi	r24, 0x5B	; 91
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	fc 01       	movw	r30, r24
    2afe:	80 81       	ld	r24, Z
    2b00:	48 2f       	mov	r20, r24
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <EXTI_vDisableInterrupt+0x3a>
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	2a 95       	dec	r18
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <EXTI_vDisableInterrupt+0x36>
    2b16:	80 95       	com	r24
    2b18:	24 2f       	mov	r18, r20
    2b1a:	28 23       	and	r18, r24
    2b1c:	8b e5       	ldi	r24, 0x5B	; 91
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	fc 01       	movw	r30, r24
    2b22:	20 83       	st	Z, r18
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <EXTI_vDisableInterrupt+0x52>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	08 95       	ret

00002b36 <EXTI_vEnableInterrupt>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Error status with type u8
 */
u8 EXTI_vEnableInterrupt(u8 Copy_u8Line)
{
    2b36:	cf 93       	push	r28
    2b38:	df 93       	push	r29
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <EXTI_vEnableInterrupt+0x6>
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2b42:	19 82       	std	Y+1, r1	; 0x01
  if ((Copy_u8Line == EXTI_LINE0) || (Copy_u8Line == EXTI_LINE1) || (Copy_u8Line == EXTI_LINE2))
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	86 30       	cpi	r24, 0x06	; 6
    2b48:	31 f0       	breq	.+12     	; 0x2b56 <EXTI_vEnableInterrupt+0x20>
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	87 30       	cpi	r24, 0x07	; 7
    2b4e:	19 f0       	breq	.+6      	; 0x2b56 <EXTI_vEnableInterrupt+0x20>
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	85 30       	cpi	r24, 0x05	; 5
    2b54:	b1 f4       	brne	.+44     	; 0x2b82 <EXTI_vEnableInterrupt+0x4c>
  {
    SET_BIT(GICR, Copy_u8Line);
    2b56:	8b e5       	ldi	r24, 0x5B	; 91
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	80 81       	ld	r24, Z
    2b5e:	48 2f       	mov	r20, r24
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <EXTI_vEnableInterrupt+0x3a>
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	2a 95       	dec	r18
    2b72:	e2 f7       	brpl	.-8      	; 0x2b6c <EXTI_vEnableInterrupt+0x36>
    2b74:	24 2f       	mov	r18, r20
    2b76:	28 2b       	or	r18, r24
    2b78:	8b e5       	ldi	r24, 0x5B	; 91
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	20 83       	st	Z, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <EXTI_vEnableInterrupt+0x50>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	08 95       	ret

00002b92 <EXTI_vClearFlag>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : nothing
 */
void EXTI_vClearFlag(u8 Copy_u8Line)
{
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	1f 92       	push	r1
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	89 83       	std	Y+1, r24	; 0x01
  SET_BIT(GIFR, Copy_u8Line);
    2b9e:	8a e5       	ldi	r24, 0x5A	; 90
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	80 81       	ld	r24, Z
    2ba6:	48 2f       	mov	r20, r24
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	28 2f       	mov	r18, r24
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <EXTI_vClearFlag+0x26>
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	2a 95       	dec	r18
    2bba:	e2 f7       	brpl	.-8      	; 0x2bb4 <EXTI_vClearFlag+0x22>
    2bbc:	24 2f       	mov	r18, r20
    2bbe:	28 2b       	or	r18, r24
    2bc0:	8a e5       	ldi	r24, 0x5A	; 90
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	20 83       	st	Z, r18
}
    2bc8:	00 00       	nop
    2bca:	0f 90       	pop	r0
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	08 95       	ret

00002bd2 <EXTI_u8GETFlag>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Reading value
 */
u8 EXTI_u8GETFlag(u8 Copy_u8Line)
{
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	1f 92       	push	r1
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	89 83       	std	Y+1, r24	; 0x01

  return READ_BIT(GIFR, Copy_u8Line);
    2bde:	8a e5       	ldi	r24, 0x5A	; 90
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	fc 01       	movw	r30, r24
    2be4:	80 81       	ld	r24, Z
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	48 2f       	mov	r20, r24
    2bee:	50 e0       	ldi	r21, 0x00	; 0
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <EXTI_u8GETFlag+0x28>
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	4a 95       	dec	r20
    2bfc:	e2 f7       	brpl	.-8      	; 0x2bf6 <EXTI_u8GETFlag+0x24>
    2bfe:	82 23       	and	r24, r18
    2c00:	93 23       	and	r25, r19
    2c02:	29 81       	ldd	r18, Y+1	; 0x01
    2c04:	22 2f       	mov	r18, r18
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <EXTI_u8GETFlag+0x3c>
    2c0a:	95 95       	asr	r25
    2c0c:	87 95       	ror	r24
    2c0e:	2a 95       	dec	r18
    2c10:	e2 f7       	brpl	.-8      	; 0x2c0a <EXTI_u8GETFlag+0x38>
}
    2c12:	0f 90       	pop	r0
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	08 95       	ret

00002c1a <EXTI_vSetCallBack>:
 * 		Copy_u8Line        => [EXTI_LINE0 , EXTI_LINE1 , EXTI_LINE2]
 *
 * return     : Error status with type u8
 */
u8 EXTI_vSetCallBack(void (*Copy_pvCallBack)(void), u8 Copy_u8Line)
{
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <EXTI_vSetCallBack+0x6>
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <EXTI_vSetCallBack+0x8>
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	9b 83       	std	Y+3, r25	; 0x03
    2c28:	8a 83       	std	Y+2, r24	; 0x02
    2c2a:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    2c2c:	19 82       	std	Y+1, r1	; 0x01
  if (Copy_pvCallBack != NULL)
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	89 2b       	or	r24, r25
    2c34:	09 f1       	breq	.+66     	; 0x2c78 <EXTI_vSetCallBack+0x5e>
  {
    if (Copy_u8Line == EXTI_LINE0)
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	86 30       	cpi	r24, 0x06	; 6
    2c3a:	39 f4       	brne	.+14     	; 0x2c4a <EXTI_vSetCallBack+0x30>
    {

      EXTI_CallBack[0] = Copy_pvCallBack;
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c40:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <EXTI_CallBack+0x1>
    2c44:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <EXTI_CallBack>
    2c48:	19 c0       	rjmp	.+50     	; 0x2c7c <EXTI_vSetCallBack+0x62>
    }
    else if (Copy_u8Line == EXTI_LINE1)
    2c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4c:	87 30       	cpi	r24, 0x07	; 7
    2c4e:	39 f4       	brne	.+14     	; 0x2c5e <EXTI_vSetCallBack+0x44>
    {

      EXTI_CallBack[1] = Copy_pvCallBack;
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	9b 81       	ldd	r25, Y+3	; 0x03
    2c54:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <EXTI_CallBack+0x3>
    2c58:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <EXTI_CallBack+0x2>
    2c5c:	0f c0       	rjmp	.+30     	; 0x2c7c <EXTI_vSetCallBack+0x62>
    }
    else if (Copy_u8Line == EXTI_LINE2)
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	85 30       	cpi	r24, 0x05	; 5
    2c62:	39 f4       	brne	.+14     	; 0x2c72 <EXTI_vSetCallBack+0x58>
    {

      EXTI_CallBack[2] = Copy_pvCallBack;
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <EXTI_CallBack+0x5>
    2c6c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <EXTI_CallBack+0x4>
    2c70:	05 c0       	rjmp	.+10     	; 0x2c7c <EXTI_vSetCallBack+0x62>
    }
    else
    {
      Local_u8ErrorState = NOK;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <EXTI_vSetCallBack+0x62>
    }
  }
  else
  {
    Local_u8ErrorState = NOK;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <__vector_1>:

/* ISR --> Implementation */

void __vector_1(void)              __attribute__((signal));
void __vector_1(void)
{
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	2f 93       	push	r18
    2c98:	3f 93       	push	r19
    2c9a:	4f 93       	push	r20
    2c9c:	5f 93       	push	r21
    2c9e:	6f 93       	push	r22
    2ca0:	7f 93       	push	r23
    2ca2:	8f 93       	push	r24
    2ca4:	9f 93       	push	r25
    2ca6:	af 93       	push	r26
    2ca8:	bf 93       	push	r27
    2caa:	ef 93       	push	r30
    2cac:	ff 93       	push	r31
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[0] != NULL)
    2cb6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <EXTI_CallBack>
    2cba:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <EXTI_CallBack+0x1>
    2cbe:	89 2b       	or	r24, r25
    2cc0:	49 f0       	breq	.+18     	; 0x2cd4 <__vector_1+0x48>
  {

    EXTI_CallBack[0]();
    2cc2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <EXTI_CallBack>
    2cc6:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <EXTI_CallBack+0x1>
    2cca:	fc 01       	movw	r30, r24
    2ccc:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE0);
    2cce:	86 e0       	ldi	r24, 0x06	; 6
    2cd0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <EXTI_vClearFlag>
  }
}
    2cd4:	00 00       	nop
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	ff 91       	pop	r31
    2cdc:	ef 91       	pop	r30
    2cde:	bf 91       	pop	r27
    2ce0:	af 91       	pop	r26
    2ce2:	9f 91       	pop	r25
    2ce4:	8f 91       	pop	r24
    2ce6:	7f 91       	pop	r23
    2ce8:	6f 91       	pop	r22
    2cea:	5f 91       	pop	r21
    2cec:	4f 91       	pop	r20
    2cee:	3f 91       	pop	r19
    2cf0:	2f 91       	pop	r18
    2cf2:	0f 90       	pop	r0
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	0f 90       	pop	r0
    2cf8:	1f 90       	pop	r1
    2cfa:	18 95       	reti

00002cfc <__vector_2>:

void __vector_2(void)            __attribute__((signal));
void __vector_2(void)
{
    2cfc:	1f 92       	push	r1
    2cfe:	0f 92       	push	r0
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	0f 92       	push	r0
    2d04:	11 24       	eor	r1, r1
    2d06:	2f 93       	push	r18
    2d08:	3f 93       	push	r19
    2d0a:	4f 93       	push	r20
    2d0c:	5f 93       	push	r21
    2d0e:	6f 93       	push	r22
    2d10:	7f 93       	push	r23
    2d12:	8f 93       	push	r24
    2d14:	9f 93       	push	r25
    2d16:	af 93       	push	r26
    2d18:	bf 93       	push	r27
    2d1a:	ef 93       	push	r30
    2d1c:	ff 93       	push	r31
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[1] != NULL)
    2d26:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <EXTI_CallBack+0x2>
    2d2a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <EXTI_CallBack+0x3>
    2d2e:	89 2b       	or	r24, r25
    2d30:	49 f0       	breq	.+18     	; 0x2d44 <__vector_2+0x48>
  {

    EXTI_CallBack[1]();
    2d32:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <EXTI_CallBack+0x2>
    2d36:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <EXTI_CallBack+0x3>
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE1);
    2d3e:	87 e0       	ldi	r24, 0x07	; 7
    2d40:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <EXTI_vClearFlag>
  }
}
    2d44:	00 00       	nop
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	ff 91       	pop	r31
    2d4c:	ef 91       	pop	r30
    2d4e:	bf 91       	pop	r27
    2d50:	af 91       	pop	r26
    2d52:	9f 91       	pop	r25
    2d54:	8f 91       	pop	r24
    2d56:	7f 91       	pop	r23
    2d58:	6f 91       	pop	r22
    2d5a:	5f 91       	pop	r21
    2d5c:	4f 91       	pop	r20
    2d5e:	3f 91       	pop	r19
    2d60:	2f 91       	pop	r18
    2d62:	0f 90       	pop	r0
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	0f 90       	pop	r0
    2d68:	1f 90       	pop	r1
    2d6a:	18 95       	reti

00002d6c <__vector_3>:

void __vector_3(void)              __attribute__((signal));
void __vector_3(void) 
{
    2d6c:	1f 92       	push	r1
    2d6e:	0f 92       	push	r0
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	0f 92       	push	r0
    2d74:	11 24       	eor	r1, r1
    2d76:	2f 93       	push	r18
    2d78:	3f 93       	push	r19
    2d7a:	4f 93       	push	r20
    2d7c:	5f 93       	push	r21
    2d7e:	6f 93       	push	r22
    2d80:	7f 93       	push	r23
    2d82:	8f 93       	push	r24
    2d84:	9f 93       	push	r25
    2d86:	af 93       	push	r26
    2d88:	bf 93       	push	r27
    2d8a:	ef 93       	push	r30
    2d8c:	ff 93       	push	r31
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[2] != NULL)
    2d96:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <EXTI_CallBack+0x4>
    2d9a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <EXTI_CallBack+0x5>
    2d9e:	89 2b       	or	r24, r25
    2da0:	49 f0       	breq	.+18     	; 0x2db4 <__vector_3+0x48>
  {

    EXTI_CallBack[2]();
    2da2:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <EXTI_CallBack+0x4>
    2da6:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <EXTI_CallBack+0x5>
    2daa:	fc 01       	movw	r30, r24
    2dac:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE2);
    2dae:	85 e0       	ldi	r24, 0x05	; 5
    2db0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <EXTI_vClearFlag>
  }
}
    2db4:	00 00       	nop
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	ff 91       	pop	r31
    2dbc:	ef 91       	pop	r30
    2dbe:	bf 91       	pop	r27
    2dc0:	af 91       	pop	r26
    2dc2:	9f 91       	pop	r25
    2dc4:	8f 91       	pop	r24
    2dc6:	7f 91       	pop	r23
    2dc8:	6f 91       	pop	r22
    2dca:	5f 91       	pop	r21
    2dcc:	4f 91       	pop	r20
    2dce:	3f 91       	pop	r19
    2dd0:	2f 91       	pop	r18
    2dd2:	0f 90       	pop	r0
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	0f 90       	pop	r0
    2dd8:	1f 90       	pop	r1
    2dda:	18 95       	reti

00002ddc <GIE_vEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vEnable(void)
{
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG, SREG_I_BIT);
    2de4:	8f e5       	ldi	r24, 0x5F	; 95
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	fc 01       	movw	r30, r24
    2dea:	20 81       	ld	r18, Z
    2dec:	8f e5       	ldi	r24, 0x5F	; 95
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	20 68       	ori	r18, 0x80	; 128
    2df2:	fc 01       	movw	r30, r24
    2df4:	20 83       	st	Z, r18
}
    2df6:	00 00       	nop
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	08 95       	ret

00002dfe <GIE_vDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vDisable(void)
{
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG, SREG_I_BIT);
    2e06:	8f e5       	ldi	r24, 0x5F	; 95
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	20 81       	ld	r18, Z
    2e0e:	8f e5       	ldi	r24, 0x5F	; 95
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	2f 77       	andi	r18, 0x7F	; 127
    2e14:	fc 01       	movw	r30, r24
    2e16:	20 83       	st	Z, r18
}
    2e18:	00 00       	nop
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	08 95       	ret

00002e20 <System_vInit>:
#include "../Inc/MCAL_Layer/EXTI/EXTI_interface.h"
#include "../Inc/MCAL_Layer/USART/USART_interface.h"


void System_vInit(void)
{
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
  ADC_vInit();
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
  GIE_vEnable();
    2e2c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <GIE_vEnable>
  USART_vInit();
    2e30:	0e 94 31 17 	call	0x2e62	; 0x2e62 <USART_vInit>
  CLCD_vInit();
    2e34:	0e 94 08 04 	call	0x810	; 0x810 <CLCD_vInit>

  EXTI_vEnableInterrupt(EXTI_LINE0);
    2e38:	86 e0       	ldi	r24, 0x06	; 6
    2e3a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <EXTI_vEnableInterrupt>
  EXTI_vSetSignal(EXTI_FALLING_EDGE, EXTI_LINE0);
    2e3e:	66 e0       	ldi	r22, 0x06	; 6
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <EXTI_vSetSignal>
  EXTI_vSetCallBack(ISR_EXTI_INT, EXTI_LINE0);
    2e46:	66 e0       	ldi	r22, 0x06	; 6
    2e48:	8c ec       	ldi	r24, 0xCC	; 204
    2e4a:	9a e1       	ldi	r25, 0x1A	; 26
    2e4c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <EXTI_vSetCallBack>
  DIO_enumConnectPullUp(DIO_PORTD, DIO_PIN2, DIO_PIN_HIGH);
    2e50:	41 e0       	ldi	r20, 0x01	; 1
    2e52:	62 e0       	ldi	r22, 0x02	; 2
    2e54:	83 e0       	ldi	r24, 0x03	; 3
    2e56:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_enumConnectPullUp>
}
    2e5a:	00 00       	nop
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	08 95       	ret

00002e62 <USART_vInit>:
 * Breif      : This Function initialize USART depend on config.h
 * Parameters :  Nothing
 * return     :  Nothing
 */
void USART_vInit(void)
{
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <USART_vInit+0x6>
    2e68:	1f 92       	push	r1
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
  /* We will adjust this value according to the configrations then store it in UCSRC in one operation */
  u8 Local_u8UCSRC = 0;
    2e6e:	19 82       	std	Y+1, r1	; 0x01

  /***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_1X)

  CLR_BIT(UCSRA, UCSRA_U2X);
    2e70:	8b e2       	ldi	r24, 0x2B	; 43
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	fc 01       	movw	r30, r24
    2e76:	20 81       	ld	r18, Z
    2e78:	8b e2       	ldi	r24, 0x2B	; 43
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	2d 7f       	andi	r18, 0xFD	; 253
    2e7e:	fc 01       	movw	r30, r24
    2e80:	20 83       	st	Z, r18

  /*Calculate The Baud Rate From The Equation */
  u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1);
    2e82:	83 e3       	ldi	r24, 0x33	; 51
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9b 83       	std	Y+3, r25	; 0x03
    2e88:	8a 83       	std	Y+2, r24	; 0x02
#endif
  /*
      $ Set Baud Rate
      Hint : UBRRH then UBRRL to avoid problems
   */
  UBRRH = (u8)(Local_u16UBRR << 8); /* MSBs at Local_u16UBRR */
    2e8a:	80 e4       	ldi	r24, 0x40	; 64
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	fc 01       	movw	r30, r24
    2e90:	10 82       	st	Z, r1
  UBRRL = (u8)Local_u16UBRR;
    2e92:	89 e2       	ldi	r24, 0x29	; 41
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	2a 81       	ldd	r18, Y+2	; 0x02
    2e98:	fc 01       	movw	r30, r24
    2e9a:	20 83       	st	Z, r18
  /*___________________________________________________________________________________________________________________*/

  /*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
  CLR_BIT(UCSRA, UCSRA_MPCM);
    2e9c:	8b e2       	ldi	r24, 0x2B	; 43
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	20 81       	ld	r18, Z
    2ea4:	8b e2       	ldi	r24, 0x2B	; 43
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	2e 7f       	andi	r18, 0xFE	; 254
    2eaa:	fc 01       	movw	r30, r24
    2eac:	20 83       	st	Z, r18

  /*UCSRC Register Config*/

  /*USART Mode*/
#if USART_MODE == ASYNCHRONOUS
  CLR_BIT(Local_u8UCSRC, UCSRC_UMSEL);
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	8f 7b       	andi	r24, 0xBF	; 191
    2eb2:	89 83       	std	Y+1, r24	; 0x01
#endif

  /*Parity Mode*/
#if USART_PARITY_MODE == DISABLE

  CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	8f 7e       	andi	r24, 0xEF	; 239
    2eb8:	89 83       	std	Y+1, r24	; 0x01
  CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	8f 7d       	andi	r24, 0xDF	; 223
    2ebe:	89 83       	std	Y+1, r24	; 0x01
#endif

  /*Stop Bit*/
#if USART_STOP_BIT == STOP_BIT_1

  CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	87 7f       	andi	r24, 0xF7	; 247
    2ec4:	89 83       	std	Y+1, r24	; 0x01
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
  CLR_BIT(UCSRB, UCSRB_UCSZ2);

#elif USART_DATA_SIZE == DATA_SIZE_8_BIT

  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	82 60       	ori	r24, 0x02	; 2
    2eca:	89 83       	std	Y+1, r24	; 0x01
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	84 60       	ori	r24, 0x04	; 4
    2ed0:	89 83       	std	Y+1, r24	; 0x01
  CLR_BIT(UCSRB, UCSRB_UCSZ2);
    2ed2:	8a e2       	ldi	r24, 0x2A	; 42
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	20 81       	ld	r18, Z
    2eda:	8a e2       	ldi	r24, 0x2A	; 42
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	2b 7f       	andi	r18, 0xFB	; 251
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	20 83       	st	Z, r18
#endif

#endif

  /*Set UCSRC Mode*/
  SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	80 68       	ori	r24, 0x80	; 128
    2ee8:	89 83       	std	Y+1, r24	; 0x01

  /*Store the value in UCSRC Register (one operation) */
  UCSRC = Local_u8UCSRC;
    2eea:	80 e4       	ldi	r24, 0x40	; 64
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	29 81       	ldd	r18, Y+1	; 0x01
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	20 83       	st	Z, r18

  /* Finally Enable the components */

  /*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_RXCIE);
    2ef4:	8a e2       	ldi	r24, 0x2A	; 42
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	fc 01       	movw	r30, r24
    2efa:	20 81       	ld	r18, Z
    2efc:	8a e2       	ldi	r24, 0x2A	; 42
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	2f 77       	andi	r18, 0x7F	; 127
    2f02:	fc 01       	movw	r30, r24
    2f04:	20 83       	st	Z, r18
#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
#endif

  /*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_TXCIE);
    2f06:	8a e2       	ldi	r24, 0x2A	; 42
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	20 81       	ld	r18, Z
    2f0e:	8a e2       	ldi	r24, 0x2A	; 42
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	2f 7b       	andi	r18, 0xBF	; 191
    2f14:	fc 01       	movw	r30, r24
    2f16:	20 83       	st	Z, r18
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

  /*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_UDRIE);
    2f18:	8a e2       	ldi	r24, 0x2A	; 42
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	20 81       	ld	r18, Z
    2f20:	8a e2       	ldi	r24, 0x2A	; 42
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	2f 7d       	andi	r18, 0xDF	; 223
    2f26:	fc 01       	movw	r30, r24
    2f28:	20 83       	st	Z, r18

  CLR_BIT(UCSRB, UCSRB_RXEN);

#elif USART_RECEIVER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_RXEN);
    2f2a:	8a e2       	ldi	r24, 0x2A	; 42
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	fc 01       	movw	r30, r24
    2f30:	20 81       	ld	r18, Z
    2f32:	8a e2       	ldi	r24, 0x2A	; 42
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	20 61       	ori	r18, 0x10	; 16
    2f38:	fc 01       	movw	r30, r24
    2f3a:	20 83       	st	Z, r18

  CLR_BIT(UCSRB, UCSRB_TXEN);

#elif USART_TRANSMITTER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_TXEN);
    2f3c:	8a e2       	ldi	r24, 0x2A	; 42
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	fc 01       	movw	r30, r24
    2f42:	20 81       	ld	r18, Z
    2f44:	8a e2       	ldi	r24, 0x2A	; 42
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	28 60       	ori	r18, 0x08	; 8
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	20 83       	st	Z, r18
#else

#error "Wrong USART_TRANSMITTER_ENABLE config"

#endif
}
    2f4e:	00 00       	nop
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	08 95       	ret

00002f5c <USART_u8SendData>:
 *		Copy_u8Data => Data to be send
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendData(u8 Copy_u8Data)
{
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <USART_u8SendData+0x6>
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <USART_u8SendData+0x8>
    2f64:	00 d0       	rcall	.+0      	; 0x2f66 <USART_u8SendData+0xa>
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    2f6c:	19 82       	std	Y+1, r1	; 0x01
  u32 Local_u32TimeoutCounter = 0;
    2f6e:	1a 82       	std	Y+2, r1	; 0x02
    2f70:	1b 82       	std	Y+3, r1	; 0x03
    2f72:	1c 82       	std	Y+4, r1	; 0x04
    2f74:	1d 82       	std	Y+5, r1	; 0x05

  if (USART_u8State == IDLE)
    2f76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <USART_u8State>
    2f7a:	88 23       	and	r24, r24
    2f7c:	b1 f5       	brne	.+108    	; 0x2fea <USART_u8SendData+0x8e>
  {
    USART_u8State = BUSY;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USART_u8State>

    /*
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    2f84:	0b c0       	rjmp	.+22     	; 0x2f9c <USART_u8SendData+0x40>
    {
      Local_u32TimeoutCounter++;
    2f86:	8a 81       	ldd	r24, Y+2	; 0x02
    2f88:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8a:	ac 81       	ldd	r26, Y+4	; 0x04
    2f8c:	bd 81       	ldd	r27, Y+5	; 0x05
    2f8e:	01 96       	adiw	r24, 0x01	; 1
    2f90:	a1 1d       	adc	r26, r1
    2f92:	b1 1d       	adc	r27, r1
    2f94:	8a 83       	std	Y+2, r24	; 0x02
    2f96:	9b 83       	std	Y+3, r25	; 0x03
    2f98:	ac 83       	std	Y+4, r26	; 0x04
    2f9a:	bd 83       	std	Y+5, r27	; 0x05

    /*
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    2f9c:	8b e2       	ldi	r24, 0x2B	; 43
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	80 81       	ld	r24, Z
    2fa4:	88 2f       	mov	r24, r24
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	80 72       	andi	r24, 0x20	; 32
    2faa:	99 27       	eor	r25, r25
    2fac:	89 2b       	or	r24, r25
    2fae:	49 f4       	brne	.+18     	; 0x2fc2 <USART_u8SendData+0x66>
    2fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb4:	ac 81       	ldd	r26, Y+4	; 0x04
    2fb6:	bd 81       	ldd	r27, Y+5	; 0x05
    2fb8:	80 31       	cpi	r24, 0x10	; 16
    2fba:	97 42       	sbci	r25, 0x27	; 39
    2fbc:	a1 05       	cpc	r26, r1
    2fbe:	b1 05       	cpc	r27, r1
    2fc0:	11 f7       	brne	.-60     	; 0x2f86 <USART_u8SendData+0x2a>
    {
      Local_u32TimeoutCounter++;
    }

    if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc6:	ac 81       	ldd	r26, Y+4	; 0x04
    2fc8:	bd 81       	ldd	r27, Y+5	; 0x05
    2fca:	80 31       	cpi	r24, 0x10	; 16
    2fcc:	97 42       	sbci	r25, 0x27	; 39
    2fce:	a1 05       	cpc	r26, r1
    2fd0:	b1 05       	cpc	r27, r1
    2fd2:	19 f4       	brne	.+6      	; 0x2fda <USART_u8SendData+0x7e>
    {
      Local_u8ErrorState = TIMEOUT_STATE;
    2fd4:	84 e0       	ldi	r24, 0x04	; 4
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	05 c0       	rjmp	.+10     	; 0x2fe4 <USART_u8SendData+0x88>
    }
    else
    {
      UDR = Copy_u8Data;
    2fda:	8c e2       	ldi	r24, 0x2C	; 44
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	2e 81       	ldd	r18, Y+6	; 0x06
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	20 83       	st	Z, r18
    }

    USART_u8State = IDLE;
    2fe4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <USART_u8State>
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <USART_u8SendData+0x92>
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ff0:	26 96       	adiw	r28, 0x06	; 6
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	08 95       	ret

00003002 <USART_u8ReceiveData>:
 *		Copy_u8ReceivedData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData)
{
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	00 d0       	rcall	.+0      	; 0x3008 <USART_u8ReceiveData+0x6>
    3008:	00 d0       	rcall	.+0      	; 0x300a <USART_u8ReceiveData+0x8>
    300a:	00 d0       	rcall	.+0      	; 0x300c <USART_u8ReceiveData+0xa>
    300c:	1f 92       	push	r1
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	9f 83       	std	Y+7, r25	; 0x07
    3014:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    3016:	19 82       	std	Y+1, r1	; 0x01
  u32 Local_u32TimeoutCounter = 0;
    3018:	1a 82       	std	Y+2, r1	; 0x02
    301a:	1b 82       	std	Y+3, r1	; 0x03
    301c:	1c 82       	std	Y+4, r1	; 0x04
    301e:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_u8ReceivedData != NULL)
    3020:	8e 81       	ldd	r24, Y+6	; 0x06
    3022:	9f 81       	ldd	r25, Y+7	; 0x07
    3024:	89 2b       	or	r24, r25
    3026:	e1 f1       	breq	.+120    	; 0x30a0 <USART_u8ReceiveData+0x9e>
  {
    if (USART_u8State == IDLE)
    3028:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <USART_u8State>
    302c:	88 23       	and	r24, r24
    302e:	a9 f5       	brne	.+106    	; 0x309a <USART_u8ReceiveData+0x98>
    {
      USART_u8State = BUSY;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USART_u8State>

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    3036:	0b c0       	rjmp	.+22     	; 0x304e <USART_u8ReceiveData+0x4c>
      {
        Local_u32TimeoutCounter++;
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	9b 81       	ldd	r25, Y+3	; 0x03
    303c:	ac 81       	ldd	r26, Y+4	; 0x04
    303e:	bd 81       	ldd	r27, Y+5	; 0x05
    3040:	01 96       	adiw	r24, 0x01	; 1
    3042:	a1 1d       	adc	r26, r1
    3044:	b1 1d       	adc	r27, r1
    3046:	8a 83       	std	Y+2, r24	; 0x02
    3048:	9b 83       	std	Y+3, r25	; 0x03
    304a:	ac 83       	std	Y+4, r26	; 0x04
    304c:	bd 83       	std	Y+5, r27	; 0x05
    if (USART_u8State == IDLE)
    {
      USART_u8State = BUSY;

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    304e:	8b e2       	ldi	r24, 0x2B	; 43
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	fc 01       	movw	r30, r24
    3054:	80 81       	ld	r24, Z
    3056:	88 23       	and	r24, r24
    3058:	4c f0       	brlt	.+18     	; 0x306c <USART_u8ReceiveData+0x6a>
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	9b 81       	ldd	r25, Y+3	; 0x03
    305e:	ac 81       	ldd	r26, Y+4	; 0x04
    3060:	bd 81       	ldd	r27, Y+5	; 0x05
    3062:	80 31       	cpi	r24, 0x10	; 16
    3064:	97 42       	sbci	r25, 0x27	; 39
    3066:	a1 05       	cpc	r26, r1
    3068:	b1 05       	cpc	r27, r1
    306a:	31 f7       	brne	.-52     	; 0x3038 <USART_u8ReceiveData+0x36>
      {
        Local_u32TimeoutCounter++;
      }

      if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    306c:	8a 81       	ldd	r24, Y+2	; 0x02
    306e:	9b 81       	ldd	r25, Y+3	; 0x03
    3070:	ac 81       	ldd	r26, Y+4	; 0x04
    3072:	bd 81       	ldd	r27, Y+5	; 0x05
    3074:	80 31       	cpi	r24, 0x10	; 16
    3076:	97 42       	sbci	r25, 0x27	; 39
    3078:	a1 05       	cpc	r26, r1
    307a:	b1 05       	cpc	r27, r1
    307c:	19 f4       	brne	.+6      	; 0x3084 <USART_u8ReceiveData+0x82>
      {
        Local_u8ErrorState = TIMEOUT_STATE;
    307e:	84 e0       	ldi	r24, 0x04	; 4
    3080:	89 83       	std	Y+1, r24	; 0x01
    3082:	08 c0       	rjmp	.+16     	; 0x3094 <USART_u8ReceiveData+0x92>
      }
      else
      {
        *Copy_u8ReceivedData = UDR;
    3084:	8c e2       	ldi	r24, 0x2C	; 44
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	fc 01       	movw	r30, r24
    308a:	20 81       	ld	r18, Z
    308c:	8e 81       	ldd	r24, Y+6	; 0x06
    308e:	9f 81       	ldd	r25, Y+7	; 0x07
    3090:	fc 01       	movw	r30, r24
    3092:	20 83       	st	Z, r18
      }

      USART_u8State = IDLE;
    3094:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <USART_u8State>
    3098:	05 c0       	rjmp	.+10     	; 0x30a4 <USART_u8ReceiveData+0xa2>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    309a:	83 e0       	ldi	r24, 0x03	; 3
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <USART_u8ReceiveData+0xa2>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a6:	27 96       	adiw	r28, 0x07	; 7
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	08 95       	ret

000030b8 <USART_u8SendStringSynch>:
 *		Copy_pu8String => pointer that holds the data
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringSynch(u8 *Copy_pu8String)
{
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	65 97       	sbiw	r28, 0x15	; 21
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	9d 8b       	std	Y+21, r25	; 0x15
    30ce:	8c 8b       	std	Y+20, r24	; 0x14
  u8 Local_u8ErrorState = OK;
    30d0:	19 82       	std	Y+1, r1	; 0x01

  u32 Local_u32Index = 0;
    30d2:	1a 82       	std	Y+2, r1	; 0x02
    30d4:	1b 82       	std	Y+3, r1	; 0x03
    30d6:	1c 82       	std	Y+4, r1	; 0x04
    30d8:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_pu8String != NULL)
    30da:	8c 89       	ldd	r24, Y+20	; 0x14
    30dc:	9d 89       	ldd	r25, Y+21	; 0x15
    30de:	89 2b       	or	r24, r25
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <USART_u8SendStringSynch+0x2c>
    30e2:	98 c0       	rjmp	.+304    	; 0x3214 <USART_u8SendStringSynch+0x15c>
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    30e4:	8b c0       	rjmp	.+278    	; 0x31fc <USART_u8SendStringSynch+0x144>
    {
      Local_u8ErrorState = USART_u8SendData(Copy_pu8String[Local_u32Index]);
    30e6:	8a 81       	ldd	r24, Y+2	; 0x02
    30e8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ea:	2c 89       	ldd	r18, Y+20	; 0x14
    30ec:	3d 89       	ldd	r19, Y+21	; 0x15
    30ee:	82 0f       	add	r24, r18
    30f0:	93 1f       	adc	r25, r19
    30f2:	fc 01       	movw	r30, r24
    30f4:	80 81       	ld	r24, Z
    30f6:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <USART_u8SendData>
    30fa:	89 83       	std	Y+1, r24	; 0x01
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	a8 ec       	ldi	r26, 0xC8	; 200
    3102:	b2 e4       	ldi	r27, 0x42	; 66
    3104:	8e 83       	std	Y+6, r24	; 0x06
    3106:	9f 83       	std	Y+7, r25	; 0x07
    3108:	a8 87       	std	Y+8, r26	; 0x08
    310a:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a ef       	ldi	r20, 0xFA	; 250
    3112:	54 e4       	ldi	r21, 0x44	; 68
    3114:	6e 81       	ldd	r22, Y+6	; 0x06
    3116:	7f 81       	ldd	r23, Y+7	; 0x07
    3118:	88 85       	ldd	r24, Y+8	; 0x08
    311a:	99 85       	ldd	r25, Y+9	; 0x09
    311c:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	8a 87       	std	Y+10, r24	; 0x0a
    3126:	9b 87       	std	Y+11, r25	; 0x0b
    3128:	ac 87       	std	Y+12, r26	; 0x0c
    312a:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e8       	ldi	r20, 0x80	; 128
    3132:	5f e3       	ldi	r21, 0x3F	; 63
    3134:	6a 85       	ldd	r22, Y+10	; 0x0a
    3136:	7b 85       	ldd	r23, Y+11	; 0x0b
    3138:	8c 85       	ldd	r24, Y+12	; 0x0c
    313a:	9d 85       	ldd	r25, Y+13	; 0x0d
    313c:	0e 94 91 1b 	call	0x3722	; 0x3722 <__cmpsf2>
    3140:	88 23       	and	r24, r24
    3142:	2c f4       	brge	.+10     	; 0x314e <USART_u8SendStringSynch+0x96>
		__ticks = 1;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	9f 87       	std	Y+15, r25	; 0x0f
    314a:	8e 87       	std	Y+14, r24	; 0x0e
    314c:	3f c0       	rjmp	.+126    	; 0x31cc <USART_u8SendStringSynch+0x114>
	else if (__tmp > 65535)
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	3f ef       	ldi	r19, 0xFF	; 255
    3152:	4f e7       	ldi	r20, 0x7F	; 127
    3154:	57 e4       	ldi	r21, 0x47	; 71
    3156:	6a 85       	ldd	r22, Y+10	; 0x0a
    3158:	7b 85       	ldd	r23, Y+11	; 0x0b
    315a:	8c 85       	ldd	r24, Y+12	; 0x0c
    315c:	9d 85       	ldd	r25, Y+13	; 0x0d
    315e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__gesf2>
    3162:	18 16       	cp	r1, r24
    3164:	4c f5       	brge	.+82     	; 0x31b8 <USART_u8SendStringSynch+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e2       	ldi	r20, 0x20	; 32
    316c:	51 e4       	ldi	r21, 0x41	; 65
    316e:	6e 81       	ldd	r22, Y+6	; 0x06
    3170:	7f 81       	ldd	r23, Y+7	; 0x07
    3172:	88 85       	ldd	r24, Y+8	; 0x08
    3174:	99 85       	ldd	r25, Y+9	; 0x09
    3176:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9f 87       	std	Y+15, r25	; 0x0f
    318c:	8e 87       	std	Y+14, r24	; 0x0e
    318e:	0f c0       	rjmp	.+30     	; 0x31ae <USART_u8SendStringSynch+0xf6>
    3190:	88 ec       	ldi	r24, 0xC8	; 200
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	99 8b       	std	Y+17, r25	; 0x11
    3196:	88 8b       	std	Y+16, r24	; 0x10
    3198:	88 89       	ldd	r24, Y+16	; 0x10
    319a:	99 89       	ldd	r25, Y+17	; 0x11
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	f1 f7       	brne	.-4      	; 0x319c <USART_u8SendStringSynch+0xe4>
    31a0:	99 8b       	std	Y+17, r25	; 0x11
    31a2:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    31a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	9f 87       	std	Y+15, r25	; 0x0f
    31ac:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    31b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    31b2:	89 2b       	or	r24, r25
    31b4:	69 f7       	brne	.-38     	; 0x3190 <USART_u8SendStringSynch+0xd8>
    31b6:	14 c0       	rjmp	.+40     	; 0x31e0 <USART_u8SendStringSynch+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    31ba:	7b 85       	ldd	r23, Y+11	; 0x0b
    31bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    31be:	9d 85       	ldd	r25, Y+13	; 0x0d
    31c0:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9f 87       	std	Y+15, r25	; 0x0f
    31ca:	8e 87       	std	Y+14, r24	; 0x0e
    31cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    31ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    31d0:	9b 8b       	std	Y+19, r25	; 0x13
    31d2:	8a 8b       	std	Y+18, r24	; 0x12
    31d4:	8a 89       	ldd	r24, Y+18	; 0x12
    31d6:	9b 89       	ldd	r25, Y+19	; 0x13
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	f1 f7       	brne	.-4      	; 0x31d8 <USART_u8SendStringSynch+0x120>
    31dc:	9b 8b       	std	Y+19, r25	; 0x13
    31de:	8a 8b       	std	Y+18, r24	; 0x12
      _delay_ms(100);
      Local_u32Index++;
    31e0:	8a 81       	ldd	r24, Y+2	; 0x02
    31e2:	9b 81       	ldd	r25, Y+3	; 0x03
    31e4:	ac 81       	ldd	r26, Y+4	; 0x04
    31e6:	bd 81       	ldd	r27, Y+5	; 0x05
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	a1 1d       	adc	r26, r1
    31ec:	b1 1d       	adc	r27, r1
    31ee:	8a 83       	std	Y+2, r24	; 0x02
    31f0:	9b 83       	std	Y+3, r25	; 0x03
    31f2:	ac 83       	std	Y+4, r26	; 0x04
    31f4:	bd 83       	std	Y+5, r27	; 0x05
      if (Local_u8ErrorState != OK)
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	88 23       	and	r24, r24
    31fa:	79 f4       	brne	.+30     	; 0x321a <USART_u8SendStringSynch+0x162>

  u32 Local_u32Index = 0;

  if (Copy_pu8String != NULL)
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3200:	2c 89       	ldd	r18, Y+20	; 0x14
    3202:	3d 89       	ldd	r19, Y+21	; 0x15
    3204:	82 0f       	add	r24, r18
    3206:	93 1f       	adc	r25, r19
    3208:	fc 01       	movw	r30, r24
    320a:	80 81       	ld	r24, Z
    320c:	88 23       	and	r24, r24
    320e:	09 f0       	breq	.+2      	; 0x3212 <USART_u8SendStringSynch+0x15a>
    3210:	6a cf       	rjmp	.-300    	; 0x30e6 <USART_u8SendStringSynch+0x2e>
    3212:	04 c0       	rjmp	.+8      	; 0x321c <USART_u8SendStringSynch+0x164>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	01 c0       	rjmp	.+2      	; 0x321c <USART_u8SendStringSynch+0x164>
      Local_u8ErrorState = USART_u8SendData(Copy_pu8String[Local_u32Index]);
      _delay_ms(100);
      Local_u32Index++;
      if (Local_u8ErrorState != OK)
      {
        break;
    321a:	00 00       	nop
  else
  {
    Local_u8ErrorState = NULL_POINTER;
  }

  return Local_u8ErrorState;
    321c:	89 81       	ldd	r24, Y+1	; 0x01
}
    321e:	65 96       	adiw	r28, 0x15	; 21
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	08 95       	ret

00003230 <USART_u8SendStringAsynch>:
 *      NotificationFunc => function that called after the transmit complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringAsynch(u8 *Copy_pu8String, void (*NotificationFunc)(void))
{
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	00 d0       	rcall	.+0      	; 0x3236 <USART_u8SendStringAsynch+0x6>
    3236:	00 d0       	rcall	.+0      	; 0x3238 <USART_u8SendStringAsynch+0x8>
    3238:	1f 92       	push	r1
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	9b 83       	std	Y+3, r25	; 0x03
    3240:	8a 83       	std	Y+2, r24	; 0x02
    3242:	7d 83       	std	Y+5, r23	; 0x05
    3244:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    3246:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    3248:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <USART_u8State>
    324c:	88 23       	and	r24, r24
    324e:	b1 f5       	brne	.+108    	; 0x32bc <USART_u8SendStringAsynch+0x8c>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	9b 81       	ldd	r25, Y+3	; 0x03
    3254:	89 2b       	or	r24, r25
    3256:	79 f1       	breq	.+94     	; 0x32b6 <USART_u8SendStringAsynch+0x86>
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	9d 81       	ldd	r25, Y+5	; 0x05
    325c:	89 2b       	or	r24, r25
    325e:	59 f1       	breq	.+86     	; 0x32b6 <USART_u8SendStringAsynch+0x86>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USART_u8State>

      /*Assign the USART data globally*/
      USART_pu8SendData = Copy_pu8String;
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	9b 81       	ldd	r25, Y+3	; 0x03
    326a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <USART_pu8SendData+0x1>
    326e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <USART_pu8SendData>
      USART_pvNotificationFunc = NotificationFunc;
    3272:	8c 81       	ldd	r24, Y+4	; 0x04
    3274:	9d 81       	ldd	r25, Y+5	; 0x05
    3276:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <USART_pvNotificationFunc+0x1>
    327a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <USART_pvNotificationFunc>

      /*Set Index to first element*/
      USART_u8Index = 0;
    327e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <USART_u8Index>

      /*Send first Data */
      UDR = USART_pu8SendData[USART_u8Index];
    3282:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <USART_pu8SendData>
    3286:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <USART_pu8SendData+0x1>
    328a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <USART_u8Index>
    328e:	88 2f       	mov	r24, r24
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	28 0f       	add	r18, r24
    3294:	39 1f       	adc	r19, r25
    3296:	8c e2       	ldi	r24, 0x2C	; 44
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	f9 01       	movw	r30, r18
    329c:	20 81       	ld	r18, Z
    329e:	fc 01       	movw	r30, r24
    32a0:	20 83       	st	Z, r18

      /*USART Transmit Interrupt Enable*/
      SET_BIT(UCSRB, UCSRB_TXCIE);
    32a2:	8a e2       	ldi	r24, 0x2A	; 42
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	fc 01       	movw	r30, r24
    32a8:	20 81       	ld	r18, Z
    32aa:	8a e2       	ldi	r24, 0x2A	; 42
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	20 64       	ori	r18, 0x40	; 64
    32b0:	fc 01       	movw	r30, r24
    32b2:	20 83       	st	Z, r18
    32b4:	05 c0       	rjmp	.+10     	; 0x32c0 <USART_u8SendStringAsynch+0x90>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    32b6:	82 e0       	ldi	r24, 0x02	; 2
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	02 c0       	rjmp	.+4      	; 0x32c0 <USART_u8SendStringAsynch+0x90>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	08 95       	ret

000032d2 <USART_u8ReceiveBufferSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferSynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize)
{
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	2b 97       	sbiw	r28, 0x0b	; 11
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	9f 83       	std	Y+7, r25	; 0x07
    32e8:	8e 83       	std	Y+6, r24	; 0x06
    32ea:	48 87       	std	Y+8, r20	; 0x08
    32ec:	59 87       	std	Y+9, r21	; 0x09
    32ee:	6a 87       	std	Y+10, r22	; 0x0a
    32f0:	7b 87       	std	Y+11, r23	; 0x0b
  u8 Local_u8ErrorState = OK;
    32f2:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_pu8String != NULL)
    32f4:	8e 81       	ldd	r24, Y+6	; 0x06
    32f6:	9f 81       	ldd	r25, Y+7	; 0x07
    32f8:	89 2b       	or	r24, r25
    32fa:	51 f1       	breq	.+84     	; 0x3350 <USART_u8ReceiveBufferSynch+0x7e>
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    32fc:	1a 82       	std	Y+2, r1	; 0x02
    32fe:	1b 82       	std	Y+3, r1	; 0x03
    3300:	1c 82       	std	Y+4, r1	; 0x04
    3302:	1d 82       	std	Y+5, r1	; 0x05
    3304:	17 c0       	rjmp	.+46     	; 0x3334 <USART_u8ReceiveBufferSynch+0x62>
    {
      Local_u8ErrorState = USART_u8ReceiveData(&Copy_pu8String[Local_u32Index]);
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	9b 81       	ldd	r25, Y+3	; 0x03
    330a:	2e 81       	ldd	r18, Y+6	; 0x06
    330c:	3f 81       	ldd	r19, Y+7	; 0x07
    330e:	82 0f       	add	r24, r18
    3310:	93 1f       	adc	r25, r19
    3312:	0e 94 01 18 	call	0x3002	; 0x3002 <USART_u8ReceiveData>
    3316:	89 83       	std	Y+1, r24	; 0x01
      if (Local_u8ErrorState != OK)
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	88 23       	and	r24, r24
    331c:	e1 f4       	brne	.+56     	; 0x3356 <USART_u8ReceiveBufferSynch+0x84>
{
  u8 Local_u8ErrorState = OK;

  if (Copy_pu8String != NULL)
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	9b 81       	ldd	r25, Y+3	; 0x03
    3322:	ac 81       	ldd	r26, Y+4	; 0x04
    3324:	bd 81       	ldd	r27, Y+5	; 0x05
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	a1 1d       	adc	r26, r1
    332a:	b1 1d       	adc	r27, r1
    332c:	8a 83       	std	Y+2, r24	; 0x02
    332e:	9b 83       	std	Y+3, r25	; 0x03
    3330:	ac 83       	std	Y+4, r26	; 0x04
    3332:	bd 83       	std	Y+5, r27	; 0x05
    3334:	2a 81       	ldd	r18, Y+2	; 0x02
    3336:	3b 81       	ldd	r19, Y+3	; 0x03
    3338:	4c 81       	ldd	r20, Y+4	; 0x04
    333a:	5d 81       	ldd	r21, Y+5	; 0x05
    333c:	88 85       	ldd	r24, Y+8	; 0x08
    333e:	99 85       	ldd	r25, Y+9	; 0x09
    3340:	aa 85       	ldd	r26, Y+10	; 0x0a
    3342:	bb 85       	ldd	r27, Y+11	; 0x0b
    3344:	28 17       	cp	r18, r24
    3346:	39 07       	cpc	r19, r25
    3348:	4a 07       	cpc	r20, r26
    334a:	5b 07       	cpc	r21, r27
    334c:	e0 f2       	brcs	.-72     	; 0x3306 <USART_u8ReceiveBufferSynch+0x34>
    334e:	04 c0       	rjmp	.+8      	; 0x3358 <USART_u8ReceiveBufferSynch+0x86>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    3350:	82 e0       	ldi	r24, 0x02	; 2
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <USART_u8ReceiveBufferSynch+0x86>
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    {
      Local_u8ErrorState = USART_u8ReceiveData(&Copy_pu8String[Local_u32Index]);
      if (Local_u8ErrorState != OK)
      {
        break;
    3356:	00 00       	nop
  else
  {
    Local_u8ErrorState = NULL_POINTER;
  }

  return Local_u8ErrorState;
    3358:	89 81       	ldd	r24, Y+1	; 0x01
}
    335a:	2b 96       	adiw	r28, 0x0b	; 11
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	08 95       	ret

0000336c <USART_u8ReceiveBufferAsynch>:
 *      NotificationFunc   => function that called after the received complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferAsynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize, void (*NotificationFunc)(void))
{
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	29 97       	sbiw	r28, 0x09	; 9
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	9b 83       	std	Y+3, r25	; 0x03
    3382:	8a 83       	std	Y+2, r24	; 0x02
    3384:	4c 83       	std	Y+4, r20	; 0x04
    3386:	5d 83       	std	Y+5, r21	; 0x05
    3388:	6e 83       	std	Y+6, r22	; 0x06
    338a:	7f 83       	std	Y+7, r23	; 0x07
    338c:	39 87       	std	Y+9, r19	; 0x09
    338e:	28 87       	std	Y+8, r18	; 0x08
  u8 Local_u8ErrorState = OK;
    3390:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    3392:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <USART_u8State>
    3396:	88 23       	and	r24, r24
    3398:	49 f5       	brne	.+82     	; 0x33ec <USART_u8ReceiveBufferAsynch+0x80>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	9b 81       	ldd	r25, Y+3	; 0x03
    339e:	89 2b       	or	r24, r25
    33a0:	11 f1       	breq	.+68     	; 0x33e6 <USART_u8ReceiveBufferAsynch+0x7a>
    33a2:	88 85       	ldd	r24, Y+8	; 0x08
    33a4:	99 85       	ldd	r25, Y+9	; 0x09
    33a6:	89 2b       	or	r24, r25
    33a8:	f1 f0       	breq	.+60     	; 0x33e6 <USART_u8ReceiveBufferAsynch+0x7a>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USART_u8State>

      /*Assign the USART data globally*/
      USART_pu8ReceiveData = Copy_pu8String;
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	9b 81       	ldd	r25, Y+3	; 0x03
    33b4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <USART_pu8ReceiveData+0x1>
    33b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <USART_pu8ReceiveData>
      USART_pvNotificationFunc = NotificationFunc;
    33bc:	88 85       	ldd	r24, Y+8	; 0x08
    33be:	99 85       	ldd	r25, Y+9	; 0x09
    33c0:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <USART_pvNotificationFunc+0x1>
    33c4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <USART_pvNotificationFunc>
      USART_u8BufferSize = Copy_u32BufferSize;
    33c8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <USART_u8BufferSize>

      /*Set Index to first element*/
      USART_u8Index = 0;
    33ce:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <USART_u8Index>

      /*USART Recieve Interrupt Enable */
      SET_BIT(UCSRB, UCSRB_RXCIE);
    33d2:	8a e2       	ldi	r24, 0x2A	; 42
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	fc 01       	movw	r30, r24
    33d8:	20 81       	ld	r18, Z
    33da:	8a e2       	ldi	r24, 0x2A	; 42
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	20 68       	ori	r18, 0x80	; 128
    33e0:	fc 01       	movw	r30, r24
    33e2:	20 83       	st	Z, r18
    33e4:	05 c0       	rjmp	.+10     	; 0x33f0 <USART_u8ReceiveBufferAsynch+0x84>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	89 83       	std	Y+1, r24	; 0x01
    33ea:	02 c0       	rjmp	.+4      	; 0x33f0 <USART_u8ReceiveBufferAsynch+0x84>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    33ec:	83 e0       	ldi	r24, 0x03	; 3
    33ee:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33f2:	29 96       	adiw	r28, 0x09	; 9
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	08 95       	ret

00003404 <__vector_13>:
/*___________________________________________________________________________________________________________________*/

/* ISR for RX complete */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    3404:	1f 92       	push	r1
    3406:	0f 92       	push	r0
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	0f 92       	push	r0
    340c:	11 24       	eor	r1, r1
    340e:	2f 93       	push	r18
    3410:	3f 93       	push	r19
    3412:	4f 93       	push	r20
    3414:	5f 93       	push	r21
    3416:	6f 93       	push	r22
    3418:	7f 93       	push	r23
    341a:	8f 93       	push	r24
    341c:	9f 93       	push	r25
    341e:	af 93       	push	r26
    3420:	bf 93       	push	r27
    3422:	ef 93       	push	r30
    3424:	ff 93       	push	r31
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
  /*Receive next Data*/
  USART_pu8ReceiveData[USART_u8Index] = UDR;
    342e:	2c e2       	ldi	r18, 0x2C	; 44
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <USART_pu8ReceiveData>
    3436:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <USART_pu8ReceiveData+0x1>
    343a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <USART_u8Index>
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	84 0f       	add	r24, r20
    3444:	95 1f       	adc	r25, r21
    3446:	f9 01       	movw	r30, r18
    3448:	20 81       	ld	r18, Z
    344a:	fc 01       	movw	r30, r24
    344c:	20 83       	st	Z, r18

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    344e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <USART_u8Index>
    3452:	8f 5f       	subi	r24, 0xFF	; 255
    3454:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <USART_u8Index>

  if (USART_u8Index == USART_u8BufferSize)
    3458:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <USART_u8Index>
    345c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <USART_u8BufferSize>
    3460:	98 17       	cp	r25, r24
    3462:	c9 f4       	brne	.+50     	; 0x3496 <__vector_13+0x92>
  {
    /*Send Data Complete*/

    USART_u8Index = 0;
    3464:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <USART_u8Index>
    /*USART is now IDLE*/
    USART_u8State = IDLE;
    3468:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <USART_u8State>

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    346c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USART_pvNotificationFunc>
    3470:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <USART_pvNotificationFunc+0x1>
    3474:	89 2b       	or	r24, r25
    3476:	31 f0       	breq	.+12     	; 0x3484 <__vector_13+0x80>
    {
      USART_pvNotificationFunc();
    3478:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USART_pvNotificationFunc>
    347c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <USART_pvNotificationFunc+0x1>
    3480:	fc 01       	movw	r30, r24
    3482:	09 95       	icall
    }

    /*USART Recieve Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_RXCIE);
    3484:	8a e2       	ldi	r24, 0x2A	; 42
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	fc 01       	movw	r30, r24
    348a:	20 81       	ld	r18, Z
    348c:	8a e2       	ldi	r24, 0x2A	; 42
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	2f 77       	andi	r18, 0x7F	; 127
    3492:	fc 01       	movw	r30, r24
    3494:	20 83       	st	Z, r18
  }
  else
  {
    /*Do Noting*/
  }
}
    3496:	00 00       	nop
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	ff 91       	pop	r31
    349e:	ef 91       	pop	r30
    34a0:	bf 91       	pop	r27
    34a2:	af 91       	pop	r26
    34a4:	9f 91       	pop	r25
    34a6:	8f 91       	pop	r24
    34a8:	7f 91       	pop	r23
    34aa:	6f 91       	pop	r22
    34ac:	5f 91       	pop	r21
    34ae:	4f 91       	pop	r20
    34b0:	3f 91       	pop	r19
    34b2:	2f 91       	pop	r18
    34b4:	0f 90       	pop	r0
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	0f 90       	pop	r0
    34ba:	1f 90       	pop	r1
    34bc:	18 95       	reti

000034be <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    34be:	1f 92       	push	r1
    34c0:	0f 92       	push	r0
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	0f 92       	push	r0
    34c6:	11 24       	eor	r1, r1
    34c8:	2f 93       	push	r18
    34ca:	3f 93       	push	r19
    34cc:	4f 93       	push	r20
    34ce:	5f 93       	push	r21
    34d0:	6f 93       	push	r22
    34d2:	7f 93       	push	r23
    34d4:	8f 93       	push	r24
    34d6:	9f 93       	push	r25
    34d8:	af 93       	push	r26
    34da:	bf 93       	push	r27
    34dc:	ef 93       	push	r30
    34de:	ff 93       	push	r31
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    34e8:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <USART_u8Index>
    34ec:	8f 5f       	subi	r24, 0xFF	; 255
    34ee:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <USART_u8Index>

  if (USART_pu8SendData[USART_u8Index] == '\0')
    34f2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <USART_pu8SendData>
    34f6:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <USART_pu8SendData+0x1>
    34fa:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <USART_u8Index>
    34fe:	88 2f       	mov	r24, r24
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	82 0f       	add	r24, r18
    3504:	93 1f       	adc	r25, r19
    3506:	fc 01       	movw	r30, r24
    3508:	80 81       	ld	r24, Z
    350a:	88 23       	and	r24, r24
    350c:	d1 f4       	brne	.+52     	; 0x3542 <__vector_15+0x84>
  {
    /*Receive Data Complete*/
    USART_u8Index = 0;
    350e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <USART_u8Index>

    /*USART is now IDLE*/
    USART_u8State = IDLE;
    3512:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <USART_u8State>

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    3516:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USART_pvNotificationFunc>
    351a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <USART_pvNotificationFunc+0x1>
    351e:	89 2b       	or	r24, r25
    3520:	31 f0       	breq	.+12     	; 0x352e <__vector_15+0x70>
    {
      USART_pvNotificationFunc();
    3522:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USART_pvNotificationFunc>
    3526:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <USART_pvNotificationFunc+0x1>
    352a:	fc 01       	movw	r30, r24
    352c:	09 95       	icall
    }

    /*USART Transmit Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_TXCIE);
    352e:	8a e2       	ldi	r24, 0x2A	; 42
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	fc 01       	movw	r30, r24
    3534:	20 81       	ld	r18, Z
    3536:	8a e2       	ldi	r24, 0x2A	; 42
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	2f 7b       	andi	r18, 0xBF	; 191
    353c:	fc 01       	movw	r30, r24
    353e:	20 83       	st	Z, r18
  {
    /*Send Data not Complete/
    /Send next Data*/
    UDR = USART_pu8SendData[USART_u8Index];
  }
}
    3540:	10 c0       	rjmp	.+32     	; 0x3562 <__vector_15+0xa4>
  }
  else
  {
    /*Send Data not Complete/
    /Send next Data*/
    UDR = USART_pu8SendData[USART_u8Index];
    3542:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <USART_pu8SendData>
    3546:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <USART_pu8SendData+0x1>
    354a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <USART_u8Index>
    354e:	88 2f       	mov	r24, r24
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	28 0f       	add	r18, r24
    3554:	39 1f       	adc	r19, r25
    3556:	8c e2       	ldi	r24, 0x2C	; 44
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	f9 01       	movw	r30, r18
    355c:	20 81       	ld	r18, Z
    355e:	fc 01       	movw	r30, r24
    3560:	20 83       	st	Z, r18
  }
}
    3562:	00 00       	nop
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	ff 91       	pop	r31
    356a:	ef 91       	pop	r30
    356c:	bf 91       	pop	r27
    356e:	af 91       	pop	r26
    3570:	9f 91       	pop	r25
    3572:	8f 91       	pop	r24
    3574:	7f 91       	pop	r23
    3576:	6f 91       	pop	r22
    3578:	5f 91       	pop	r21
    357a:	4f 91       	pop	r20
    357c:	3f 91       	pop	r19
    357e:	2f 91       	pop	r18
    3580:	0f 90       	pop	r0
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	0f 90       	pop	r0
    3586:	1f 90       	pop	r1
    3588:	18 95       	reti

0000358a <main>:
#include "../Inc/HAL_Layer/CLCD/CLCD_interface.h"



void main()
{
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
  System_vInit();
    3592:	0e 94 10 17 	call	0x2e20	; 0x2e20 <System_vInit>
  while(1)
    3596:	ff cf       	rjmp	.-2      	; 0x3596 <main+0xc>

00003598 <ISR_EXTI_INT>:

}


void ISR_EXTI_INT(void)
{
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
  CLCD_vSendData('A');
    35a0:	81 e4       	ldi	r24, 0x41	; 65
    35a2:	0e 94 d0 06 	call	0xda0	; 0xda0 <CLCD_vSendData>
}
    35a6:	00 00       	nop
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	08 95       	ret

000035ae <__udivmodsi4>:
    35ae:	a1 e2       	ldi	r26, 0x21	; 33
    35b0:	1a 2e       	mov	r1, r26
    35b2:	aa 1b       	sub	r26, r26
    35b4:	bb 1b       	sub	r27, r27
    35b6:	fd 01       	movw	r30, r26
    35b8:	0d c0       	rjmp	.+26     	; 0x35d4 <__udivmodsi4_ep>

000035ba <__udivmodsi4_loop>:
    35ba:	aa 1f       	adc	r26, r26
    35bc:	bb 1f       	adc	r27, r27
    35be:	ee 1f       	adc	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	a2 17       	cp	r26, r18
    35c4:	b3 07       	cpc	r27, r19
    35c6:	e4 07       	cpc	r30, r20
    35c8:	f5 07       	cpc	r31, r21
    35ca:	20 f0       	brcs	.+8      	; 0x35d4 <__udivmodsi4_ep>
    35cc:	a2 1b       	sub	r26, r18
    35ce:	b3 0b       	sbc	r27, r19
    35d0:	e4 0b       	sbc	r30, r20
    35d2:	f5 0b       	sbc	r31, r21

000035d4 <__udivmodsi4_ep>:
    35d4:	66 1f       	adc	r22, r22
    35d6:	77 1f       	adc	r23, r23
    35d8:	88 1f       	adc	r24, r24
    35da:	99 1f       	adc	r25, r25
    35dc:	1a 94       	dec	r1
    35de:	69 f7       	brne	.-38     	; 0x35ba <__udivmodsi4_loop>
    35e0:	60 95       	com	r22
    35e2:	70 95       	com	r23
    35e4:	80 95       	com	r24
    35e6:	90 95       	com	r25
    35e8:	9b 01       	movw	r18, r22
    35ea:	ac 01       	movw	r20, r24
    35ec:	bd 01       	movw	r22, r26
    35ee:	cf 01       	movw	r24, r30
    35f0:	08 95       	ret

000035f2 <__divmodsi4>:
    35f2:	05 2e       	mov	r0, r21
    35f4:	97 fb       	bst	r25, 7
    35f6:	1e f4       	brtc	.+6      	; 0x35fe <__divmodsi4+0xc>
    35f8:	00 94       	com	r0
    35fa:	0e 94 10 1b 	call	0x3620	; 0x3620 <__negsi2>
    35fe:	57 fd       	sbrc	r21, 7
    3600:	07 d0       	rcall	.+14     	; 0x3610 <__divmodsi4_neg2>
    3602:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <__udivmodsi4>
    3606:	07 fc       	sbrc	r0, 7
    3608:	03 d0       	rcall	.+6      	; 0x3610 <__divmodsi4_neg2>
    360a:	4e f4       	brtc	.+18     	; 0x361e <__divmodsi4_exit>
    360c:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__negsi2>

00003610 <__divmodsi4_neg2>:
    3610:	50 95       	com	r21
    3612:	40 95       	com	r20
    3614:	30 95       	com	r19
    3616:	21 95       	neg	r18
    3618:	3f 4f       	sbci	r19, 0xFF	; 255
    361a:	4f 4f       	sbci	r20, 0xFF	; 255
    361c:	5f 4f       	sbci	r21, 0xFF	; 255

0000361e <__divmodsi4_exit>:
    361e:	08 95       	ret

00003620 <__negsi2>:
    3620:	90 95       	com	r25
    3622:	80 95       	com	r24
    3624:	70 95       	com	r23
    3626:	61 95       	neg	r22
    3628:	7f 4f       	sbci	r23, 0xFF	; 255
    362a:	8f 4f       	sbci	r24, 0xFF	; 255
    362c:	9f 4f       	sbci	r25, 0xFF	; 255
    362e:	08 95       	ret

00003630 <__cmpdi2_s8>:
    3630:	00 24       	eor	r0, r0
    3632:	a7 fd       	sbrc	r26, 7
    3634:	00 94       	com	r0
    3636:	2a 17       	cp	r18, r26
    3638:	30 05       	cpc	r19, r0
    363a:	40 05       	cpc	r20, r0
    363c:	50 05       	cpc	r21, r0
    363e:	60 05       	cpc	r22, r0
    3640:	70 05       	cpc	r23, r0
    3642:	80 05       	cpc	r24, r0
    3644:	90 05       	cpc	r25, r0
    3646:	08 95       	ret

00003648 <__subsf3>:
    3648:	50 58       	subi	r21, 0x80	; 128

0000364a <__addsf3>:
    364a:	bb 27       	eor	r27, r27
    364c:	aa 27       	eor	r26, r26
    364e:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__addsf3x>
    3652:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__fp_round>
    3656:	0e 94 82 1c 	call	0x3904	; 0x3904 <__fp_pscA>
    365a:	38 f0       	brcs	.+14     	; 0x366a <__addsf3+0x20>
    365c:	0e 94 89 1c 	call	0x3912	; 0x3912 <__fp_pscB>
    3660:	20 f0       	brcs	.+8      	; 0x366a <__addsf3+0x20>
    3662:	39 f4       	brne	.+14     	; 0x3672 <__addsf3+0x28>
    3664:	9f 3f       	cpi	r25, 0xFF	; 255
    3666:	19 f4       	brne	.+6      	; 0x366e <__addsf3+0x24>
    3668:	26 f4       	brtc	.+8      	; 0x3672 <__addsf3+0x28>
    366a:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__fp_nan>
    366e:	0e f4       	brtc	.+2      	; 0x3672 <__addsf3+0x28>
    3670:	e0 95       	com	r30
    3672:	e7 fb       	bst	r30, 7
    3674:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__fp_inf>

00003678 <__addsf3x>:
    3678:	e9 2f       	mov	r30, r25
    367a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__fp_split3>
    367e:	58 f3       	brcs	.-42     	; 0x3656 <__addsf3+0xc>
    3680:	ba 17       	cp	r27, r26
    3682:	62 07       	cpc	r22, r18
    3684:	73 07       	cpc	r23, r19
    3686:	84 07       	cpc	r24, r20
    3688:	95 07       	cpc	r25, r21
    368a:	20 f0       	brcs	.+8      	; 0x3694 <__addsf3x+0x1c>
    368c:	79 f4       	brne	.+30     	; 0x36ac <__addsf3x+0x34>
    368e:	a6 f5       	brtc	.+104    	; 0x36f8 <__addsf3x+0x80>
    3690:	0c 94 c3 1c 	jmp	0x3986	; 0x3986 <__fp_zero>
    3694:	0e f4       	brtc	.+2      	; 0x3698 <__addsf3x+0x20>
    3696:	e0 95       	com	r30
    3698:	0b 2e       	mov	r0, r27
    369a:	ba 2f       	mov	r27, r26
    369c:	a0 2d       	mov	r26, r0
    369e:	0b 01       	movw	r0, r22
    36a0:	b9 01       	movw	r22, r18
    36a2:	90 01       	movw	r18, r0
    36a4:	0c 01       	movw	r0, r24
    36a6:	ca 01       	movw	r24, r20
    36a8:	a0 01       	movw	r20, r0
    36aa:	11 24       	eor	r1, r1
    36ac:	ff 27       	eor	r31, r31
    36ae:	59 1b       	sub	r21, r25
    36b0:	99 f0       	breq	.+38     	; 0x36d8 <__addsf3x+0x60>
    36b2:	59 3f       	cpi	r21, 0xF9	; 249
    36b4:	50 f4       	brcc	.+20     	; 0x36ca <__addsf3x+0x52>
    36b6:	50 3e       	cpi	r21, 0xE0	; 224
    36b8:	68 f1       	brcs	.+90     	; 0x3714 <__addsf3x+0x9c>
    36ba:	1a 16       	cp	r1, r26
    36bc:	f0 40       	sbci	r31, 0x00	; 0
    36be:	a2 2f       	mov	r26, r18
    36c0:	23 2f       	mov	r18, r19
    36c2:	34 2f       	mov	r19, r20
    36c4:	44 27       	eor	r20, r20
    36c6:	58 5f       	subi	r21, 0xF8	; 248
    36c8:	f3 cf       	rjmp	.-26     	; 0x36b0 <__addsf3x+0x38>
    36ca:	46 95       	lsr	r20
    36cc:	37 95       	ror	r19
    36ce:	27 95       	ror	r18
    36d0:	a7 95       	ror	r26
    36d2:	f0 40       	sbci	r31, 0x00	; 0
    36d4:	53 95       	inc	r21
    36d6:	c9 f7       	brne	.-14     	; 0x36ca <__addsf3x+0x52>
    36d8:	7e f4       	brtc	.+30     	; 0x36f8 <__addsf3x+0x80>
    36da:	1f 16       	cp	r1, r31
    36dc:	ba 0b       	sbc	r27, r26
    36de:	62 0b       	sbc	r22, r18
    36e0:	73 0b       	sbc	r23, r19
    36e2:	84 0b       	sbc	r24, r20
    36e4:	ba f0       	brmi	.+46     	; 0x3714 <__addsf3x+0x9c>
    36e6:	91 50       	subi	r25, 0x01	; 1
    36e8:	a1 f0       	breq	.+40     	; 0x3712 <__addsf3x+0x9a>
    36ea:	ff 0f       	add	r31, r31
    36ec:	bb 1f       	adc	r27, r27
    36ee:	66 1f       	adc	r22, r22
    36f0:	77 1f       	adc	r23, r23
    36f2:	88 1f       	adc	r24, r24
    36f4:	c2 f7       	brpl	.-16     	; 0x36e6 <__addsf3x+0x6e>
    36f6:	0e c0       	rjmp	.+28     	; 0x3714 <__addsf3x+0x9c>
    36f8:	ba 0f       	add	r27, r26
    36fa:	62 1f       	adc	r22, r18
    36fc:	73 1f       	adc	r23, r19
    36fe:	84 1f       	adc	r24, r20
    3700:	48 f4       	brcc	.+18     	; 0x3714 <__addsf3x+0x9c>
    3702:	87 95       	ror	r24
    3704:	77 95       	ror	r23
    3706:	67 95       	ror	r22
    3708:	b7 95       	ror	r27
    370a:	f7 95       	ror	r31
    370c:	9e 3f       	cpi	r25, 0xFE	; 254
    370e:	08 f0       	brcs	.+2      	; 0x3712 <__addsf3x+0x9a>
    3710:	b0 cf       	rjmp	.-160    	; 0x3672 <__addsf3+0x28>
    3712:	93 95       	inc	r25
    3714:	88 0f       	add	r24, r24
    3716:	08 f0       	brcs	.+2      	; 0x371a <__addsf3x+0xa2>
    3718:	99 27       	eor	r25, r25
    371a:	ee 0f       	add	r30, r30
    371c:	97 95       	ror	r25
    371e:	87 95       	ror	r24
    3720:	08 95       	ret

00003722 <__cmpsf2>:
    3722:	0e 94 45 1c 	call	0x388a	; 0x388a <__fp_cmp>
    3726:	08 f4       	brcc	.+2      	; 0x372a <__cmpsf2+0x8>
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	08 95       	ret

0000372c <__fixsfdi>:
    372c:	be e3       	ldi	r27, 0x3E	; 62
    372e:	04 d0       	rcall	.+8      	; 0x3738 <__fixunssfdi+0x2>
    3730:	08 f4       	brcc	.+2      	; 0x3734 <__fixsfdi+0x8>
    3732:	90 e8       	ldi	r25, 0x80	; 128
    3734:	08 95       	ret

00003736 <__fixunssfdi>:
    3736:	bf e3       	ldi	r27, 0x3F	; 63
    3738:	22 27       	eor	r18, r18
    373a:	33 27       	eor	r19, r19
    373c:	a9 01       	movw	r20, r18
    373e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__fp_splitA>
    3742:	60 f1       	brcs	.+88     	; 0x379c <__fixunssfdi+0x66>
    3744:	9f 57       	subi	r25, 0x7F	; 127
    3746:	48 f1       	brcs	.+82     	; 0x379a <__fixunssfdi+0x64>
    3748:	b9 17       	cp	r27, r25
    374a:	40 f1       	brcs	.+80     	; 0x379c <__fixunssfdi+0x66>
    374c:	bf e3       	ldi	r27, 0x3F	; 63
    374e:	b9 1b       	sub	r27, r25
    3750:	99 27       	eor	r25, r25
    3752:	b8 50       	subi	r27, 0x08	; 8
    3754:	3a f4       	brpl	.+14     	; 0x3764 <__fixunssfdi+0x2e>
    3756:	66 0f       	add	r22, r22
    3758:	77 1f       	adc	r23, r23
    375a:	88 1f       	adc	r24, r24
    375c:	99 1f       	adc	r25, r25
    375e:	b3 95       	inc	r27
    3760:	d2 f3       	brmi	.-12     	; 0x3756 <__fixunssfdi+0x20>
    3762:	16 c0       	rjmp	.+44     	; 0x3790 <__fixunssfdi+0x5a>
    3764:	b8 50       	subi	r27, 0x08	; 8
    3766:	4a f0       	brmi	.+18     	; 0x377a <__fixunssfdi+0x44>
    3768:	23 2f       	mov	r18, r19
    376a:	34 2f       	mov	r19, r20
    376c:	45 2f       	mov	r20, r21
    376e:	56 2f       	mov	r21, r22
    3770:	67 2f       	mov	r22, r23
    3772:	78 2f       	mov	r23, r24
    3774:	88 27       	eor	r24, r24
    3776:	b8 50       	subi	r27, 0x08	; 8
    3778:	ba f7       	brpl	.-18     	; 0x3768 <__fixunssfdi+0x32>
    377a:	b8 5f       	subi	r27, 0xF8	; 248
    377c:	49 f0       	breq	.+18     	; 0x3790 <__fixunssfdi+0x5a>
    377e:	86 95       	lsr	r24
    3780:	77 95       	ror	r23
    3782:	67 95       	ror	r22
    3784:	57 95       	ror	r21
    3786:	47 95       	ror	r20
    3788:	37 95       	ror	r19
    378a:	27 95       	ror	r18
    378c:	ba 95       	dec	r27
    378e:	b9 f7       	brne	.-18     	; 0x377e <__fixunssfdi+0x48>
    3790:	16 f4       	brtc	.+4      	; 0x3796 <__fixunssfdi+0x60>
    3792:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__fp_negdi>
    3796:	88 94       	clc
    3798:	08 95       	ret
    379a:	88 94       	clc
    379c:	60 e0       	ldi	r22, 0x00	; 0
    379e:	70 e0       	ldi	r23, 0x00	; 0
    37a0:	cb 01       	movw	r24, r22
    37a2:	08 95       	ret

000037a4 <__fixsfsi>:
    37a4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fixunssfsi>
    37a8:	68 94       	set
    37aa:	b1 11       	cpse	r27, r1
    37ac:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__fp_szero>
    37b0:	08 95       	ret

000037b2 <__fixunssfsi>:
    37b2:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__fp_splitA>
    37b6:	88 f0       	brcs	.+34     	; 0x37da <__fixunssfsi+0x28>
    37b8:	9f 57       	subi	r25, 0x7F	; 127
    37ba:	98 f0       	brcs	.+38     	; 0x37e2 <__fixunssfsi+0x30>
    37bc:	b9 2f       	mov	r27, r25
    37be:	99 27       	eor	r25, r25
    37c0:	b7 51       	subi	r27, 0x17	; 23
    37c2:	b0 f0       	brcs	.+44     	; 0x37f0 <__fixunssfsi+0x3e>
    37c4:	e1 f0       	breq	.+56     	; 0x37fe <__fixunssfsi+0x4c>
    37c6:	66 0f       	add	r22, r22
    37c8:	77 1f       	adc	r23, r23
    37ca:	88 1f       	adc	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	1a f0       	brmi	.+6      	; 0x37d6 <__fixunssfsi+0x24>
    37d0:	ba 95       	dec	r27
    37d2:	c9 f7       	brne	.-14     	; 0x37c6 <__fixunssfsi+0x14>
    37d4:	14 c0       	rjmp	.+40     	; 0x37fe <__fixunssfsi+0x4c>
    37d6:	b1 30       	cpi	r27, 0x01	; 1
    37d8:	91 f0       	breq	.+36     	; 0x37fe <__fixunssfsi+0x4c>
    37da:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__fp_zero>
    37de:	b1 e0       	ldi	r27, 0x01	; 1
    37e0:	08 95       	ret
    37e2:	0c 94 c3 1c 	jmp	0x3986	; 0x3986 <__fp_zero>
    37e6:	67 2f       	mov	r22, r23
    37e8:	78 2f       	mov	r23, r24
    37ea:	88 27       	eor	r24, r24
    37ec:	b8 5f       	subi	r27, 0xF8	; 248
    37ee:	39 f0       	breq	.+14     	; 0x37fe <__fixunssfsi+0x4c>
    37f0:	b9 3f       	cpi	r27, 0xF9	; 249
    37f2:	cc f3       	brlt	.-14     	; 0x37e6 <__fixunssfsi+0x34>
    37f4:	86 95       	lsr	r24
    37f6:	77 95       	ror	r23
    37f8:	67 95       	ror	r22
    37fa:	b3 95       	inc	r27
    37fc:	d9 f7       	brne	.-10     	; 0x37f4 <__fixunssfsi+0x42>
    37fe:	3e f4       	brtc	.+14     	; 0x380e <__fixunssfsi+0x5c>
    3800:	90 95       	com	r25
    3802:	80 95       	com	r24
    3804:	70 95       	com	r23
    3806:	61 95       	neg	r22
    3808:	7f 4f       	sbci	r23, 0xFF	; 255
    380a:	8f 4f       	sbci	r24, 0xFF	; 255
    380c:	9f 4f       	sbci	r25, 0xFF	; 255
    380e:	08 95       	ret

00003810 <__floatunsisf>:
    3810:	e8 94       	clt
    3812:	09 c0       	rjmp	.+18     	; 0x3826 <__floatsisf+0x12>

00003814 <__floatsisf>:
    3814:	97 fb       	bst	r25, 7
    3816:	3e f4       	brtc	.+14     	; 0x3826 <__floatsisf+0x12>
    3818:	90 95       	com	r25
    381a:	80 95       	com	r24
    381c:	70 95       	com	r23
    381e:	61 95       	neg	r22
    3820:	7f 4f       	sbci	r23, 0xFF	; 255
    3822:	8f 4f       	sbci	r24, 0xFF	; 255
    3824:	9f 4f       	sbci	r25, 0xFF	; 255
    3826:	99 23       	and	r25, r25
    3828:	a9 f0       	breq	.+42     	; 0x3854 <__floatsisf+0x40>
    382a:	f9 2f       	mov	r31, r25
    382c:	96 e9       	ldi	r25, 0x96	; 150
    382e:	bb 27       	eor	r27, r27
    3830:	93 95       	inc	r25
    3832:	f6 95       	lsr	r31
    3834:	87 95       	ror	r24
    3836:	77 95       	ror	r23
    3838:	67 95       	ror	r22
    383a:	b7 95       	ror	r27
    383c:	f1 11       	cpse	r31, r1
    383e:	f8 cf       	rjmp	.-16     	; 0x3830 <__floatsisf+0x1c>
    3840:	fa f4       	brpl	.+62     	; 0x3880 <__floatsisf+0x6c>
    3842:	bb 0f       	add	r27, r27
    3844:	11 f4       	brne	.+4      	; 0x384a <__floatsisf+0x36>
    3846:	60 ff       	sbrs	r22, 0
    3848:	1b c0       	rjmp	.+54     	; 0x3880 <__floatsisf+0x6c>
    384a:	6f 5f       	subi	r22, 0xFF	; 255
    384c:	7f 4f       	sbci	r23, 0xFF	; 255
    384e:	8f 4f       	sbci	r24, 0xFF	; 255
    3850:	9f 4f       	sbci	r25, 0xFF	; 255
    3852:	16 c0       	rjmp	.+44     	; 0x3880 <__floatsisf+0x6c>
    3854:	88 23       	and	r24, r24
    3856:	11 f0       	breq	.+4      	; 0x385c <__floatsisf+0x48>
    3858:	96 e9       	ldi	r25, 0x96	; 150
    385a:	11 c0       	rjmp	.+34     	; 0x387e <__floatsisf+0x6a>
    385c:	77 23       	and	r23, r23
    385e:	21 f0       	breq	.+8      	; 0x3868 <__floatsisf+0x54>
    3860:	9e e8       	ldi	r25, 0x8E	; 142
    3862:	87 2f       	mov	r24, r23
    3864:	76 2f       	mov	r23, r22
    3866:	05 c0       	rjmp	.+10     	; 0x3872 <__floatsisf+0x5e>
    3868:	66 23       	and	r22, r22
    386a:	71 f0       	breq	.+28     	; 0x3888 <__floatsisf+0x74>
    386c:	96 e8       	ldi	r25, 0x86	; 134
    386e:	86 2f       	mov	r24, r22
    3870:	70 e0       	ldi	r23, 0x00	; 0
    3872:	60 e0       	ldi	r22, 0x00	; 0
    3874:	2a f0       	brmi	.+10     	; 0x3880 <__floatsisf+0x6c>
    3876:	9a 95       	dec	r25
    3878:	66 0f       	add	r22, r22
    387a:	77 1f       	adc	r23, r23
    387c:	88 1f       	adc	r24, r24
    387e:	da f7       	brpl	.-10     	; 0x3876 <__floatsisf+0x62>
    3880:	88 0f       	add	r24, r24
    3882:	96 95       	lsr	r25
    3884:	87 95       	ror	r24
    3886:	97 f9       	bld	r25, 7
    3888:	08 95       	ret

0000388a <__fp_cmp>:
    388a:	99 0f       	add	r25, r25
    388c:	00 08       	sbc	r0, r0
    388e:	55 0f       	add	r21, r21
    3890:	aa 0b       	sbc	r26, r26
    3892:	e0 e8       	ldi	r30, 0x80	; 128
    3894:	fe ef       	ldi	r31, 0xFE	; 254
    3896:	16 16       	cp	r1, r22
    3898:	17 06       	cpc	r1, r23
    389a:	e8 07       	cpc	r30, r24
    389c:	f9 07       	cpc	r31, r25
    389e:	c0 f0       	brcs	.+48     	; 0x38d0 <__fp_cmp+0x46>
    38a0:	12 16       	cp	r1, r18
    38a2:	13 06       	cpc	r1, r19
    38a4:	e4 07       	cpc	r30, r20
    38a6:	f5 07       	cpc	r31, r21
    38a8:	98 f0       	brcs	.+38     	; 0x38d0 <__fp_cmp+0x46>
    38aa:	62 1b       	sub	r22, r18
    38ac:	73 0b       	sbc	r23, r19
    38ae:	84 0b       	sbc	r24, r20
    38b0:	95 0b       	sbc	r25, r21
    38b2:	39 f4       	brne	.+14     	; 0x38c2 <__fp_cmp+0x38>
    38b4:	0a 26       	eor	r0, r26
    38b6:	61 f0       	breq	.+24     	; 0x38d0 <__fp_cmp+0x46>
    38b8:	23 2b       	or	r18, r19
    38ba:	24 2b       	or	r18, r20
    38bc:	25 2b       	or	r18, r21
    38be:	21 f4       	brne	.+8      	; 0x38c8 <__fp_cmp+0x3e>
    38c0:	08 95       	ret
    38c2:	0a 26       	eor	r0, r26
    38c4:	09 f4       	brne	.+2      	; 0x38c8 <__fp_cmp+0x3e>
    38c6:	a1 40       	sbci	r26, 0x01	; 1
    38c8:	a6 95       	lsr	r26
    38ca:	8f ef       	ldi	r24, 0xFF	; 255
    38cc:	81 1d       	adc	r24, r1
    38ce:	81 1d       	adc	r24, r1
    38d0:	08 95       	ret

000038d2 <__fp_inf>:
    38d2:	97 f9       	bld	r25, 7
    38d4:	9f 67       	ori	r25, 0x7F	; 127
    38d6:	80 e8       	ldi	r24, 0x80	; 128
    38d8:	70 e0       	ldi	r23, 0x00	; 0
    38da:	60 e0       	ldi	r22, 0x00	; 0
    38dc:	08 95       	ret

000038de <__fp_nan>:
    38de:	9f ef       	ldi	r25, 0xFF	; 255
    38e0:	80 ec       	ldi	r24, 0xC0	; 192
    38e2:	08 95       	ret

000038e4 <__fp_negdi>:
    38e4:	90 95       	com	r25
    38e6:	80 95       	com	r24
    38e8:	70 95       	com	r23
    38ea:	60 95       	com	r22
    38ec:	50 95       	com	r21
    38ee:	40 95       	com	r20
    38f0:	30 95       	com	r19
    38f2:	21 95       	neg	r18
    38f4:	3f 4f       	sbci	r19, 0xFF	; 255
    38f6:	4f 4f       	sbci	r20, 0xFF	; 255
    38f8:	5f 4f       	sbci	r21, 0xFF	; 255
    38fa:	6f 4f       	sbci	r22, 0xFF	; 255
    38fc:	7f 4f       	sbci	r23, 0xFF	; 255
    38fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3900:	9f 4f       	sbci	r25, 0xFF	; 255
    3902:	08 95       	ret

00003904 <__fp_pscA>:
    3904:	00 24       	eor	r0, r0
    3906:	0a 94       	dec	r0
    3908:	16 16       	cp	r1, r22
    390a:	17 06       	cpc	r1, r23
    390c:	18 06       	cpc	r1, r24
    390e:	09 06       	cpc	r0, r25
    3910:	08 95       	ret

00003912 <__fp_pscB>:
    3912:	00 24       	eor	r0, r0
    3914:	0a 94       	dec	r0
    3916:	12 16       	cp	r1, r18
    3918:	13 06       	cpc	r1, r19
    391a:	14 06       	cpc	r1, r20
    391c:	05 06       	cpc	r0, r21
    391e:	08 95       	ret

00003920 <__fp_round>:
    3920:	09 2e       	mov	r0, r25
    3922:	03 94       	inc	r0
    3924:	00 0c       	add	r0, r0
    3926:	11 f4       	brne	.+4      	; 0x392c <__fp_round+0xc>
    3928:	88 23       	and	r24, r24
    392a:	52 f0       	brmi	.+20     	; 0x3940 <__fp_round+0x20>
    392c:	bb 0f       	add	r27, r27
    392e:	40 f4       	brcc	.+16     	; 0x3940 <__fp_round+0x20>
    3930:	bf 2b       	or	r27, r31
    3932:	11 f4       	brne	.+4      	; 0x3938 <__fp_round+0x18>
    3934:	60 ff       	sbrs	r22, 0
    3936:	04 c0       	rjmp	.+8      	; 0x3940 <__fp_round+0x20>
    3938:	6f 5f       	subi	r22, 0xFF	; 255
    393a:	7f 4f       	sbci	r23, 0xFF	; 255
    393c:	8f 4f       	sbci	r24, 0xFF	; 255
    393e:	9f 4f       	sbci	r25, 0xFF	; 255
    3940:	08 95       	ret

00003942 <__fp_split3>:
    3942:	57 fd       	sbrc	r21, 7
    3944:	90 58       	subi	r25, 0x80	; 128
    3946:	44 0f       	add	r20, r20
    3948:	55 1f       	adc	r21, r21
    394a:	59 f0       	breq	.+22     	; 0x3962 <__fp_splitA+0x10>
    394c:	5f 3f       	cpi	r21, 0xFF	; 255
    394e:	71 f0       	breq	.+28     	; 0x396c <__fp_splitA+0x1a>
    3950:	47 95       	ror	r20

00003952 <__fp_splitA>:
    3952:	88 0f       	add	r24, r24
    3954:	97 fb       	bst	r25, 7
    3956:	99 1f       	adc	r25, r25
    3958:	61 f0       	breq	.+24     	; 0x3972 <__fp_splitA+0x20>
    395a:	9f 3f       	cpi	r25, 0xFF	; 255
    395c:	79 f0       	breq	.+30     	; 0x397c <__fp_splitA+0x2a>
    395e:	87 95       	ror	r24
    3960:	08 95       	ret
    3962:	12 16       	cp	r1, r18
    3964:	13 06       	cpc	r1, r19
    3966:	14 06       	cpc	r1, r20
    3968:	55 1f       	adc	r21, r21
    396a:	f2 cf       	rjmp	.-28     	; 0x3950 <__fp_split3+0xe>
    396c:	46 95       	lsr	r20
    396e:	f1 df       	rcall	.-30     	; 0x3952 <__fp_splitA>
    3970:	08 c0       	rjmp	.+16     	; 0x3982 <__fp_splitA+0x30>
    3972:	16 16       	cp	r1, r22
    3974:	17 06       	cpc	r1, r23
    3976:	18 06       	cpc	r1, r24
    3978:	99 1f       	adc	r25, r25
    397a:	f1 cf       	rjmp	.-30     	; 0x395e <__fp_splitA+0xc>
    397c:	86 95       	lsr	r24
    397e:	71 05       	cpc	r23, r1
    3980:	61 05       	cpc	r22, r1
    3982:	08 94       	sec
    3984:	08 95       	ret

00003986 <__fp_zero>:
    3986:	e8 94       	clt

00003988 <__fp_szero>:
    3988:	bb 27       	eor	r27, r27
    398a:	66 27       	eor	r22, r22
    398c:	77 27       	eor	r23, r23
    398e:	cb 01       	movw	r24, r22
    3990:	97 f9       	bld	r25, 7
    3992:	08 95       	ret

00003994 <__gesf2>:
    3994:	0e 94 45 1c 	call	0x388a	; 0x388a <__fp_cmp>
    3998:	08 f4       	brcc	.+2      	; 0x399c <__gesf2+0x8>
    399a:	8f ef       	ldi	r24, 0xFF	; 255
    399c:	08 95       	ret

0000399e <__mulsf3>:
    399e:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <__mulsf3x>
    39a2:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__fp_round>
    39a6:	0e 94 82 1c 	call	0x3904	; 0x3904 <__fp_pscA>
    39aa:	38 f0       	brcs	.+14     	; 0x39ba <__mulsf3+0x1c>
    39ac:	0e 94 89 1c 	call	0x3912	; 0x3912 <__fp_pscB>
    39b0:	20 f0       	brcs	.+8      	; 0x39ba <__mulsf3+0x1c>
    39b2:	95 23       	and	r25, r21
    39b4:	11 f0       	breq	.+4      	; 0x39ba <__mulsf3+0x1c>
    39b6:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__fp_inf>
    39ba:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__fp_nan>
    39be:	11 24       	eor	r1, r1
    39c0:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__fp_szero>

000039c4 <__mulsf3x>:
    39c4:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__fp_split3>
    39c8:	70 f3       	brcs	.-36     	; 0x39a6 <__mulsf3+0x8>

000039ca <__mulsf3_pse>:
    39ca:	95 9f       	mul	r25, r21
    39cc:	c1 f3       	breq	.-16     	; 0x39be <__mulsf3+0x20>
    39ce:	95 0f       	add	r25, r21
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	55 1f       	adc	r21, r21
    39d4:	62 9f       	mul	r22, r18
    39d6:	f0 01       	movw	r30, r0
    39d8:	72 9f       	mul	r23, r18
    39da:	bb 27       	eor	r27, r27
    39dc:	f0 0d       	add	r31, r0
    39de:	b1 1d       	adc	r27, r1
    39e0:	63 9f       	mul	r22, r19
    39e2:	aa 27       	eor	r26, r26
    39e4:	f0 0d       	add	r31, r0
    39e6:	b1 1d       	adc	r27, r1
    39e8:	aa 1f       	adc	r26, r26
    39ea:	64 9f       	mul	r22, r20
    39ec:	66 27       	eor	r22, r22
    39ee:	b0 0d       	add	r27, r0
    39f0:	a1 1d       	adc	r26, r1
    39f2:	66 1f       	adc	r22, r22
    39f4:	82 9f       	mul	r24, r18
    39f6:	22 27       	eor	r18, r18
    39f8:	b0 0d       	add	r27, r0
    39fa:	a1 1d       	adc	r26, r1
    39fc:	62 1f       	adc	r22, r18
    39fe:	73 9f       	mul	r23, r19
    3a00:	b0 0d       	add	r27, r0
    3a02:	a1 1d       	adc	r26, r1
    3a04:	62 1f       	adc	r22, r18
    3a06:	83 9f       	mul	r24, r19
    3a08:	a0 0d       	add	r26, r0
    3a0a:	61 1d       	adc	r22, r1
    3a0c:	22 1f       	adc	r18, r18
    3a0e:	74 9f       	mul	r23, r20
    3a10:	33 27       	eor	r19, r19
    3a12:	a0 0d       	add	r26, r0
    3a14:	61 1d       	adc	r22, r1
    3a16:	23 1f       	adc	r18, r19
    3a18:	84 9f       	mul	r24, r20
    3a1a:	60 0d       	add	r22, r0
    3a1c:	21 1d       	adc	r18, r1
    3a1e:	82 2f       	mov	r24, r18
    3a20:	76 2f       	mov	r23, r22
    3a22:	6a 2f       	mov	r22, r26
    3a24:	11 24       	eor	r1, r1
    3a26:	9f 57       	subi	r25, 0x7F	; 127
    3a28:	50 40       	sbci	r21, 0x00	; 0
    3a2a:	9a f0       	brmi	.+38     	; 0x3a52 <__mulsf3_pse+0x88>
    3a2c:	f1 f0       	breq	.+60     	; 0x3a6a <__mulsf3_pse+0xa0>
    3a2e:	88 23       	and	r24, r24
    3a30:	4a f0       	brmi	.+18     	; 0x3a44 <__mulsf3_pse+0x7a>
    3a32:	ee 0f       	add	r30, r30
    3a34:	ff 1f       	adc	r31, r31
    3a36:	bb 1f       	adc	r27, r27
    3a38:	66 1f       	adc	r22, r22
    3a3a:	77 1f       	adc	r23, r23
    3a3c:	88 1f       	adc	r24, r24
    3a3e:	91 50       	subi	r25, 0x01	; 1
    3a40:	50 40       	sbci	r21, 0x00	; 0
    3a42:	a9 f7       	brne	.-22     	; 0x3a2e <__mulsf3_pse+0x64>
    3a44:	9e 3f       	cpi	r25, 0xFE	; 254
    3a46:	51 05       	cpc	r21, r1
    3a48:	80 f0       	brcs	.+32     	; 0x3a6a <__mulsf3_pse+0xa0>
    3a4a:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__fp_inf>
    3a4e:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__fp_szero>
    3a52:	5f 3f       	cpi	r21, 0xFF	; 255
    3a54:	e4 f3       	brlt	.-8      	; 0x3a4e <__mulsf3_pse+0x84>
    3a56:	98 3e       	cpi	r25, 0xE8	; 232
    3a58:	d4 f3       	brlt	.-12     	; 0x3a4e <__mulsf3_pse+0x84>
    3a5a:	86 95       	lsr	r24
    3a5c:	77 95       	ror	r23
    3a5e:	67 95       	ror	r22
    3a60:	b7 95       	ror	r27
    3a62:	f7 95       	ror	r31
    3a64:	e7 95       	ror	r30
    3a66:	9f 5f       	subi	r25, 0xFF	; 255
    3a68:	c1 f7       	brne	.-16     	; 0x3a5a <__mulsf3_pse+0x90>
    3a6a:	fe 2b       	or	r31, r30
    3a6c:	88 0f       	add	r24, r24
    3a6e:	91 1d       	adc	r25, r1
    3a70:	96 95       	lsr	r25
    3a72:	87 95       	ror	r24
    3a74:	97 f9       	bld	r25, 7
    3a76:	08 95       	ret

00003a78 <_exit>:
    3a78:	f8 94       	cli

00003a7a <__stop_program>:
    3a7a:	ff cf       	rjmp	.-2      	; 0x3a7a <__stop_program>
